
Archived entries from file /home/jerry/.emacs.d/init.org
* 2020
** 2020-01 January
*** 2020-01-31 Friday
**** Undo Propose
:PROPERTIES:
:ARCHIVE_TIME: 2020-01-31 Fri 13:25
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Undo
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package undo-propose
  :defer t
  :config

  (general-unbind 'undo-propose-mode-map
    :with 'ignore
    [remap evil-insert])

  (general-unbind 'undo-propose-mode-map
    :with 'undo-propose-cancel
    [remap evil-record-macro]
    [remap save-buffer]
    "C-r"
    [remap undo-propose])

  (general-unbind 'undo-propose-mode-map
    :with 'undo-propose-commit
    [remap evil-ret]
    [remap hydra-python-mode/body])

  ;; CUSTOM UNDO PROPOSE FUNCTION ;;
  (defun undo-propose ()
    (interactive)
    (if (bound-and-true-p undo-propose-mode)
        (undo)
      (let ((mode major-mode)
            (orig-buffer (current-buffer))
            (list-copy (undo-copy-list buffer-undo-list))
            (pos (point))
            (win-start (window-start))
            (tmp-buffer (generate-new-buffer
                         (concat "*Undo Propose: "
                                 (buffer-name) "*"))))
        (if undo-propose-pop-to-buffer
            (set-window-dedicated-p (get-buffer-window (pop-to-buffer tmp-buffer)) t)
          (switch-to-buffer tmp-buffer nil t))
        (funcall mode)
        (insert-buffer-substring orig-buffer 1 (1+ (buffer-size orig-buffer)))
        (goto-char pos)
        (set-window-start (selected-window) win-start)
        (setq-local buffer-undo-list list-copy)
        (setq-local buffer-read-only t)
        (setq-local undo-propose-parent orig-buffer)
        (undo-propose-mode 1)
        (undo-propose-copy-markers)
        (run-hooks 'undo-propose-entry-hook)
        (undo-propose--message "<return> to commit, 'q' or <escape> to cancel")))))
#+END_SRC

Archived entries from file /home/jerry/.emacs.d/init.org

**** link-hint
:PROPERTIES:
:ARCHIVE_TIME: 2020-01-31 Fri 13:26
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Movement
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package link-hint
:defer t
:ensure t)
#+END_SRC
** 2020-02 February
*** 2020-02-05 Wednesday
**** Org
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 17:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Main
:ARCHIVE_CATEGORY: init
:END:
***** Org Main
#+BEGIN_SRC emacs-lisp
(use-package org
  ;; :ensure org-plus-contrib
  :init

  ;; (add-hook 'org-cycle-hook 'org-toggle-tag-visibility)
  ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))
  ;; (add-hook 'org-mode-hook (lambda () (visual-line-mode +1)))
  ;; (add-hook 'org-mode-hook (lambda () (setq-local doom-modeline-enable-word-count nil)))
  ;; (add-hook 'org-src-mode-hook 'my/only-indent-buffer)

  ;; (remove-hook 'org-cycle-hook 'org-toggle-tag-visibility)
  ;; (remove-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))
  ;; (remove-hook 'org-mode-hook (lambda () (visual-line-mode +1)))
  ;; (remove-hook 'org-mode-hook (lambda () (setq-local doom-modeline-enable-word-count nil)))
  ;; (remove-hook 'org-src-mode-hook 'my/only-indent-buffer)

  (remove-hook 'org-cycle-hook #'org-optimize-window-after-visibility-change)

  :bind (:map org-src-mode-map
              ("C-c DEL" . org-edit-src-exit))
  :config

  (defun my/org-hooks ()
    (interactive)
    (evil-org-mode +1)
    (org-bullets-mode +1)
    (visual-line-mode +1)
    (setq-local doom-modeline-enable-word-count nil)
    (message " org hooks enabled"))

  (general-unbind 'org-columns-map
    :with 'org-columns-quit
    [remap org-columns]
    [remap save-buffer])

  (general-define-key
   :keymaps 'org-mode-map
   "C-c C-n" 'org-add-note
   "C-c b" 'org2blog--hydra-main/body
   "C-c y" 'org-evaluate-time-range
   "C-c C-s" 'org-emphasize
   "C-c h"   'my/goto-hydra
   "C-c o"    'helm-org-in-buffer-headings
   "C-c q" 'org-columns
   "C-M-k" 'org-metaup
   "C-M-j" 'org-metadown
   "C-<" 'org-priority-up
   "C->" 'org-priority-down
   "C-c C-s" 'org-emphasize
   "<C-S-up>" 'org-priority-up
   "<C-S-down>" 'org-priority-down)

  (general-nvmap
    :keymaps 'org-mode-map
    "zb" 'evil-scroll-line-to-bottom
    "C-k" 'my/kill-line)

  (general-define-key
   :keymaps 'org-agenda-mode-map
   "รง" 'redraw-display
   "<escape>" 'org-agenda-quit)

  (general-unbind 'org-agenda-mode-map
    :with 'org-agenda-quit
    [remap minibuffer-keyboard-quit])

  (general-unbind 'org-mode-map
    :with 'org-emphasize
    [remap pyenv-mode-set])

  (general-unbind 'org-mode-map
    :with 'cool-moves/line-backward
    [remap org-shiftcontrolup])

  (general-unbind 'org-mode-map
    :with 'cool-moves/line-forward
    [remap org-shiftcontroldown])

  (general-define-key
   :keymaps 'org-mode-map
   :states   '(normal visual)
   "TAB"   'org-cycle)

  (general-unbind 'org-mode-map
    :with 'delete-char
    [remap org-metaleft])

  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual)
   "DEL" 'org-edit-special)

  (general-define-key
   :keymaps 'org-src-mode-map
   :states '(normal visual)
   "DEL" 'org-edit-special)

  (general-nvmap
    :keymaps 'org-src-mode-map
    "DEL" 'org-edit-special)

  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual)
   "<insert>" 'org-insert-link
   "DEL" 'org-edit-special)

  (defun my/org-started-with-clock ()
    (interactive)
    (org-todo "STRT")
    (org-clock-in))

  (defun my/org-started-no-clock ()
    (interactive)
    (org-todo "STRT"))

  (defun my/org-todo-done ()
    (interactive)
    (org-todo "DONE"))

  (defun my/org-todo ()
    (interactive)
    (org-todo "TODO")
    (org-clock-out))

  (defun my/org-capture-now ()
    (interactive)
    (org-capture t "o"))

  (defun my/org-agenda-now-file ()
    (interactive)
    (find-file "~/org/Agenda/active/now.org"))

  (defun my/org-agenda ()
    (interactive)
    (org-agenda t "a"))

  (defun org-today-agenda ()
    (interactive)
    (let ((current-prefix-arg 1)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-1-day-agenda ()
    (interactive)
    (let ((current-prefix-arg 1)
          (org-deadline-warning-days -1))
      (org-agenda t "a")))

  (defun org-2-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 2)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-3-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 3)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-4-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 4)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-5-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 5)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-6-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 6)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-7-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 7)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  ;; "TODO(t)" "STRT(s)" "|" "DONE(d)"
  ;; MAKES SOURCE BUFFER NAMES NICER ;;
  (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
    (concat "[S] "org-buffer-name""))

  ;; https://emacs.stackexchange.com/a/32039
  (defun org-toggle-tag-visibility (state)
    "Run in `org-cycle-hook'."
    (message "%s" state)
    (cond
     ;; global cycling
     ((memq state '(overview contents showall))
      (org-map-entries
       (lambda ()
         (let ((tagstring (nth 5 (org-heading-components)))
               start end)
           (when tagstring
             (save-excursion
               (beginning-of-line)
               (re-search-forward tagstring)
               (setq start (match-beginning 0)
                     end (match-end 0)))
             (cond
              ((memq state '(overview contents))
               (outline-flag-region start end t))
              (t
               (outline-flag-region start end nil))))))))
     ;; local cycling
     ((memq state '(folded children subtree))
      (save-restriction
        (org-narrow-to-subtree)
        (org-map-entries
         (lambda ()
           (let ((tagstring (nth 5 (org-heading-components)))
                 start end)
             (when tagstring
               (save-excursion
                 (beginning-of-line)
                 (re-search-forward tagstring)
                 (setq start (match-beginning 0)
                       end (match-end 0)))
               (cond
                ((memq state '(folded children))
                 (outline-flag-region start end t))
                (t
                 (outline-flag-region start end nil)))))))))))

  ;; REMOVE LINK
  ;; https://emacs.stackexchange.com/a/21945
  (defun my/org-remove-link2  ()
    "Replace an org link by its description or if empty its address"
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (save-excursion
          (let ((remove (list (match-beginning 0) (match-end 0)))
                (description (if (match-end 3)
                                 (org-match-string-no-properties 3)
                               (org-match-string-no-properties 1))))
            (apply 'delete-region remove)
            (insert description)))))

  (setq org-agenda-files '("~/org/Agenda"))

  (setq org-agenda-files (apply 'append
                                (mapcar
                                 (lambda (directory)
                                   (directory-files-recursively
                                    directory org-agenda-file-regexp))
                                 '("~/org/Agenda"))))
  (defun my/update-agenda-files ()
    (interactive)
    (setq org-agenda-files (apply 'append
                                  (mapcar
                                   (lambda (directory)
                                     (directory-files-recursively
                                      directory org-agenda-file-regexp))
                                   '("~/org/Agenda")))))

  (setq org-src-window-setup 'current-window
        org-clock-sound "~/Sounds/cuckoo.au"
        org-clock-persist t
        org-clock-in-resume t
        org-clock-persist-query-resume nil
        org-pretty-entities t
        org-clock-into-drawer t
        org-clock-history-length 10
        org-clock-update-period 240
        org-clock-mode-line-total 'auto
        org-clock-clocked-in-display 'frame-title
        org-clock-out-remove-zero-time-clocks t
        org-clock-report-include-clocking-task t
        org-clock-auto-clock-resolution nil)

  (setq org-ellipsis ".")
  (setq org-indent-mode t)
  (setq org-tags-column -49)
  (setq org-log-into-drawer t)
  (setq org-timer-format "%s ")
  (setq org-lowest-priority 73)
  (setq org-startup-indented t)
  (setq org-default-priority 65)
  (setq org-export-with-toc nil)
  (setq org-cycle-level-faces t)
  (setq org-export-with-tags nil)
  (setq org-use-speed-commands t)
  (setq require-final-newline nil)
  (setq org-return-follows-link t)
  (setq org-src-fontify-natively nil)
  (setq org-image-actual-width nil)
  (setq org-agenda-tags-column -80)
  (setq org-footnote-auto-adjust 't)
  (setq org-src-tab-acts-natively t)
  (setq org-hide-emphasis-markers t)
  (setq org-replace-disputed-keys t)
  (setq org-fontify-done-headline t)
  (setq org-timer-display 'mode-line)
  (setq org-deadline-warning-days 14)
  (setq org-agenda-show-all-dates nil)
  (setq calendar-date-style 'european)
  (setq org-odt-fontify-srcblocks nil)
  (setq org-export-html-postamble nil)
  (setq-default org-export-html-postamble nil)
  (setq mode-require-final-newline nil)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-agenda-show-outline-path nil)
  (setq org-export-with-todo-keywords nil)
  (setq org-show-notification-handler nil)
  (setq org-refile-use-outline-path 'file)
  (setq org-link-file-path-type 'relative)
  (setq org-agenda-skip-archived-trees nil)
  (setq org-edit-src-content-indentation 1)
  (setq org-export-with-archived-trees nil)
  (setq org-fontify-whole-heading-line nil)
  (setq org-edit-src-persistent-message nil)
  (setq org-edit-src-auto-save-idle-delay 1)
  (setq org-agenda-show-future-repeats 'next)
  (setq org-agenda-skip-unavailable-files 't)
  (setq org-agenda-skip-deadline-if-done nil)
  (setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
  (setq org-src-window-setup 'current-window)
  (setq org-agenda-skip-timestamp-if-done nil)
  (setq org-agenda-skip-scheduled-if-done nil)
  (setq org-fontify-quote-and-verse-blocks 't)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-enforce-todo-checkbox-dependencies nil)
  (setq org-allow-promoting-top-level-subtree nil)
  (setq org-refile-allow-creating-parent-nodes nil)
  (setq org-src-ask-before-returning-to-edit-buffer nil)
  (setq org-agenda-skip-timestamp-if-deadline-is-shown t)
  (setq org-pretty-entities-include-sub-superscripts nil)
  (setq org-agenda-skip-additional-timestamps-same-entry 't)
  (setq org-refile-targets '((projectile-project-buffers :maxlevel . 3)))
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-global-properties
        '(("Effort_ALL" .
           "00:04 00:08 00:12 00:16 00:20 00:24 00:28")))
  (setq org-html-htmlize-output-type 'css)
  ;; (setq org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-mhe ol-rmail ol-eww ol-habit))
  ;; (setq org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-mhe ol-rmail ol-eww))
  (setq org-babel-temporary-directory "~/.emacs.d/babel-temp")
  (setq org-archive-location ".%s::datetree/")
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK"))) ;; Separate drawers for clocking and logs
  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 1.3))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STRT(s)" "|" "DONE(d)")))
  (setq org-file-apps (quote ((auto-mode . emacs)
                              ("\\.mm\\'" . default)
                              ("\\.x?html?\\'" . default)
                              ;; ("\\.jpg\\'" . "~/scripts/cline_scripts/my_feh %s")
                              ("\\.jpg\\'" . "viewnior %s")
                              ;; ("\\.mp4\\'" . "mpv %s")
                              ("\\.mp4\\'" . "vlc %s")
                              ("\\.webm\\'" . "vlc %s")
                              ;; ("\\.pdf\\'" . default)
                              ("\\.pdf\\'" . "zathura %s")
                              ;; ("\\.pdf\\'" . org-pdfview-open %s)
                              )))
  (add-to-list 'org-src-lang-modes '("i3" . i3wm-config))

  ;; CAPTURE TEMPLATES ;;
  (setq org-capture-templates
        '(("a" "Agenda" entry
           (file+headline
            "~/org/Agenda/agenda.org" "Tasks")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)

          ;; https://emacs.stackexchange.com/a/48656
          ("o" "Now" entry
           (file+headline
            "~/org/Agenda/now.org" "Now")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)

          ("t" "Tech" entry
           (file+headline "~/org/Data/tech.org" "Tech Notes")
           "* TODO %i%^{1|Title}\n\%u\n:from:\n%(buffer-name (org-capture-get :original-buffer))\n:end:\n%^{2}"
           :immediate-finish t)

          ("n" "Noite Sem Film" entry
           (file+headline "~/creative/Hora_Morta_Producoes/Davi/noite_sem_fim" "Tasks")
           "* TODO %i%^{1|Title}\n\%u\n:from:\n%(buffer-name (org-capture-get :original-buffer))\n:end:\n%^{2}"
           :immediate-finish t)

          ("e" "Emacs" entry
           (file+headline
            "~/org/Data/emacs.org" "Emacs Tasks")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)))

  ;; https://emacs.stackexchange.com/a/41685
  ;; (require 'ox-extra)
  ;; (ox-extras-activate '(ignore-headlines))
  )
 #+END_SRC
***** Org Extras
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :config
  (setq org-bullets-bullet-list (quote ("โ" "โ" "โ" "โ" "โ" "โ"))))

(use-package org-web-tools
  :after org
  :ensure t)

(use-package ox-epub
  :after org
  :ensure t)

(use-package ox-asciidoc
  :after org
  :ensure t)

(use-package toc-org
  :after org
  :config
  (setq toc-org-max-depth 5))

(use-package org2blog
  :after org
  :config

  (setq org2blog/wp-show-post-in-browser 'show)

  (setq org2blog/wp-blog-alist
        '(("daviramos-en"
           :url "http://daviramos.com/en/xmlrpc.php"
           :username "daviramos"
           :default-title "Hello World"
           :default-categories ("sci-fi")
           :tags-as-categories nil)
          ("daviramos-br"
           :url "http://daviramos.com/br/xmlrpc.php"
           :username "daviramos"
           :default-title "Hello World"
           :default-categories ("sci-fi")
           :tags-as-categories nil))))

(use-package org-pdfview
  :after org
  :ensure t)
#+END_SRC
**** Main
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:12
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_CATEGORY: init
:END:
***** Evil Main
#+BEGIN_SRC emacs-lisp
(use-package undo-fu)

(use-package evil
  :init
  (setq evil-respect-visual-line-mode t)
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-jumps-cross-buffers t)
  (setq evil-ex-substitute-global t)
  (setq evil-want-Y-yank-to-eol t)

  ;;;; EVIL ORG MODE ;;;
  (add-hook 'org-mode-hook 'evil-org-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)

  :bind (:map evil-normal-state-map
              ("gh" . org-up-element)
              ("gl" . org-down-element)
              ("gM" . evil-set-marker)
              ("m" . hydra-text-motions/body)
              ("m" . hydra-text-motions/body)
              ("u" . undo-fu-only-undo)
              ("zb" . evil-scroll-line-to-bottom)
              ("C-r" . undo-fu-only-redo)
              ("k"             . evil-previous-visual-line)
              ("<mouse-2>" . my/kill-this-buffer)
              ("j"             . evil-next-visual-line)
              ("C-c r"             . restart-emacs)
              ;; ("M-i"               . delete-frame)
              ("M-o"               . evil-jump-backward)
              ("M-i"               . evil-jump-forward)
              ("Q"                 . delete-frame)
              ("\\"                . toggle-truncate-lines)
              ("M-r"               . counsel-projectile-switch-to-buffer)
              ("gU"                . fix-word-upcase)
              ("gu"                . fix-word-downcase)
              ("ร"                 . git-timemachine)
              ("X"                 . whack-whitespace)
              ("0"                 . beginning-of-visual-line)
              ("C-a"                 . evil-numbers/inc-at-pt)
              ("gm"                . nil)
              ("z0"                . flyspell-correct-wrapper)
              ("C-k"               . my/kill-line)
              ("F"                 . avy-goto-word-1-above)
              ("f"                 . avy-goto-word-1-below)
              ("gf"                . evil-find-char)
              ("gF"                . evil-find-char-backward)
              ("C-."               . nil)
              ("."                 . counsel-org-capture)
              (","                 .  hydra-projectile-mode/body)
              ("gx"                . evil-exchange)
              ("gX"                . evil-exchange-cancel)
              (";"                 . evil-ex)
              ("<XF86Explorer>"  . quick-calc)
              ("K"                 . ignore)
              ("'"                 . evil-goto-mark)
              ("`"                 . evil-goto-mark-line)
              ("C-s"               . helm-occur)
              ("C-S-s"             . counsel-grep)
              ("M-s"               . last-buffer)
              ("gr"                . my/sel-to-end)
              ("C-h"               . hydra-help/body)
              ("zi"                . outline-show-all)
              ("M-RET"             . my/indent-buffer)
              ("ge"                . end-of-visual-line)
              ("gt"                . fix-word-capitalize)
              ("z-"                . my/insert-current-word)
              ("C-S-x"             . evil-numbers/dec-at-pt)
              ("C-S-a"             . evil-numbers/inc-at-pt)
              ("<escape>"          . save-buffer)
              ("go"                . cool-moves/open-line-below)
              ("gi"                . cool-moves/open-line-above)
              ("M-,"               . nswbuff-switch-to-previous-buffer)
              ("M-."               . nswbuff-switch-to-next-buffer)
              ("C-a"                 . evil-numbers/inc-at-pt)
              ("z="                . endless/ispell-word-then-abbrev))

  :bind (:map evil-visual-state-map
              ("gf"                . evil-find-char)
              ("gF"                . evil-find-char-backward)
              ("C-r" . undo-fu-only-redo)
              ("zb" . evil-scroll-line-to-bottom)
              ;; ("u" . evil-downcas)
              ("<mouse-2>" . my/kill-this-buffer)
              ("k"             . evil-previous-visual-line)
              ("j"             . evil-next-visual-line)
              ("C-c r"             . eval-region)
              ;; ("M-i"               . delete-frame)
              ("M-o"               . evil-jump-backward)
              ("M-i"               . evil-jump-forward)
              ("\\"                . toggle-truncate-lines)
              ("ร"                 . git-timemachine)
              ("z0"                . flyspell-correct-wrapper)
              ("F"                 . avy-goto-word-1-above)
              ("f"                 . avy-goto-word-1-below)
              ("."                 . counsel-org-capture)
              (","                 .  hydra-projectile-mode/body)
              ("C-."               . nil)
              (","                 .  nil)
              ("gx"                . evil-exchange)
              ("gX"                . evil-exchange-cancel)
              ("gr"                . my/sel-to-end)
              ("<XF86Explorer>"  . my/quick-calc-from-visual)
              ("'"                 . evil-goto-mark)
              ("`'"                . evil-goto-mark-line)
              ("C-S-s"             . counsel-grep)
              ("C-s"               . helm-occur)
              ("M-s"               . last-buffer)
              ("C-h"               . hydra-help/body)
              ("zi"                . outline-show-all)
              ("M-RET"             . my/indent-buffer)
              ("ge"                . end-of-visual-line)
              ("M-,"               . nswbuff-switch-to-previous-buffer)
              ("M-."               . nswbuff-switch-to-next-buffer)
              ("C-S-x"             . evil-numbers/dec-at-p)
              ("C-S-a"             . evil-numbers/inc-at-pt))

  :bind (:map evil-insert-state-map
              ("C-r" . undo-fu-only-redo)
              ("<mouse-2>" . my/kill-this-buffer)
              ("C-c r"             . restart-emacs)
              ("C-."               . nil)
              ("M-."               . nswbuff-switch-to-next-buffer)
              ("M-d"               . kill-word)
              ("<XF86Explorer>"  . quick-calc)
              ("M-s"               . last-buffer)
              ("C-S-s"             . counsel-grep)
              ("C-s"               . helm-occur)
              ("C-d"               . delete-char)
              ("M-,"               . nswbuff-switch-to-previous-buffer)
              ("M-f"               . forward-word)
              ("M-b"               . backward-word)
              ("C-n"               . next-line)
              ("C-p"               . previous-line)
              ("C-k"               . kill-line)
              ("C-h"               . backward-delete-char)
              ("C-u"               . my/backward-kill-line)
              ("C-e"               . move-end-of-line)
              ("C-a"               . move-beginning-of-line)
              ("C-S-x"             . evil-numbers/dec-at-p)
              ("C-S-a"             . evil-numbers/inc-at-pt))

  :bind (:map evil-ex-completion-map
              ("<insert>"          . yank)
              ("C-h"               . delete-backward-char)
              ("C-k"               . kill-line)
              ("C-d"               . delete-char)
              ("C-a"               . beginning-of-line)
              ("C-b"               . backward-char)
              ("C-u"               . my/backward-kill-line))

  :bind (:map evil-operator-state-map
              ("<escape>"          . evil-normal-state))
  :config

  (general-unbind '(evil-normal-state-map
                    evil-insert-state-map
                    evil-visual-state-map)
    :with 'ignore
    [remap evil-emacs-state])

  (evil-set-initial-state 'pomidor-mode 'emacs)
  (evil-set-initial-state 'chess-display-mode 'emacs)
  (evil-set-initial-state 'undo-propose-mode 'normal)
  (evil-set-initial-state 'completion-list-mode 'normal)
  (evil-set-initial-state 'Info-mode 'normal)
  (evil-set-initial-state 'with-editor-mode 'insert)
  (evil-set-initial-state 'term-mode 'insert)
  (evil-set-initial-state 'atomic-chrome-edit-mode 'insert)
  (evil-set-initial-state 'vc-git-log-edit-mode 'insert)
  (evil-set-initial-state 'org-journal-mode 'insert)
  (evil-set-initial-state 'shell-mode 'insert)
  (evil-set-initial-state 'racket-repl-mode 'insert)

  (defun my/quick-calc-from-visual ()
    (interactive)
    (evil-exit-visual-state)
    (quick-calc))

  (defun my/evil-delete-visual-line ()
    (interactive)
    (kill-line)
    (evil-insert-state))

  (defun my/kill-line ()
    (interactive)
    (kill-line)
    (evil-insert-state))

  (defun my/kill-visual-line-and-insert ()
    (interactive)
    (kill-visual-line)
    (evil-insert-state))

  (general-define-key
   :keymaps 'evil-ex-search-keymap
   "C-s"    'previous-history-element)

  ;; next-history-element
  (evil-mode +1))
#+END_SRC
****** Evil Colletion
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config

  (general-define-key
    :keymaps  'evil-collection-lispy-mode-map
    :states '(normal visual insert)
    "M-r"     'counsel-projectile-switch-to-buffer)

  (evil-collection-init))
#+END_SRC
***** Evil Extras
****** Evil Commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :after evil
  :ensure t
  :config
  (evil-commentary-mode 1))
#+END_SRC
****** Evil Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC
****** Evil Org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :config
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (global-evil-surround-mode 1))
#+END_SRC
****** Evil Exchange
#+BEGIN_SRC emacs-lisp
(use-package evil-exchange
  :after evil
  :config
  (setq evil-exchange-key "gx")
  (evil-exchange-cx-install))
#+END_SRC
****** Evil Numbers
#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
  :ensure t)
#+END_SRC
****** Evil Matchit
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :ensure t
  :config
  (global-evil-matchit-mode 1))
  #+END_SRC
****** Evil Visualstar
#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
  :after evil
  :config
  (setq evil-visualstar/persistent t)
  (global-evil-visualstar-mode +1))
#+END_SRC
****** Evil Multiedit
#+BEGIN_SRC emacs-lisp
(use-package evil-multiedit
  :ensure t
  :bind (("C-c m" . evil-multiedit-match-all)
         ("C-c it" . evil-multiedit-toggle-marker-here))
  :bind (:map evil-multiedit-state-map

              ("C-p"   . evil-multiedit-prev)
              ("C-n"   . evil-multiedit-next)
              ("RET"   . evil-multiedit-toggle-or-restrict-region))
  :config
  (setq evil-multiedit-dwim-motion-keys t))
#+END_SRC
****** Evil Swap Keys
#+BEGIN_SRC emacs-lisp
(use-package evil-swap-keys
  :after evil
  :config

  (defun evil-swap-keys-swap-dash-emdash ()
    "Swap the underscore and the dash."
    (interactive)
    (evil-swap-keys-add-pair "-" "โ"))

  (defun evil-swap-keys-swap-emdash-dash ()
    "Swap the underscore and the dash."
    (interactive)
    (evil-swap-keys-add-pair "โ" "-"))

  (defun evil-swap-keys-swap-eight-asterisk ()
    "Swap the underscore and the dash."
    (interactive)
    (evil-swap-keys-add-pair "8" "*"))

  (defun evil-swap-keys-swap-equal-plus ()
    "Swap the underscore and the dash."
    (interactive)
    (evil-swap-keys-add-pair "=" "+")))
#+END_SRC
***** General
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t)

  (general-create-definer insert-leader
    :prefix "<pause>")

  (insert-leader
    :states  '(insert)
    :keymaps 'override
    "a" "A"
    "b" "B"
    "c" "C"
    "e" "E"
    "f" "F"
    "g" "G"
    "h" "H"
    "i" "I"
    "j" "J"
    "l" "L"
    "m" "M"
    "n" "N"
    "o" "O"
    "p" "P"
    "q" "Q"
    "r" "R"
    "s" "S"
    "t" "T"
    "u" "U"
    "v" "V"
    "x" "X"
    "k" "K"
    "y" "Y"
    "w" "W"
    "z" "Z"
    "รง" "ร"
    "1" "!"
    "2" "@"
    "3" "#"
    "4" "$"
    "5" "%"
    "6" "ยจ"
    "8" "*"
    "9" "("
    "0" ")"
    "-" "_"
    "=" "+"
    "," "<"
    "." ">"
    ";" ":"
    "/" "?"
    "[" "{"
    "]" "}")


  (general-define-key
   :keymaps  'global
   "C-c f"   'font-lock-mode
   "C-x d"   'toggle-debug-on-error
   "C-c v"   'vlf-mode
   "C-c p" 'pcomplete-continue
   "C-_" 'undo-fu-only-undo
   "<mouse-8>" 'nswbuff-switch-to-next-buff
   ;; "<down-mouse-4>" 'eyebrowse-prev-window-config
   ;; "<down-mouse-5>" 'eyebrowse-next-window-config
   "<mouse-2>" 'my/kill-this-buffer
   "C-รง"  'ace-window
   "M-[" 'evil-window-prev
   "M-]" 'evil-window-next
   "C-c s"   'my/emacs-session
   "C--"     'my/text-double-decrease
   "C-="     'my/text-double-increase
   "C-0"     'text-scale-reset
   "C-c -"   'my/recenter-window
   "C-;"     'helpful-at-point
   "C-:"     'helpful-variable
   "C-c C-o" 'org-open-at-point-global
   "C-x p"   'my/goto-package)

  (general-define-key
   :keymaps  'override
   "C-x m"   'evil-record-macro
   ;; "C-,"     'treemacs-select-window
   ;; "C-."     'treemacs
   "C-,"     'evil-window-prev
   "C-."     'evil-window-next
   "C-/"     'my/term-below
   "C-c F s" 'my/show-server
   "C-x P"   'hydra-python-mode/body
   "C-c j"   'org-journal-new-entry
   "C-c รง"   'my/bash-shebang
   "C-x c"   'my/insert-checkmark
   "C-c k"   'kill-buffer-and-window
   "C-8"     'abort-recursive-edit
   "C-9"     'evil-commentary-line)

  (defun my/insert-checkmark ()
    (interactive)
    (insert "๎"))

  (general-define-key
   :states   '(normal visual)
   "รง"   'redraw-display
   "C-c n" 'evil-multiedit-match-and-next)

  (general-define-key
   :keymaps  'override
   :states   '(normal visual)
   "X" 'whack-whitespace)

  (general-define-key
   :states   '(visual)
   "R" 'evil-multiedit-match-all
   "C-c n" 'evil-multiedit-restore)

  (general-define-key
   :states   '(insert)
   :keymaps   'override
   "C-SPC" 'fix-word-capitalize
   "C-c u" 'universal-argument
   "C-c n" 'evil-multiedit-restore)

  (general-define-key
   :states   '(insert)
   :keymaps   'override
   "C-c u" 'universal-argument
   "C-c n" 'evil-multiedit-restore)

  (general-define-key
   :states   '(normal visual insert)
   "C-c C-9 w i" 'my/write-insert-mode
   "C-c C-9 w e" 'my/write-edit-mode
   "<f8>"    'man
   "M-9"     'delete-other-windows
   "M-0"     'quit-window
   "C-c a"   'align-regexp
   "C-c e"   'my/eval-buffer
   ;; "C-c o"    'helm-org-in-buffer-headings
   "C-c ="   'my/tangle-py-init.org-and-load)

    ;;;; LEADER ;;;;
  (general-create-definer leader
    :prefix "SPC")

  (leader
    :states  '(normal visual)
    :keymaps 'override
    "h"      'my/org-hooks
    "e"      'visible-mode
    ","      'org-todo
    "."      'my/tangle-py-init.org-only
    "d"      'my/dup-line
    "v"      'my/goto-file-at-point-macro
    "รง"      'hydra-magit-main/body
    "m"      'hydra-modes/body
    "s"      'hydra-search/body
    "c"      'hydra-commands/body
    ";"      'hydra-org-agenda/body
    "SPC"    'hydra-text-main/body
    "z"      'hydra-window/body
    "i"      'hydra-find-file/body
    "0"      'delete-window
    "a"      'counsel-M-x
    "f"      'counsel-find-file
    "j"      'hydra-org-clock/body
    "w"      'recursive-widen
    "g"      'ibuffer
    "R"      'eyebrowse-rename-window-config
    "r"      'my/ranger-deer
    "k"      'hydra-kill/body
    "q"      'my/kill-this-buffer
    "u"      'my/org-capture-now
    "U"      'my/org-agenda-now-file
    "o"      'hydra-org-mode/body
    "F"      'my/reopen-killed-file
    "t"      'counsel-buffer-or-recentf
    "T"      'my/reopen-killed-file-fancy
    "l"      'hydra-tangle/body
    "w"      'recursive-widen
    "W"      'widenToCenter
    "n"      'recursive-narrow-or-widen-dwim)

  (general-unbind 'global
    :with 'undo-tree-redo
    [remap redo]))
#+END_SRC
***** Org
****** Org Main
#+BEGIN_SRC emacs-lisp
(use-package org
  ;; :ensure org-plus-contrib
  :init

  (add-hook 'org-cycle-hook 'org-toggle-tag-visibility)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))
  (add-hook 'org-mode-hook (lambda () (visual-line-mode +1)))
  (add-hook 'org-mode-hook (lambda () (setq-local doom-modeline-enable-word-count nil)))
  (add-hook 'org-src-mode-hook 'my/only-indent-buffer)

  ;; (remove-hook 'org-cycle-hook 'org-toggle-tag-visibility)
  ;; (remove-hook 'org-mode-hook (lambda () (org-bullets-mode +1)))
  ;; (remove-hook 'org-mode-hook (lambda () (visual-line-mode +1)))
  ;; (remove-hook 'org-mode-hook (lambda () (setq-local doom-modeline-enable-word-count nil)))
  ;; (remove-hook 'org-src-mode-hook 'my/only-indent-buffer)

  (remove-hook 'org-cycle-hook #'org-optimize-window-after-visibility-change)

  :bind (:map org-src-mode-map
              ("C-c DEL" . org-edit-src-exit))
  :config

  (defun my/org-hooks ()
    (interactive)
    (evil-org-mode +1)
    (org-bullets-mode +1)
    (visual-line-mode +1)
    (setq-local doom-modeline-enable-word-count nil)
    (message " org hooks enabled"))

  (general-unbind 'org-columns-map
    :with 'org-columns-quit
    [remap org-columns]
    [remap save-buffer])

  (general-define-key
   :keymaps 'org-mode-map
   "C-c C-n" 'org-add-note
   "C-c b" 'org2blog--hydra-main/body
   "C-c y" 'org-evaluate-time-range
   "C-c C-s" 'org-emphasize
   "C-c h"   'my/goto-hydra
   "C-c o"    'helm-org-in-buffer-headings
   "C-c q" 'org-columns
   "C-M-k" 'org-metaup
   "C-M-j" 'org-metadown
   "C-<" 'org-priority-up
   "C->" 'org-priority-down
   "C-c C-s" 'org-emphasize
   "<C-S-up>" 'org-priority-up
   "<C-S-down>" 'org-priority-down)

  (general-nvmap
    :keymaps 'org-mode-map
    "zb" 'evil-scroll-line-to-bottom
    "C-k" 'my/kill-line)

  (general-define-key
   :keymaps 'org-agenda-mode-map
   "รง" 'redraw-display
   "<escape>" 'org-agenda-quit)

  (general-unbind 'org-agenda-mode-map
    :with 'org-agenda-quit
    [remap minibuffer-keyboard-quit])

  (general-unbind 'org-mode-map
    :with 'org-emphasize
    [remap pyenv-mode-set])

  (general-unbind 'org-mode-map
    :with 'cool-moves/line-backward
    [remap org-shiftcontrolup])

  (general-unbind 'org-mode-map
    :with 'cool-moves/line-forward
    [remap org-shiftcontroldown])

  (general-define-key
   :keymaps 'org-mode-map
   :states   '(normal visual)
   "TAB"   'org-cycle)

  (general-unbind 'org-mode-map
    :with 'delete-char
    [remap org-metaleft])

  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual)
   "DEL" 'org-edit-special)

  (general-define-key
   :keymaps 'org-src-mode-map
   :states '(normal visual)
   "DEL" 'org-edit-special)

  (general-nvmap
    :keymaps 'org-src-mode-map
    "DEL" 'org-edit-special)

  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual)
   "<insert>" 'org-insert-link
   "DEL" 'org-edit-special)

  (defun my/org-started-with-clock ()
    (interactive)
    (org-todo "STRT")
    (org-clock-in))

  (defun my/org-started-no-clock ()
    (interactive)
    (org-todo "STRT"))

  (defun my/org-todo-done ()
    (interactive)
    (org-todo "DONE"))

  (defun my/org-todo ()
    (interactive)
    (org-todo "TODO")
    (org-clock-out))

  (defun my/org-capture-now ()
    (interactive)
    (org-capture t "o"))

  (defun my/org-agenda-now-file ()
    (interactive)
    (find-file "~/org/Agenda/active/now.org"))

  (defun my/org-agenda ()
    (interactive)
    (org-agenda t "a"))

  (defun org-today-agenda ()
    (interactive)
    (let ((current-prefix-arg 1)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-1-day-agenda ()
    (interactive)
    (let ((current-prefix-arg 1)
          (org-deadline-warning-days -1))
      (org-agenda t "a")))

  (defun org-2-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 2)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-3-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 3)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-4-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 4)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-5-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 5)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-6-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 6)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  (defun org-7-days-agenda ()
    (interactive)
    (let ((current-prefix-arg 7)
          (org-deadline-warning-days 0))
      (org-agenda t "a")))

  ;; "TODO(t)" "STRT(s)" "|" "DONE(d)"
  ;; MAKES SOURCE BUFFER NAMES NICER ;;
  (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
    (concat "[S] "org-buffer-name""))

  ;; https://emacs.stackexchange.com/a/32039
  (defun org-toggle-tag-visibility (state)
    "Run in `org-cycle-hook'."
    (message "%s" state)
    (cond
     ;; global cycling
     ((memq state '(overview contents showall))
      (org-map-entries
       (lambda ()
         (let ((tagstring (nth 5 (org-heading-components)))
               start end)
           (when tagstring
             (save-excursion
               (beginning-of-line)
               (re-search-forward tagstring)
               (setq start (match-beginning 0)
                     end (match-end 0)))
             (cond
              ((memq state '(overview contents))
               (outline-flag-region start end t))
              (t
               (outline-flag-region start end nil))))))))
     ;; local cycling
     ((memq state '(folded children subtree))
      (save-restriction
        (org-narrow-to-subtree)
        (org-map-entries
         (lambda ()
           (let ((tagstring (nth 5 (org-heading-components)))
                 start end)
             (when tagstring
               (save-excursion
                 (beginning-of-line)
                 (re-search-forward tagstring)
                 (setq start (match-beginning 0)
                       end (match-end 0)))
               (cond
                ((memq state '(folded children))
                 (outline-flag-region start end t))
                (t
                 (outline-flag-region start end nil)))))))))))

  ;; REMOVE LINK
  ;; https://emacs.stackexchange.com/a/21945
  (defun my/org-remove-link2  ()
    "Replace an org link by its description or if empty its address"
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (save-excursion
          (let ((remove (list (match-beginning 0) (match-end 0)))
                (description (if (match-end 3)
                                 (org-match-string-no-properties 3)
                               (org-match-string-no-properties 1))))
            (apply 'delete-region remove)
            (insert description)))))

  (setq org-agenda-files '("~/org/Agenda"))

  (setq org-agenda-files (apply 'append
                                (mapcar
                                 (lambda (directory)
                                   (directory-files-recursively
                                    directory org-agenda-file-regexp))
                                 '("~/org/Agenda"))))
  (defun my/update-agenda-files ()
    (interactive)
    (setq org-agenda-files (apply 'append
                                  (mapcar
                                   (lambda (directory)
                                     (directory-files-recursively
                                      directory org-agenda-file-regexp))
                                   '("~/org/Agenda")))))

  (setq org-src-window-setup 'current-window
        org-clock-sound "~/Sounds/cuckoo.au"
        org-clock-persist t
        org-clock-in-resume t
        org-clock-persist-query-resume nil
        org-pretty-entities t
        org-clock-into-drawer t
        org-clock-history-length 10
        org-clock-update-period 240
        org-clock-mode-line-total 'auto
        org-clock-clocked-in-display 'frame-title
        org-clock-out-remove-zero-time-clocks t
        org-clock-report-include-clocking-task t
        org-clock-auto-clock-resolution nil)

  (setq org-ellipsis ".")
  (setq org-indent-mode t)
  (setq org-tags-column -49)
  (setq org-log-into-drawer t)
  (setq org-timer-format "%s ")
  (setq org-lowest-priority 73)
  (setq org-startup-indented t)
  (setq org-default-priority 65)
  (setq org-export-with-toc nil)
  (setq org-cycle-level-faces t)
  (setq org-export-with-tags nil)
  (setq org-use-speed-commands t)
  (setq require-final-newline nil)
  (setq org-return-follows-link t)
  (setq org-src-fontify-natively nil)
  (setq org-image-actual-width nil)
  (setq org-agenda-tags-column -80)
  (setq org-footnote-auto-adjust 't)
  (setq org-src-tab-acts-natively t)
  (setq org-hide-emphasis-markers t)
  (setq org-replace-disputed-keys t)
  (setq org-fontify-done-headline t)
  (setq org-timer-display 'mode-line)
  (setq org-deadline-warning-days 14)
  (setq org-agenda-show-all-dates nil)
  (setq calendar-date-style 'european)
  (setq org-odt-fontify-srcblocks nil)
  (setq org-export-html-postamble nil)
  (setq-default org-export-html-postamble nil)
  (setq mode-require-final-newline nil)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-agenda-show-outline-path nil)
  (setq org-export-with-todo-keywords nil)
  (setq org-show-notification-handler nil)
  (setq org-refile-use-outline-path 'file)
  (setq org-link-file-path-type 'relative)
  (setq org-agenda-skip-archived-trees nil)
  (setq org-edit-src-content-indentation 1)
  (setq org-export-with-archived-trees nil)
  (setq org-fontify-whole-heading-line nil)
  (setq org-edit-src-persistent-message nil)
  (setq org-edit-src-auto-save-idle-delay 1)
  (setq org-agenda-show-future-repeats 'next)
  (setq org-agenda-skip-unavailable-files 't)
  (setq org-agenda-skip-deadline-if-done nil)
  (setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
  (setq org-src-window-setup 'current-window)
  (setq org-agenda-skip-timestamp-if-done nil)
  (setq org-agenda-skip-scheduled-if-done nil)
  (setq org-fontify-quote-and-verse-blocks 't)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-enforce-todo-checkbox-dependencies nil)
  (setq org-allow-promoting-top-level-subtree nil)
  (setq org-refile-allow-creating-parent-nodes nil)
  (setq org-src-ask-before-returning-to-edit-buffer nil)
  (setq org-agenda-skip-timestamp-if-deadline-is-shown t)
  (setq org-pretty-entities-include-sub-superscripts nil)
  (setq org-agenda-skip-additional-timestamps-same-entry 't)
  (setq org-refile-targets '((projectile-project-buffers :maxlevel . 3)))
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-global-properties
        '(("Effort_ALL" .
           "00:04 00:08 00:12 00:16 00:20 00:24 00:28")))
  (setq org-html-htmlize-output-type 'css)
  ;; (setq org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-mhe ol-rmail ol-eww ol-habit))
  ;; (setq org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-mhe ol-rmail ol-eww))
  (setq org-babel-temporary-directory "~/.emacs.d/babel-temp")
  (setq org-archive-location ".%s::datetree/")
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK"))) ;; Separate drawers for clocking and logs
  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 1.3))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STRT(s)" "|" "DONE(d)")))
  (setq org-file-apps (quote ((auto-mode . emacs)
                              ("\\.mm\\'" . default)
                              ("\\.x?html?\\'" . default)
                              ;; ("\\.jpg\\'" . "~/scripts/cline_scripts/my_feh %s")
                              ("\\.jpg\\'" . "viewnior %s")
                              ;; ("\\.mp4\\'" . "mpv %s")
                              ("\\.mp4\\'" . "vlc %s")
                              ("\\.webm\\'" . "vlc %s")
                              ;; ("\\.pdf\\'" . default)
                              ("\\.pdf\\'" . "zathura %s")
                              ;; ("\\.pdf\\'" . org-pdfview-open %s)
                              )))
  (add-to-list 'org-src-lang-modes '("i3" . i3wm-config))

  ;; CAPTURE TEMPLATES ;;
  (setq org-capture-templates
        '(("a" "Agenda" entry
           (file+headline
            "~/org/Agenda/agenda.org" "Tasks")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)

          ;; https://emacs.stackexchange.com/a/48656
          ("o" "Now" entry
           (file+headline
            "~/org/Agenda/now.org" "Now")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)

          ("t" "Tech" entry
           (file+headline "~/org/Data/tech.org" "Tech Notes")
           "* TODO %i%^{1|Title}\n\%u\n:from:\n%(buffer-name (org-capture-get :original-buffer))\n:end:\n%^{2}"
           :immediate-finish t)

          ("n" "Noite Sem Film" entry
           (file+headline "~/creative/Hora_Morta_Producoes/Davi/noite_sem_fim" "Tasks")
           "* TODO %i%^{1|Title}\n\%u\n:from:\n%(buffer-name (org-capture-get :original-buffer))\n:end:\n%^{2}"
           :immediate-finish t)

          ("e" "Emacs" entry
           (file+headline
            "~/org/Data/emacs.org" "Emacs Tasks")
           "* TODO %i%^{1|Title}\n\%u\n%^{2}" :immediate-finish t)))

  ;; https://emacs.stackexchange.com/a/41685
  ;; (require 'ox-extra)
  ;; (ox-extras-activate '(ignore-headlines))
  )
 #+END_SRC
****** Org Extras
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :config
  (setq org-bullets-bullet-list (quote ("โ" "โ" "โ" "โ" "โ" "โ"))))

(use-package org-web-tools
  :after org
  :ensure t)

(use-package ox-epub
  :after org
  :ensure t)

(use-package ox-asciidoc
  :after org
  :ensure t)

(use-package toc-org
  :after org
  :config
  (setq toc-org-max-depth 5))

(use-package org2blog
  :after org
  :config

  (setq org2blog/wp-show-post-in-browser 'show)

  (setq org2blog/wp-blog-alist
        '(("daviramos-en"
           :url "http://daviramos.com/en/xmlrpc.php"
           :username "daviramos"
           :default-title "Hello World"
           :default-categories ("sci-fi")
           :tags-as-categories nil)
          ("daviramos-br"
           :url "http://daviramos.com/br/xmlrpc.php"
           :username "daviramos"
           :default-title "Hello World"
           :default-categories ("sci-fi")
           :tags-as-categories nil))))

(use-package org-pdfview
  :after org
  :ensure t)
#+END_SRC
**** Utils
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:38
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_CATEGORY: init
:END:
***** Treemacs
****** Treemacs Main
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))

  (defun my/treemacs-hooks ()
    (interactive)
    (treemacs-resize-icons 16))
  (add-hook 'treemacs-select-hook 'my/treemacs-hooks)
  (add-hook 'treemacs-select-hook 'beacon-blink)
  (add-hook 'treemacs-quit-hook 'beacon-blink)
  (add-hook 'treemacs-mode-hook 'hide-mode-line-mode)

  :config

  (with-eval-after-load 'treemacs
    (defun treemacs-ignore-gitignore (file _)
      (string= file "__pycache__"))
    (push #'treemacs-ignore-gitignore treemacs-ignored-file-predicates))

  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 nil
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   1
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         t
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       nil
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             nil
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          ;; treemacs-width                         35
          treemacs-width                         15)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
;;;; FACES ;;;;
  (custom-set-faces
   '(treemacs-directory-collapsed-face ((t (:inherit treemacs-directory-face :weight normal :height 0.8))))
   '(treemacs-directory-face ((t (:foreground "#f8f8f2" :height 0.80))))
   '(treemacs-file-face ((t (:foreground "#f8f8f2" :height 0.80))))
   '(treemacs-git-added-face ((t (:foreground "#50fa7b" :height 0.8 :width normal))))
   '(treemacs-git-conflict-face ((t (:foreground "#ff5555" :height 0.8))))
   '(treemacs-git-ignored-face ((t (:inherit font-lock-comment-face :height 0.8))))
   '(treemacs-git-modified-face ((t (:foreground "#bd93f9" :height 0.8))))
   '(treemacs-git-unmodified-face ((t (:inherit treemacs-file-face :height 0.8))))
   '(treemacs-git-untracked-face ((t (:inherit font-lock-doc-face :height 0.8))))
   '(treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 0.80)))))

  (general-unbind 'treemacs-mode-map
    :with 'windmove-right
    [remap minibuffer-keyboard-quit]
    [remap treemacs-select-window])

  (general-unbind 'treemacs-mode-map
    :with 'ignore
    [remap other-window]
    [remap windmove-right]
    [remap minibuffer-keyboard-quit])

  (general-unbind 'treemacs-mode-map
    :with 'treemacs-quit
    [remap minibuffer-keyboard-quit])

  (general-define-key
   :keymaps 'treemacs-mode-map
   "<insert>" 'treemacs-create-file
   "ad" 'treemacs-remove-project-from-workspace
   "ap" 'treemacs-add-project-to-workspace
   "aP" 'treemacs-projectile
   "D" 'treemacs-delete
   "m" 'treemacs-RET-action
   "<C-return>" 'my/treemacs-ret-quit)

;;;; FUNCTIONS ;;;;

  (defun my/treemacs-ret-quit ()
    (interactive)
    (treemacs-RET-action)
    (delete-window (treemacs-get-local-window)))

  ;;;; EYEBROWSE TREEMACS FUNCTION ;;;;
  ;; https://github.com/Alexander-Miller/treemacs/issues/523#issuecomment-531552758
  (defun treemacs--follow-after-eyebrowse-switch ()
    (when treemacs-follow-mode
      (--when-let (treemacs-get-local-window)
        (with-selected-window it
          (treemacs--follow-after-buffer-list-update)
          (hl-line-highlight)))))

  (add-hook 'eyebrowse-post-window-switch-hook #'treemacs--follow-after-eyebrowse-switch)
  ;; https://github.com/Alexander-Miller/treemacs/issues/569#issuecomment-557266369
  ;; (defun popup-treemacs ()
  ;;   (save-selected-window
  ;;     (treemacs-select-window)))
  ;; (add-hook 'eyebrowse-post-window-switch-hook #'popup-treemacs)

  :bind
  (:map global-map
        ("C-,"   . treemacs-select-window)))
#+END_SRC
****** Treemacs Evil
#+BEGIN_SRC emacs-lisp
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)
#+END_SRC
****** Treemacs Projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC
****** Treemacs Icons Dired
#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs
  :config (treemacs-icons-dired-mode))
#+END_SRC
****** Treemacs Magit
#+BEGIN_SRC emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC
***** Restart Emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t
  :config
  (setq restart-emacs-restore-frames nil))
#+END_SRC
***** Bettter Defaults
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :config
  (setq visible-bell nil))
#+END_SRC
***** Recursive Narrow
#+BEGIN_SRC emacs-lisp
(use-package recursive-narrow)
#+END_SRC
#+END_SRC
***** No Littering
#+BEGIN_SRC emacs-lisp
(use-package no-littering)
#+END_SRC
***** Saveplace
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init
  (setq save-place-file "~/.emacs.d/var/save-place.el")
  :config
  (setq save-place-limit 50)
  (save-place-mode 1))
#+END_SRC
***** Benchmark Init
#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  ;; See https://github.com/dholm/benchmark-init-el
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC
***** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :init (add-hook 'beacon-dont-blink-predicates
                  (lambda () (bound-and-true-p centered-cursor-mode)))
  :config
  (setq beacon-dont-blink-commands '(next-line
                                     org-edit-special
                                     org-edit-src-exit
                                     evil-forward-word-begin
                                     evil-backward-word-begin
                                     beginning-of-visual-line
                                     evil-goto-first-line
                                     evil-goto-line
                                     evil-end-of-visual-line
                                     end-of-visual-line
                                     evil-indent
                                     previous-line
                                     forward-line
                                     find-packs
                                     find-keys
                                     find-misc
                                     helpful-at-point
                                     quit-window
                                     find-functions
                                     find-macros
                                     evil-scroll-page-up
                                     evil-scroll-page-down
                                     find-hydras
                                     find-file
                                     counsel-find-file
                                     scroll-up-command
                                     scroll-down-command
                                     last-buffer))
  (setq beacon-size 30
        beacon-blink-delay 0.1
        beacon-blink-duration 0.06
        beacon-blink-when-focused nil
        beacon-blink-when-window-scrolls t
        beacon-blink-when-window-changes t
        beacon-blink-when-point-moves-vertically nil
        beacon-blink-when-point-moves-horizontally nil)
  ;; (beacon-mode +1)
  )
#+END_SRC
***** Clipmon
#+BEGIN_SRC emacs-lisp
(use-package clipmon
  :defer nil
  :config
  ;; https://github.com/bburns/clipmon/issues/11
  (setq clipmon-transform-trim nil)
  (setq selection-coding-system 'utf-8-unix)
  (clipmon-mode +1))
#+END_SRC
***** Unkillable Scratch
#+BEGIN_SRC emacs-lisp
(use-package unkillable-scratch
  :defer nil
  :ensure t
  :config
  (setq unkillable-scratch-behavior 'bury
        unkillable-buffers '("^\\*scratch\\*$"
                             "*Racket REPL*"
                             "order.org"))

  ;; http://bit.ly/332kLj9
  (defun my/create-scratch-buffer nil
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))

  (unkillable-scratch))
#+END_SRC
***** Undo
****** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :after evil
  :config
  (global-undo-tree-mode -1)
  (undo-tree-mode -1))
#+END_SRC
****** Undohist
#+BEGIN_SRC emacs-lisp
(use-package undohist
  :init
  (setq undohist-directory "~/.emacs.d/var/undohist")
  :config
  (undohist-initialize))
#+END_SRC
****** Undo-fu
#+BEGIN_SRC emacs-lisp
(use-package undo-fu)
#+END_SRC

***** VLF
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :defer t
  :ensure t
  :init
  (add-hook 'vlf-mode-hook 'my/vlf-hooks)
  :config

  (setq vlf-save-in-place t)

  (defun my/vlf-hooks ()
    (interactive)
    (font-lock-mode -1)
    (setq-local super-save-mode nil))

  (setq vlf-tune-enabled nil
        vlf-application 'dont-ask)

  (require 'vlf-setup))
#+END_SRC
***** Sudo Edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :defer t
  :ensure t)
#+END_SRC

***** Caps Lock
#+BEGIN_SRC emacs-lisp
(use-package caps-lock
  :bind (("C-c c" . caps-lock-mode)))
#+END_SRC
***** Elmacro
#+BEGIN_SRC emacs-lisp
(use-package elmacro
  :defer t
  :config
  (elmacro-mode +1))
#+END_SRC
***** auto-update
#+BEGIN_SRC emacs-lisp
;; (use-package auto-package-update
;;   :config
;;   (setq auto-package-update-interval 7
;;         auto-package-update-delete-old-versions t
;;         auto-package-update-hide-results t
;;         auto-package-update-prompt-before-update t)
;;   (auto-package-update-maybe))
#+END_SRC
***** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :defer nil
  :init
  (add-hook 'helpful-mode-hook 'my/helpful-hooks)
  :config
  (setq helpful-max-buffers 2)

  (defun my/helpful-hooks ()
    (interactive)
    (hl-line-mode +1))

  ;; https://stackoverflow.com/a/10931190
  (defun my/kill-help-buffers ()
    (interactive)
    (helpful-kill-buffers)
    (cl-flet ((kill-buffer-ask (buffer) (kill-buffer buffer)))
      (kill-matching-buffers "*Help*")))

  ;; https://stackoverflow.com/a/10931190
  (defun my/kill-matching-buffers (regexp)
    "Kill buffers matching REGEXP without asking for confirmation."
    (interactive "sKill buffers matching this regex: ")
    (cl-flet ((kill-buffer-ask (buffer) (kill-buffer buffer)))
      (kill-matching-buffers regexp)))

  (general-nvmap
    :keymaps 'helpful-mode-map
    "q" 'quit-window
    "C-r" 'helpful-update
    "gr" 'sel-to-end)

  (general-nmap
    :keymaps 'helpful-mode-map
    ;; "<escape>" 'evil-ex-nohighlight
    "<escape>" 'quit-window)

  ;; (general-unbind 'helpful-mode-map
  ;;   :with 'quit-window
  ;;   [remap my/quiet-save-buffer])

  (general-define-key
   :keymaps 'helpful-mode-map
   "q" 'quit-window
   "<tab>"     'forward-button
   "<backtab>" 'backward-button
   "C-r" 'helpful-update
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward)

  )
#+END_SRC
****** Shut Up
#+BEGIN_SRC emacs-lisp
  (use-package shut-up)
#+END_SRC
****** Bug Hunter
#+BEGIN_SRC emacs-lisp
(use-package bug-hunter
  :defer t)
#+END_SRC
***** Helm
****** Helm Main
#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer nil
  :init
  (add-hook 'helm-occur-mode-hook 'previous-history-element)
  :config
  (setq helm-split-window-default-side 'same
        helm-full-frame t)
  ;; (helm-autoresize-mode +1)

  (general-define-key
   :keymaps   'helm-map
   "<insert>" 'yank
   "C-s"      'previous-history-element
   "C-w"      'backward-kill-word))
#+END_SRC
****** Helm Org
#+BEGIN_SRC emacs-lisp
(use-package helm-org
  :after helm org
  :config

  (defun my/helm-org-in-buffer-headings ()
    (interactive)
    (widen)
    (helm-org-in-buffer-headings)
    (org-narrow-to-subtree)))
#+END_SRC
****** Helm Org Rifle
#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :after helm org)
#+END_SRC
****** Helm Swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :after helm org)
  #+END_SRC
***** Ivy
****** Ivy Main
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :init
  (add-hook 'ivy-occur-mode-hook 'hl-line-mode)

  (setq ivy-ignore-buffers '(".*elc"
                             "^#.*#$"
                             "^\\*.*\\*"
                             "archive.org$"
                             "*slime-repl sbcl"
                             "magit"
                             "*org-src-fontification.\\*"))
  :config
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)

  (ivy-set-actions
   'counsel-M-x
   `(("d" counsel--find-symbol "definition")
     ("h" ,(lambda (x) (helpful-callable (intern x))) "help")))

  (defun my/enable-ivy-counsel ()
    (interactive)
    (ivy-mode +1)
    (counsel-mode +1)
    (message " ivy on"))

  (defun my/disable-ivy-counsel ()
    (interactive)
    (ivy-mode -1)
    (counsel-mode -1)
    (message " ivy off"))

  (defun ivy-with-thing-at-point (cmd)
    (let ((ivy-initial-inputs-alist
           (list
            (cons cmd (thing-at-point 'symbol)))))
      (funcall cmd)))

  (defun counsel-ag-thing-at-point ()
    (interactive)
    (ivy-with-thing-at-point 'counsel-ag))

  (defun counsel-projectile-ag-thing-at-point ()
    (interactive)
    (ivy-with-thing-at-point 'counsel-projectile-ag))

  (setq ivy-wrap t)
  (setq ivy-on-del-error-function #'ignore)

  ;; from https://stackoverflow.com/a/36165680
  (setq counsel-ag-base-command "ag --filename --nocolor --nogroup --smart-case --skip-vcs-ignores --silent --ignore '*.html' --ignore '*.el' --ignore '*.elc' %s")

  (setq ivy-use-virtual-buffers nil)
  (setq ivy-count-format "(%d/%d) ")
  (setq counsel-bookmark-avoid-dired t)
  (setq counsel-find-file-at-point t)
  (setq counsel-outline-display-style 'title)
  (setq counsel-find-file-ignore-regexp (regexp-opt '( "log")))
  (setq counsel-find-file-ignore-regexp nil)
  (setq ivy-extra-directories nil)
  (ivy-mode 1)

          ;;;; KEYBINDINGS ;;;;

  (general-unbind 'ivy-occur-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'ivy-minibuffer-map
    :with 'ignore
    [remap windmove-up]
    [remap windmove-left]
    [remap windmove-right])

  ;; (general-unbind 'ivy-minibuffer-map
  ;;   :with 'ivy-kill-ring-save
  ;;   [remap eyebrowse-next-window-config])

  (general-unbind 'ivy-minibuffer-map
    :with 'ivy-alt-done
    [remap windmove-down])

  (general-unbind 'ivy-minibuffer-map
    :with 'ivy-next-line
    [remap counsel-projectile-switch-to-buffer]
    [remap transpose-chars]
    [remap transpose-words]
    [remap counsel-bookmark])

  (general-unbind 'ivy-minibuffer-map
    :with 'ivy-next-line
    [remap counsel-projectile-switch-to-buffer])

  (general-define-key
   :keymaps 'ivy-minibuffer-map
   "C-," 'ivy-next-line
   "C-c ," nil
   "<insert>" 'clipboard-yank
   "C-j" 'ivy-immediate-done
   "<C-return>" 'ivy-alt-done
   "C-h" 'ivy-backward-delete-char
   "TAB" 'ivy-alt-done
   "C-c -" 'my/ivy-done-and-narrow
   "M-m" 'ivy-done
   "C-m" 'ivy-done
   "C-c o" 'ivy-kill-ring-save
   "<escape>" 'abort-recursive-edit
   "C-0" 'my/ivy-done-trim-color
   "M-r" 'ivy-next-line
   "C--" 'ivy-next-line
   "C-=" 'ivy-previous-line
   "M-d" 'ivy-next-line
   "C-t" 'ivy-next-line
   "M-u" 'ivy-previous-line
   "C-w" 'ivy-backward-kill-word
   "C-u" 'my/backward-kill-line
   "<XF86Calculator>" 'abort-recursive-edit)

  (general-define-key
   :states '(normal visual)
   :keymaps 'ivy-mode-map
   "M-u" 'ivy-yasnippet)

  (general-nvmap
    :keymaps 'override
    "M-t" 'ivy-switch-buffer)

  (ivy-mode +1))
    #+END_SRC
****** Ivy Hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
  :after hydra)
#+END_SRC
****** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :defer nil
  :config

  (general-define-key
   :keymaps 'counsel-mode-map
   "C-7" 'counsel-bookmark
   "M-y" 'my/yank-pop)

  (defun my/counsel-ag-python ()
    (interactive)
    (counsel-ag nil "~/Python/code"))

  (defun my/yank-pop ()
    (interactive)
    (evil-insert-state)
    (counsel-yank-pop))

  (defun my/benchmark-init-commands ()
    (interactive)
    (counsel-M-x "^benchmark-init/"))

  (ivy-set-actions
   'counsel-colors-emacs
   '(("h" counsel-colors-action-insert-hex "insert hex")
     ("H" counsel-colors-action-kill-hex "kill hex")
     ("t" my/counsel-colors-action-insert-hex-and-trim "insert trimmed hex")
     ("c" my/counsel-colors-action-insert-hex-in-css "insert in css")))

  (ivy-set-actions
   'counsel-colors-web
   '(("h" counsel-colors-action-insert-hex "insert hex")
     ("H" counsel-colors-action-kill-hex "kill hex")
     ("t" my/counsel-colors-action-insert-hex-and-trim "insert trimmed hex")
     ("c" my/counsel-colors-action-insert-hex-in-css "insert in css")))

  (defun my/counsel-colors-action-insert-hex-and-trim (color)
    (insert (get-text-property 0 'hex color))
    (end-of-line)
    (delete-char 6)
    (upcase-word -1))

  (defun my/counsel-colors-action-insert-hex-in-css (color)
    (just-one-space)
    (insert (get-text-property 0 'hex color))
    (end-of-line)
    (delete-char 6)
    (upcase-word -1)
    (insert ";")
    (backward-char 1)
    (evil-normal-state))

  (counsel-mode 1))
#+END_SRC
***** Search
****** Engine
#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :config
  (defun engine/search-prompt (engine-name default-word)
    (if (string= default-word "")
        (format "Search %s: " (capitalize engine-name))
      (format "Search %s (%s): " (capitalize engine-name) default-word)))

  (defadvice browse-url (after browse-url-after activate) (my/focus-chrome-delayed))
  ;; (advice-remove 'browse-url 'my/focus-chrome-delayed)

  (defengine Google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine Python-3
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=Python 3 %s")

  ;; (defengine Python-3-docs
  ;;   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=Python 3.8 documentation %s")

  (defengine Python-3-docs
    "https://docs.python.org/3/search.html?q= %s")

  (defengine google-bootstrap
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=bootstrap 4 %s")

  (defengine google-flexbox
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=flexbox %s")

  (defengine google-css
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=css %s")

  (defengine google-css-grid
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=css grid %s")

  (defengine devdocs-io
    "https://devdocs.io/#q=%s")
  (defengine emacs-wiki
    "https://duckduckgo.com/?q=%s site:emacswiki.org")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")
  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")
  (defengine reddit
    "https://old.reddit.com/search?q=%s")

  (defengine dic-informal
    "https://www.dicionarioinformal.com.br/sinonimos/%s")

  (defun my/engine-search-dic-informal ()
    (interactive)
    (engine/search-dic-informal (current-word)))

  (defengine michaelis
    "https://michaelis.uol.com.br/moderno-portugues/busca/portugues-brasileiro/%s")

  (defun my/engine-search-michaealis ()
    (interactive)
    (engine/search-michaelis (current-word)))

  (defengine asimov-wikia
    "http://asimov.wikia.com/wiki/Special:Search?query=%s")
  (defengine wiki-en
    "https://en.wikipedia.org/wiki/%s")
  (defengine wiki-pt
    "https://pt.wikipedia.org/wiki/%s")
  (defengine plato
    "https://plato.stanford.edu/search/searcher.py?query=%s")
  (defengine translate
    "https://translate.google.com/?source=osdd#view=home&op=translate&sl=auto&tl=pt&text=%s")

  (defengine urban-dictionary
    "https://www.urbandictionary.com/define.php?term=%s")

  (defun my/engine-urban-dict ()
    (interactive)
    (engine/search-urban-dictionary (current-word)))

  (defengine the-free-dictionary
    "https://www.thefreedictionary.com/%s")

  (defengine MDN
    "https://developer.mozilla.org/en-US/search?q=%s")
  (engine-mode t))
#+END_SRC
****** Google Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :defer t
  :config
  (setq google-translate-pop-up-buffer-set-focus 't
        google-translate-default-source-language "en"
        google-translate-default-target-language "pt"))
#+END_SRC
***** Hydra
****** hydra main
#+BEGIN_SRC emacs-lisp
(use-package hydra
:ensure t
:config

(general-define-key
:keymaps 'override
"M-;" 'hydra-yasnippet/body
"<f1>" 'hydra-help/body)

(general-unbind 'hydra-base-map
"0" "1" "2" "3" "4" "5" "6" "7" "8" "9")
(setq hydra-amaranth-warn-message " *amaranth hydra*"))
#+END_SRC
****** hydras
******* Programming
******** python
#+BEGIN_SRC emacs-lisp
(defhydra hydra-python-mode (:color blue :hint nil :foreign-keys run)
  "
    ^
    ^Python^
    ^^^^^-----------------------------------------
    _r_: run term    _c_: copy eror  _B_: pdb
    _s_: quickshell  _d_: goto def   _a_: scratch
    _P_: prev error  _b_: go back    _o_: doc
    _n_: next error  _D_: docs       _l_: lorem

"

  ("<escape>" nil)
  ("q" nil)

  ("r" my/run-on-terminal)
  ("s" quickrun-shell)
  ("P" flymake-goto-prev-error)
  ("n" flymake-goto-next-error)

  ("c" flycheck-copy-errors-as-kill)

  ;; ("d" my/dumb-jump-go)
  ;; ("RET" my/dumb-jump-go)
  ;; ("b" dumb-jump-back)
  ;; ("<C-return>" dumb-jump-back)

  ("d" elpy-goto-definition)
  ("RET" elpy-goto-definition)
  ("b" pop-tag-mark)
  ("<C-return>" dumb-jump-back)


  ("g" engine/search-python-3)
  ("D" engine/search-python-3-docs)
  ("B" my/pdb)
  ("a" my/goto-python-scratch)
  ("o" elpy-doc)
  ("l" lorem-ipsum-insert-sentences))
#+END_SRC

******** racket
#+BEGIN_SRC emacs-lisp
(defhydra hydra-racket-mode (:color blue :hint nil :foreign-keys run)
  "
    ^
    ^Racket^
    ^^^--------------------------
    _d_...doc       _g_..goto def
    _e_...describe  _m_..goto module
    _s_...send sexp _b_..go back
    _RET_.eval sexp

"
  ("<escape>" nil)

  ("q" nil)
  ("d" racket-doc)
  ("e" racket-describe)
  ("RET" racket-eval-last-sexp)
  ("v" racket-eval-last-sexp)
  ("s" racket-send-last-sexp)
  ("g" racket-visit-definition)
  ("m" racket-visit-module)
  ("b" racket-unvisit))
#+END_SRC

******** prog
#+BEGIN_SRC emacs-lisp
(defhydra hydra-prog-mode (:color blue :hint nil :foreign-keys run)
  "
^
^Flycheck^        ^Others^
^^^---------------------------------
_f_: first error  _m_: flycheck mode
_p_: prev  error  _k_: flymake prev
_n_: next  error  _j_: flymake next
_c_: copy  error  _q_: quickrun

"
  ("<escape>" nil)
  ("RET" nil)

  ("f" flycheck-first-error)
  ("j" flymake-goto-prev-error)
  ("k" flymake-goto-next-error)

  ("n" flycheck-next-error)
  ("p" flycheck-previous-error)
  ("c" flycheck-copy-errors-as-kill)
  ("m" flycheck-mode)
  ("q" quickrun))
#+END_SRC
******** flycheck
#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck-mode (:color blue :hint nil :foreign-keys run)
"
^
^Flycheck^
---------------------------------------------------
_a_: check buffer          _e_: display error at point
_b_: go to first error     _f_: explain error at point
_c_: go to previous error  _g_: clear errors
_d_: go to next error      _h_: flycheck mode

"
("q" nil)
("<escape>" nil)
("RET" hydra-flycheck-list-mode/body)

("a" flycheck-buffer)
("b" flycheck-first-error)
("c" flycheck-previous-error)
("d" flycheck-next-error)
("e" flycheck-display-error-at-point)
("f" flycheck-explain-error-at-point)
("g" flycheck-clear)
("h" flycheck-mode))
#+END_SRC
******** prog modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-prog-modes (:color blue :hint nil :foreign-keys run)
  "
^
    ^Prog Modes^
    -----------
    _h_: guides
    _c_: company
    _s_: smparens
    _t_: tab jump
    _e_: operator
    _r_: rainbow
    _E_: my prog on
    _d_: my prog off
"
  ("<escape>" nil)
  ("<C-return>" nil)
  ("RET" nil)

  ("m" flycheck-mode)
  ("c" company-mode)
  ("s" smartparens-mode)
  ("t" tab-jump-out-mode)
  ("h" highlight-indent-guides-mode)
  ("e" electric-operator-mode)
  ("r" rainbow-delimiters-mode)
  ("E" my/prog-mode-on)
  ("d" my/prog-mode-off))
#+END_SRC
******** yasnippet
#+BEGIN_SRC emacs-lisp
(defhydra hydra-yasnippet (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
^YASnippet^
^^^^^^^^-----------------------------------------
_;_: load  _r_: reload all  _q_: quit  _d_: docs
_n_: new   _v_: visit       _k_: kill

"

  (";" my/yas-load-other-window)
  ("M-;" my/yas-load-other-window)

  ("v" yas-visit-snippet-file)
  ("M-v" yas-visit-snippet-file)

  ("n" yas-new-snippet)
  ("M-n" yas-new-snippet)

  ("r" yas-reload-all)
  ("M-r" yas-reload-all)

  ("q" quit-window)
  ("M-q" quit-window)

  ("k" kill-buffer-and-window)
  ("M-k" kill-buffer-and-window)

  ("d" my/open-yasnippets-docs)
  ("M-d" my/open-yasnippets-docs))
#+END_SRC

******** shell
#+BEGIN_SRC emacs-lisp
(defhydra hydra-shell (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
^Shells^
----------------------------
_s_: small     _p_: python shell
_j_: bellow    _a_: python async
_h_: far left
_l_: far right
_k_: far top
"

("<escape>" nil)
(";" kill-buffer-and-window)
("s" my/shell-botright)
("j" my/shell-bellow)
("h" my/shell-far-left)
("l" my/shell-far-right)
("k" my/shell-very-top)
("p" my/python-botright)
("a" my/execute-python-program-shell))
#+END_SRC
******** projectile
#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile-mode (:color blue :hint nil :foreign-keys run)
  "

  Projectile
  ^^^^^----------------------------------------------------
  _a_: ag             _f_: file dwin    _k_: kill buffers
  _g_: ag at point    _i_: file         _p_: switch project
  _c_: counsel proj.  _d_: file in dir  _b_: switch buffer

"
  ("q" nil)
  ("<escape>" nil)

  ("a" counsel-projectile-ag)
  ("g" counsel-ag-thing-at-point)
  ("c" counsel-projectile)

  ("f" counsel-projectile-find-file-dwim)
  ("i" counsel-projectile-find-file)
  ("d" projectile-find-file-in-directory)

  ("k" projectile-kill-buffers)
  ("p" counsel-projectile-switch-project)
  ("b" counsel-projectile-switch-to-buffer)
  ("." counsel-org-capture))
#+END_SRC

******* tangle
#+BEGIN_SRC emacs-lisp
(defhydra hydra-tangle (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^Tangle^
    --------------------------
    _l_: tangle only
    _d_: tangle and debug
    _o_: tangle and load
    _s_: tangle, load and show
    _f_: tangle default
    _r_: tangle and restart

"

  ("l" my/tangle-py-init.org-only)
  ("d" my/tangle-py-init.org-and-debug)
  ("o" my/tangle-py-init.org-and-load)
  ("s" my/tangle-py-init.org-load-and-show)
  ("f" org-babel-tangle)
  ("r" my/tangle-restart-emacs))
#+END_SRC
******* Spelling
#+BEGIN_SRC emacs-lisp
(defhydra hydra-spell (:color blue :hint nil)
  "
^
  _e_: prose en   _W_: wordnut search    _i_: dic. informal
  _b_: prose br   _w_: wordnut at point  _u_: urban dic. at point
  _n_: ispell en  _g_: google translate  _f_: free. dic.
  _r_: ispell br  _G_: google reverse    _l_: google
  _o_: flyspell   _m_: michaelis         _c_: insert char

^^
"
  ("<escape>" nil)

  ("e" my/prose-english)
  ("b" my/prose-brasileiro)
  ("n" my/ispell-english)
  ("r" my/ispell-brasileiro)
  ("o" flyspell-mode)

  ("W" wordnut-search)
  ("w" wordnut-lookup-current-word)

  ("g" google-translate-at-point)
  ("G" google-translate-at-point-reverse)

  ("m" my/engine-search-michaealis)
  ("M" engine/search-michaelis)

  ("i" my/engine-search-dic-informal)
  ("I" engine/search-dic-informal)

  ("u" my/engine-urban-dict)
  ("U" engine/search-urban-dictionary)

  ("f" engine/search-the-free-dictionary)
  ("l" engine/search-google)
  ("c" insert-char))
#+END_SRC

******* Evil Swap
#+BEGIN_SRC emacs-lisp
(defhydra hydra-evil-swap (:color blue :hint nil)
  "
^
   _m_: swap mode           _p_: equal w/ plus
   _d_: dash w/ emdash      _8_: 8 w/ asterisk
   _e_: emdash w/ dash      _c_: colon w/ semicolon
   _u_: underscore w/ dash  _q_: double quotes w/ single
^^
"
  ("<escape>" nil)
  ("m" evil-swap-keys-mode)
  ("d"  evil-swap-keys-swap-dash-emdash)
  ("e"  evil-swap-keys-swap-emdash-dash)
  ("u"  evil-swap-keys-swap-underscore-dash)

  ("p"  evil-swap-keys-swap-equal-plus)
  ("8"  evil-swap-keys-swap-eight-asterisk)
  ("c"  evil-swap-keys-swap-colon-semicolon)
  ("q"  evil-swap-keys-swap-double-single-quotes))
#+END_SRC

******* Killing
#+BEGIN_SRC emacs-lisp
(defhydra hydra-kill (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Kill^
    ---------------------------------------------------
    _a_: buffer     _d_: +all    _m_: +matching  _s_: server
    _b_: +window    _e_: +others _q_: my/quit
    _c_: +workspace _h_: +help   _g_: w.delete

"

  ("<escape>" nil)

  ("a" my/kill-this-buffer)
  ("b" kill-buffer-and-window)
  ("c" my/kill-buffer-and-workspace)
  ("d" my/kill-all-buffers)
  ("D" my/kill-all-buffers-except-treemacs)
  ("e" my/kill-other-buffers)
  ("h" my/kill-help-buffers)
  ("m" my/kill-matching-buffers)

  ("f" quit-window)
  ("q" my/quit-window)
  ("g" delete-window)
  ("s" save-buffers-kill-emacs))
#+END_SRC

******* Vertigo
#+BEGIN_SRC emacs-lisp
(defhydra hydra-vertigo (:color blue :hint nil)
"
^
^Vertigo^
---------------------
_,_: โ
_._: โ

a s d f g h j k l o
1 2 3 4 5 6 7 8 9 0
"
("<escape>" nil)
("." vertigo-visible-jump-down)
("," vertigo-visible-jump-up))
#+END_SRC
******* Window
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color blue :hint nil :exit nil :foreign-keys nil)
  "

^Resize       ^Split
---------------------------
_H_: width+    _h_: left
_L_: width-    _l_: righ
_K_: height    _k_: up
_J_: height    _j_: down
_b_: balance   _z_: registers
_r_: botright
"
  ("<escape>" nil)
  ("RET" nil)

  ("H" my/evil-inc-width :exit nil)
  ("L" my/evil-dec-width :exit nil)
  ("J" my/evil-dec-height :exit nil)
  ("K" my/evil-inc-height :exit nil)

  ("h" split-window-horizontally)
  ("j" my/split-vertically)
  ("k" split-window-below)
  ("l" my/split-right)

  ("b" balance-windows :exit t)
  ("r" my/evil-botright)

  ("z" hydra-window-registers/body))
#+END_SRC

******* Modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-modes (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Modes^
    ^^^^^^^^-------------------------------------------------------------------
    _c_: company    ^_q_: elec operator   _u_: unkill. scratch  _z_: capitalize
    _o_: \" options  _s_: hl-sentence     _w_: evil swap keys
    _l_: hl-line    ^_v_: visible         _k_: which-key
    _g_: olivetti   ^_h_: hide mode-line  _t_: transparency

"
  ("<escape>" nil)
  ("c" #'company-mode)
  ("o" #'my/company-show-options)
  ("l" #'hl-line-mode)
  ("g" #'olivetti-mode)

  ("q" #'electric-operator-mode)
  ("s" #'hl-sentence-mode)
  ("v" #'visible-mode)
  ("h" #'hide-mode-line-mode)

  ("u" #'unkillable-scratch)
  ("w" #'hydra-evil-swap/body)
  ("k" #'which-key-mode)
  ("t" #'my/toggle-transparency)
  ("z" #'auto-capitalize-mode))
#+END_SRC

******* Eval
#+BEGIN_SRC emacs-lisp
(defhydra hydra-eval (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
^Eval^
------------------------
_a_: block  _n_: next sexp
_b_: region
_c_: buffer
_d_: line
_h_: l.&show
_e_: keys
_i_: i3
_z_: NEW

"
("<escape>" nil)
("z" my-yank-region)
("a" my/tangle-and-eval-block-timed)
("b" eval-region)
("c" my/eval-buffer)
("d" my/eval-line-function)
("h" my/eval-line-function-and-show)
("e" my/tangle-reload-keys)
("i" i3-reload)
("n" my/eval-next-sexp-macro))
#+END_SRC

******* Packages
#+BEGIN_SRC emacs-lisp
(defhydra hydra-packages (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^
    ^Packages^
    -------------------
    _l_: list
    _r_: refresh
    _d_: delete
    _e_: describe
    _i_: install
    _f_: install file

"
  ("<escape>" nil)

  ("l" package-list-packages)
  ("r" package-refresh-contents)
  ("d" package-delete)
  ("i" package-install)
  ("f" package-install-file)
  ("e" describe-package))
#+END_SRC

******* Commands
DEADLINE: <2019-12-08 Sun>
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Main Commands^
    ^^^^^^^^^-----------------------------------------------------------------------------------
    _g_: copy dir         _i_: i3 reload     _a_: global abbrev  _c_: clone buffer  _d_: desktop
    _f_: copy filepath    _3_: i3 restart    _m_: mode abbrev    _W_: write file
    _n_: copy filename    _p_: packages      _t_: edit abbrevs   _r_: rename both
    _e_: lines by length  _w_: count words   _s_: check parens   _l_: load theme


"
  ("<escape>" nil)

  ("g" my/copy-dir)
  ("f" prelude-copy-file-name-to-clipboard)
  ("n" my/copy-file-only-name-to-clipboard)
  ("e" my/sort-lines-by-length)

  ("i" my/i3-reload)
  ("3" my/i3-restart)
  ("p" hydra-packages/body)
  ("w" my/wc-count)

  ("a" define-global-abbrev)
  ("m" define-mode-abbrev)
  ("t" edit-abbrevs)
  ("r" rename-file-and-buffer)
  ("s" check-parens)
  ("c" clone-indirect-buffer-other-window)
  ("W" write-file)
  ("d" hydra-desktop/body)
  ("l" load-theme)
  ("L" disable-theme))
#+END_SRC

******** desktop
#+BEGIN_SRC emacs-lisp
(defhydra hydra-desktop (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
  ^Desktop^
  ^^^^------------------------------
  _r_: read   _v_: revert  _m_: mode
  _s_: save   _e_: remove
  _c_: clear  _h_: chdir

"

  ("<escape>" nil)

  ("r" desktop-read)
  ("s" desktop-save-in-desktop-dir)
  ("c" desktop-clear)
  ("v" desktop-revert)
  ("e" desktop-remove)
  ("h" desktop-change-dir)
  ("m" desktop-save-mode))
#+END_SRC
******** Text Hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-main (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
  _e_: clean spaces  _l_: lorem par
  _i_: dup. par      _s_: lorem sen
  _t_: truncate      _Y_: copy line
  _d_: com & dup     _y_: move line
"

  ("<escape>" nil)

  ("e" xah-clean-whitespace)
  ("SPC" hydra-text-commands/body)
  ("i" duplicate-inner-paragraph)

  ("t" toggle-truncate-lines)

  ("l" lorem-ipsum-insert-paragraphs)
  ("s" lorem-ipsum-insert-sentences)
  ("y" avy-move-line)
  ("Y" avy-copy-line)
  ("d" my/comm-dup-line))
#+END_SRC

******** motions
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-motions (:color amaranth :hint nil :foreign-keys nil)
  "
   ^
   ^Motions^
   -------------------------
   _l_: line โ      _w_: word โ
   _L_: line โ      _W_: word โ
   _p_: par  โ      _c_: char โ
   _P_: par  โ      _C_: char โ
   _s_: sentence โ  _x_: sexp โ
   _S_: sentence โ  _X_: sexp โ

"

  ("<escape>" nil)
  ("m" nil)
  ("u" undo-tree-undo :exit t)

  ("l" cool-moves/line-forward)
  ("L" cool-moves/line-backward)

  ("p" cool-moves/paragraph-forward)
  ("P" cool-moves/paragraph-backward)

  ("w" cool-moves/word-forward)
  ("W" cool-moves/word-backwards)

  ("c" cool-moves/character-forward)
  ("C" cool-moves/character-backward)

  ("s" cool-moves/sentence-forward)
  ("S" cool-moves/sentence-backward)

  ("x" cool-moves/sexp-forward)
  ("X" cool-moves/sexp-backward))
#+END_SRC
******** more text hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-commands (:color blue :hint nil)
  "
^
    ^More Text^
    ---------------------------------------------
    _s_: setq         _m_: move line      _g_: agg fill
    _f_: hydra key    _l_: copy line      _i_: auto fill
    _a_: text adju    _z_: show fill      _p_: insert par
    _v_: visible mode _e_: enable fills
    _c_: to chrome    _d_: disable fills

^^
"
  ("<escape>" nil)
  ("C-;" nil)
  ("SPC" nil)
  (";" nil)
  ("<menu>" nil)

  ("s" create-setq)
  ("f" format-hydra-binding)
  ("p" Lorem-ipsum-insert-paragraphs)
  ("m" avy-move-line)
  ("l" avy-copy-line)
  ("v" visible-mode)
  ("a" text-scale-adjust)
  ("w" copy-to-messenger)
  ("c" copy-to-chrome)
  ("g" aggressive-fill-paragraph-mode)
  ("i" auto-fill-mode)
  ("z" show-fill-column)
  ("e" my/enable-auto-agg-fill)
  ("d" my/disable-auto-agg-fill))
#+END_SRC

******* Searching
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-search (:hint nil :color blue :exit nil :foreign-keys nil)
  "
  _s_: evil search      _r_: counsel processes
  _w_: grep or swiper   _u_: substitute
  _r_: counsel grep     _g_: google
  _o_: counsel outline  _e_: en-wikipedia
"

  ("<escape>" nil nil)

  ("C-s" evil-search-forward)
  ("s" evil-search-forward)
  ("w" counsel-grep-or-swiper)
  ("r" counsel-grep)
  ("o" counsel-outline)

  ("r" counsel-list-processes)
  ("u" my/evil-substitute)
  ("g" engine/search-google)
  ("e" engine/search-wiki-en))
#+END_SRC

******* Org Hydra
******** Org Main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-mode (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    _a_: archive     _d_: deadline  _g_: tag     _t_: todos     _x_: export       _h_: hooks
    _p_: goto last   _s_: schedule  _r_: rifle   _c_: toc mode  _z_: timestamp    _t_: cycle list
    _l_: store link  _u_: ins link  _i_: indent  _e_: refile    _b_: bulles mode

"

  ("<escape>" nil)

  ("a" org-archive-subtree-default)
  ("b" org-bullets-mode)
  ("p" org-capture-goto-last-stored)

  ("d" org-deadline)
  ("s" org-schedule)
  ("l" org-store-link)

  ("g" counsel-org-tag)
  ("r" helm-org-rifle)
  ("u" org-web-tools-insert-link-for-url)

  ("t" org-todo)

  ("c" toc-org-mode)
  ("i" org-indent-mode)
  ("e" org-refile)
  ("x" org-export-dispatch)
  ("z" org-time-stamp)
  ("h" my/org-hooks)
  ("t" org-cycle-list-bullet))
#+END_SRC

******** Org Clock
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-clock (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    _i_: in    _m_: recent   _e_: set effort
    _o_: out   _c_: cancel   _a_: change \"
    _l_: last  _s_: started  _d_: done
    _y_: show  _t_: todo     _g_: goto
"


  ("q" nil)
  ("<escape>" nil)

  ("i" org-clock-in)
  ("o" org-clock-out)
  ("l" org-clock-in-last)
  ("c" org-clock-cancel)
  ("y" org-clock-display)
  ("m" org-mru-clock-in)
  ("e" org-set-effort)
  ("a" org-clock-modify-effort-estimate)
  ("s" my/org-started-with-clock)
  ("S" my/org-started-no-clock)
  ("d" my/org-todo-done)
  ("t" my/org-todo)
  ("g" org-clock-goto))
#+END_SRC

******** Org Agenda
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-agenda (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^Org Agenda^
    ^^---------------------------
    _a_: agenda      _l_: lock
    _1_: one day     _u_: unlock
    _2_: two days    _d_: add
    _3_: three days  _r_: remove
    _7_: seven days  _p_: update "

  ("q" nil)
  ("<escape>" nil)

  ("a" my/org-agenda)

  ("1" org-1-day-agenda)
  ("2" org-2-days-agenda)
  ("3" org-3-days-agenda)
  ("7" org-7-days-agenda)
  ("l" org-agenda-set-restriction-lock)
  ("u" org-agenda-remove-restriction-lock)
  ("r" org-remove-file)
  ("d" org-agenda-file-to-front)
  ("p" my/update-agenda-files))
#+END_SRC
******** Org Timer
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-timer (:color blue :hint nil :exit nil :foreign-keys nil)
"
    ^Org Timer^
    ------------------
    _e_: set timer
    _s_: start
    _t_: stop
    _p_: play/pause
    _r_: remaining
    _c_: change
    _i_: insert
    _d_: insert desc.
"

("q" nil)
("<escape>" nil)

("e" org-timer-set-timer)
("s" org-timer-start)
("t" org-timer-stop)
("p" org-timer-pause-or-continue)
("r" org-timer-show-remaining-time)
("c" org-timer-change-times-in-region)

;; insert
("i" org-timer)
("d" org-timer-item))
#+END_SRC

******** Org Todos
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-todo-ballantines (:color blue :hint nil :exit nil :foreign-keys nil)
"

    _t_: todo    _n_: next                         ^^^^|  _d_: done    _e_: remove
    _r_: repeat  _w_: wait                         ^^^^|  _p_: paused  _c_: cancelled
    _i_: idea    _m_: maybe _k_: working  _s_: staged  |  _u_: used
"

("q" nil)
("<escape>" nil)

("t" my/org-todo)
("i" my/org-todo-idea)
("n" my/org-todo-next)
("d" my/org-todo-done)

("r" my/org-todo-repeate)
("w" my/org-todo-wait)
("p" my/org-todo-paused)
("c" my/org-todo-cancelled)

("m" my/org-todo-maybe)
("s" my/org-todo-staged)
("k" my/org-todo-working)
("u" my/org-todo-used)
("e" my/org-remove-todo))
#+END_SRC
******* Info Mode
******** main
#+BEGIN_SRC emacs-lisp

(defhydra hydra-info-mode (:color blue :hint nil :foreign-keys nil)
"
^
    _p_: node โ  _k_: ref โ  _u_: info โ _s_: search _t_: toc
    _n_: node โ  _j_: ref โ  _m_: menu   _g_: goto   _i_: index "

("<escape>" nil)
("q" nil)

("u" Info-up)
("p" Info-backward-node)
("n" Info-forward-node)
("t" Info-toc)
("i" Info-inde )
("g" Info-goto-node)
("s" Info-search)
("m" Info-menu)
("j" Info-next-reference)
("k" Info-prev-reference))
#+END_SRC
******* Help
#+BEGIN_SRC emacs-lisp
(defhydra hydra-help (:color blue :hint nil :exit t :foreign-keys nil)

  "

    ^^Help
    ----------------------------------------
    _f_: callable  _k_: key       _i_: info
    _v_: variable  _l_: key long
    _e_: package   _w_: where is
    _p_: at point  _a_: apropos
    _m_: major     _d_: docs
    _o_: modes     _c_: command

"

  ("<escape>" nil)
  ("C-h" helpful-variable)
  ("C-f" helpful-callable)

  ("f" helpful-callable)
  ("F" helpful-function)
  ("e" describe-package)
  ("v" helpful-variable)
  ("p" helpful-at-point)
  ("m" show-major-mode)
  ("o" describe-mode)

  ("k" describe-key-briefly)
  ("l" helpful-key)
  ("w" where-is)

  ("a" counsel-apropos)
  ("c" helpful-command)
  ("d" apropos-documentation)
  ("i" info))
#+END_SRC

******* Files
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-find-file (:hint nil :color blue)

  "
    ^File
    ^^^^^--------------------------------------------
    _a_: aliases     _I_: init.el   _s_: *scratch*
    _b_: bashrc      _i_: init.org  _o_: org scratch
    _n_: inputrc     _w_: warnings  _e_: el scratch
    _v_: env. vars   _g_: messages  _m_: md scracth
    _c_: completion  _u_: custom    _p_: py scratch
    _3_: i3 config                ^^_r_: rkt scratch

"
  ("<escape>" nil)

  ("a" my/goto-bash-aliases)
  ("b" my/goto-bashrc)
  ("n" my/goto-inputrc)
  ("v" my/goto-env_variables)
  ("c" my/goto-bash-completion)

  ("I" my/goto-init.el)
  ("i" my/goto-init)
  ("w" my/goto-warnings-buffer)
  ("g" my/goto-messages-buffer)
  ("u" my/goto-custom-file)

  ("3" my/goto-i3-config)
  ("s" my/goto-scratch-buffer)
  ("o" my/goto-scratch-org)
  ("e" my/goto-scratch-elisp)
  ("m" my/goto-scratch-markdown)
  ("p" my/goto-python-scratch)
  ("r" my/goto-racket-scratch))
#+END_SRC
******** scracthes
#+BEGIN_SRC emacs-lisp
;; (defhydra hydra-scratches (:hint nil :color blue)

;;   "
;;     ^Scratches
;;     ^^-----------
;;     _s_: initial
;;     _o_: org
;;     _e_: elisp
;;     _m_: markdown
;;     _p_: python

;; "
;;   ("<escape>" nil)

;;   ("s" my/goto-scratch-buffer)
;;   ("o" my/goto-scratch-org)
;;   ("e" my/goto-scratch-elisp)
;;   ("m" my/goto-scratch-markdown)
;;   ("p" my/goto-python-scratch))
#+END_SRC

******* Web
#+BEGIN_SRC emacs-lisp
(defhydra hydra-web-mode (:exit nil :hint nil :foreign-keys run)
  "

    Web Mode
    ^^^^--------------------------------------
    _b_: beautify html  _d_: dumb jump
    _c_: beautify css   _C_: search css
    _w_: colors web     _f_: search flexbox
    _e_: colors emacs
    _r_: rename
"

  ("q" nil)
  ("<escape>" nil)
  ("<return>" nil)

  ("b" my/web-beautify-html :exit t)
  ("c" web-beautify-css :exit t)

  ("w" counsel-colors-web :exit t)
  ("e" counsel-colors-emacs :exit t)

  ("f" engine/search-google-flexbox :exit t)
  ("C" engine/search-google-css :exit t)


  ("r" web-mode-element-rename :exit t)
  ("d" dumb-jump-go-prefer-external :exit t)

  ("f" flycheck-first-error)

  ("<return>" counsel-css :exit t))
#+END_SRC
******* CSS
#+BEGIN_SRC emacs-lisp
(defhydra hydra-css-mode (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^
    ^CSS^
    ^^^----------------------------
    _m_: MDN      _w_: web colors
    _g_: Grid     _o_: emacs colors
    _c_: CSS
    _i_: indent
    _b_: beautify "


  ("<escape>" nil)
  ("q" nil)

  ("m" engine/search-mdn)
  ("<return>" engine/search-mdn)
  ("g" engine/search-google-css-grid)
  ("c" engine/search-google-css)

  ("b" web-beautify-css)
  ("i" indent-buffer)

  ("w" counsel-colors-web)
  ("o" counsel-colors-emacs)
  )
#+END_SRC
******* Version Control
******** git-timemachine
#+BEGIN_SRC emacs-lisp
(defhydra hydra-git-timemachine (:color amaranth :hint nil :foreign-keys run)
  "
    _C-p_: prev rev  _C-r_: current rev
    _C-n_: next rev  _C-l_: latest rev "

  ("C-q" git-timemachine-quit :exit t)
  ("<escape>" git-timemachine-quit :exit t)
  ("q" git-timemachine-quit :exit t)

  ("C-p" git-timemachine-show-previous-revision)
  ("C-n" git-timemachine-show-next-revision)

  ("C-r" git-timemachine-show-current-revision)
  ("C-l" git-timemachine-show-latest-revision-in-branch)

  ("C-o" olivetti-mode))
#+END_SRC

******** vc-mode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-vc-mode (:color blue :hint nil :foreign-keys run)
"
^
    ^VC Mode^
    ---------------------------------------------
    _v_: next      _p_: push      _d_: diff    _t_: time
    _r_: revert    _u_: pull      _m_: merge
    _g_: register  _a_: annotate  _e_: resolve
"

("<escape>" nil)

("v" vc-next-action)
("r" vc-revert-buffer)
("g" vc-register)

("p" my/vc-push)
("u" vc-pull)
("a" vc-annotate)

("d" vc-diff)
("m" vc-merge)
("e" vc-resolve-conflicts)
("t" hydra-git-timemachine/body))
#+END_SRC
******** magit
********* magit-main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-main (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    ^Magit^
    --------------------------------------------------------------------------
    _s_: stage modified    _d_: dispatch       _M_: commit dispatch  _t_: status
    _รง_: stage and commit  _f_: file dispatch  _p_: push to remote   _i_: time machine
    _c_: stage at point    _m_: create commit  _P_: push dispatch    _a_: add

"
  ("<escape>" nil)
  ("q" nil)

  ("s" magit-stage-modified)
  ("รง" my/magit-stage-modified-and-commit)
  ("c" magit-stage)

  ("d" magit-dispatch)
  ("f" magit-file-dispatch)
  ("m" magit-commit-create)

  ("M" hydra-magit-commit/body)
  ("p" magit-push-current-to-pushremote)
  ("P" magit-push)

  ("t" magit-status)
  ("i" git-timemachine)
  ("a" my/magit-stage-untracked))
#+END_SRC

********* magit commit
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-commit (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
    ^Magit Commit^
    -------------------------------------------------------------
    _A_: augment _F_: instant fixup   _c_: commit    _x_: absorb changes
    _a_: amend   _s_: squash          _e_: extend
    _f_: fixup   _S_: instant squash  _n_: reshelve

"
("<escape>" nil)
("q" nil)

("A" magit-commit-augment)
("a" magit-commit-amend)
("f" magit-commit-fixup)
("F" magit-commit-instant-fixup)
("s" magit-commit-squash)
("S" magit-commit-instant-squash)
("c" magit-commit-create)
("e" magit-commit-extend)
("n" magit-commit-reshelve)
("w" magit-commit-reword)
("x" magit-commit-absorb))
#+END_SRC
********* magit transient
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-transient (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
    ^Transient and dwim commands^
    --------------------------------------------------------------------------------
    _b_: branch  _e_: ediff  _m_: merge      _r_: rebase         _y_: show refs  _%_: worktree
    _c_: commit  _f_: fetch  _o_: submodule  _t_: tag            _z_: stash
    _d_: diff    _l_: log    _p_: push       _w_: apply patches  _!_: run
"

("<escape>" nil)
("q" nil)

("b"  magit-branch)
("c"  magit-commit)
("d"  magit-diff)
("e"  magit-ediff-dwim)

("f"  magit-fetch)
("l"  magit-log)
("m"  magit-merge)
("o"  magit-submodule)

("p"  magit-push)
("r"  magit-rebase)
("t"  magit-tag)
("w"  magit-am)

("y"  magit-show-refs)
("z"  magit-stash)
("!"  magit-run)
("%"  magit-worktree))
#+END_SRC

******* cool moves
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-motions (:color amaranth :hint nil :foreign-keys nil)
  "
    ^
        ^Motions^
        -------------------------
        _l_: line โ      _w_: word โ
        _L_: line โ      _W_: word โ
        _p_: par  โ      _c_: char โ
        _P_: par  โ      _C_: char โ
        _s_: sentence โ  _x_: sexp โ
        _S_: sentence โ  _X_: sexp โ

    "

  ("<escape>" nil)
  ("u" nil)

  ("l" cool-moves/line-forward)
  ("L" cool-moves/line-backward)

  ("p" cool-moves/paragraph-forward)
  ("P" cool-moves/paragraph-backward)

  ("w" cool-moves/word-forward)
  ("W" cool-moves/word-backwards)

  ("c" cool-moves/character-forward)
  ("C" cool-moves/character-backward)

  ("s" cool-moves/sentence-forward)
  ("S" cool-moves/sentence-backward)

  ("x" cool-moves/sexp-forward)
  ("X" cool-moves/sexp-backward))
#+END_SRC
***** Movement
****** buffer move
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
:defer nil
:ensure t)
#+END_SRC
****** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :defer nil
  :ensure t
  :config
  (setq avy-case-fold-search 't
        avy-style 'at-full
        avy-timeout-seconds 0.5
        avy-highlight-first t
        avy-single-candidate-jump t
        avy-background t
        avy-styles-alist '((avy-goto-line . at))
        avy-keys (nconc (number-sequence ?a ?z)
                        (number-sequence ?0 ?9)))

  (setq avy-all-windows nil)

  (custom-set-faces
   '(avy-background-face ((t (:foreground "SkyBlue"))))))
#+END_SRC
****** evil-easymotion
#+BEGIN_SRC emacs-lisp
(use-package evil-easymotion
:after avy
:ensure t)
#+END_SRC
****** windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
:config
(setq windmove-wrap-around t)
(general-nvmap
:keymaps 'override
"M-h" 'windmove-left
"M-l" 'windmove-right
"M-j" 'windmove-down
"M-k" 'windmove-up)

(general-define-key
:keymaps 'override
"M-h" 'windmove-left
"M-l" 'windmove-right
"M-j" 'windmove-down
"M-k" 'windmove-up)

(general-define-key
:keymaps 'override
"<M-up>" 'windmove-up
"<M-left>" 'windmove-left
"<M-down>" 'windmove-down
"<M-right>" 'windmove-right))
#+END_SRC
****** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  ;; :init
  ;; (remove-hook 'eyebrowse-pre-window-switch-hook 'save-buffer)
  :config

  (setq eyebrowse-wrap-around t)
  (setq eyebrowse-new-workspace t)
  (setq eyebrowse-mode-line-style 'smart)
  (setq eyebrowse-switch-back-and-forth t)
  (setq eyebrowse-mode-line-left-delimiter " [ ")
  (setq eyebrowse-mode-line-right-delimiter " ]  ")
  (setq eyebrowse-mode-line-separator " | ")

  (general-nvmap
    :prefix "SPC"
    :keymaps 'eyebrowse-mode-map
    "1" 'eyebrowse-switch-to-window-config-1
    "2" 'eyebrowse-switch-to-window-config-2
    "3" 'eyebrowse-switch-to-window-config-3
    "4" 'eyebrowse-switch-to-window-config-4
    "5" 'eyebrowse-switch-to-window-config-5
    "6" 'eyebrowse-switch-to-window-config-6
    "7" 'eyebrowse-switch-to-window-config-7
    "8" 'eyebrowse-switch-to-window-config-8
    "9" 'eyebrowse-switch-to-window-config-9
    "V" 'eyebrowse-create-window-config
    "x" 'eyebrowse-close-window-config)

  (general-define-key
   :keymaps 'eyebrowse-mode-map
   "M-1" 'eyebrowse-switch-to-window-config-1
   "M-2" 'eyebrowse-switch-to-window-config-2
   "M-3" 'eyebrowse-switch-to-window-config-3
   "M-4" 'eyebrowse-switch-to-window-config-4
   "M-5" 'eyebrowse-switch-to-window-config-5
   "M-q" 'eyebrowse-prev-window-config
   "M-w" 'eyebrowse-next-window-config)

  (general-unbind 'eyebrowse-mode-map
    "C-c C-w")

  (defun my/setup-eyebrowse-web ()
    (interactive)
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 2 "2. HTML")
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 3 "3. Tasks")
    (find-file "~/Studying/Prog/WebDev/webdev.org")
    (eyebrowse-switch-to-window-config-1)
    (eyebrowse-rename-window-config 1 "1. CSS")
    (eyebrowse-switch-to-window-config-3)
    (org-next-visible-heading 1))

  (defun my/setup-eyebrowse-html ()
    (interactive)
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 2 "2. Tasks")
    (find-file "~/Studying/Prog/WebDev/webdev.org")
    (eyebrowse-switch-to-window-config-1)
    (eyebrowse-rename-window-config 1 "1. HTML"))

  (defun eyebrowse--fixup-window-config (window-config)
    "Walk through WINDOW-CONFIG and fix it up destructively.
If a no longer existent buffer is encountered, it is replaced
with the scratch buffer."
    (shut-up
      (eyebrowse--walk-window-config
       window-config
       (lambda (item)
         (when (eq (car item) 'buffer)
           (let* ((buffer-name (cadr item))
                  (buffer (get-buffer buffer-name)))
             (when (not buffer)
               (message "Replaced deleted %s buffer with *scratch*" buffer-name)
               (setf (cadr item) "*scratch*"))))))))

  (eyebrowse-mode t))
#+END_SRC

****** Winner Mode
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer nil
  :ensure nil
  :config

  (general-define-key
   :states '(visual normal insert)
   "M--" 'winner-undo
   "M-=" 'winner-redo
)

  (winner-mode 1))
#+END_SRC

****** ivy hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
:after hydra
:ensure t)
#+END_SRC
****** targets
#+BEGIN_SRC emacs-lisp
(use-package targets
  :load-path "~/.emacs.d/etc/custom_lisp"
  :config
  (targets-setup t))
#+END_SRC
****** i3wm Config Mode
#+BEGIN_SRC emacs-lisp
(use-package i3wm-config-mode
  :load-path "~/.emacs.d/etc/custom_lisp"
  :init
  (add-hook 'i3wm-config-mode-hook 'my/prog-mode-hooks)
  :config
  (general-nvmap
    :keymaps 'i3wm-config-mode-map
    "<backspace>" 'org-edit-src-exit))
#+END_SRC
****** cool-moves
#+BEGIN_SRC emacs-lisp
(use-package cool-moves
  :load-path "~/.emacs.d/etc/custom_lisp/cool-moves"
  :config
  (general-define-key
   :keymaps 'override
   "<C-down>" 'cool-moves/paragraph-forward
   "<C-up>" 'cool-moves/paragraph-backward
   "C-S-j" 'cool-moves/line-forward
   "C-S-k" 'cool-moves/line-backward))
#+END_SRC
****** bookmark+
#+BEGIN_SRC emacs-lisp
;; (use-package bookmark+
;;   :defer t
;;   :load-path "~/.emacs.d/etc/custom_lisp/bookmark-plus"
;;   :init
;;   (setq bmkp-bookmark-map-prefix-keys '("p")))
#+END_SRC
****** atomic-chrome
#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :defer nil
  :init
  (add-hook 'atomic-chrome-edit-mode-hook 'my/atomic-chrome-hooks)
  (add-hook 'atomic-chrome-edit-done-hook 'my/atomic-chrome-done-hooks)

  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode)
  (setq atomic-chrome-buffer-open-style 'window)


    (general-define-key
     :keymaps 'atomic-chrome-edit-mode-map
     "<escape>" 'ignore)

  (defun my/kill-buffer-and-frame ()
    (interactive)
    (my/kill-this-buffer)
    (delete-frame))

  (general-nvmap
    :keymaps 'atomic-chrome-edit-mode-map
    "q" 'atomic-chrome-close-current-buffer)

  (general-unbind 'atomic-chrome-edit-mode-map
    :with 'atomic-chrome-close-current-buffer
    [remap my/kill-this-buffer])

  (defun my/atomic-chrome-hooks ()
    (interactive)
    ;; (sp " hide i3 title and bar" nil "/home/files/dotfiles/scripts/i3_scripts/hide_border_and_title")
    (olivetti-mode +1)
    ;; (hide-mode-line-mode)
    (evil-insert-state)
    (electric-operator-mode)
    (focus-emacs)
    ;; (set-frame-parameter nil 'undecorated t)
    ;; (set-frame-parameter nil 'alpha '(98 . 98))
    (flyspell-mode +1))

  (defun my/atomic-chrome-done-hooks ()
    (interactive)
    ;; (sp " hide i3 bar" nil "/home/files/dotfiles/scripts/i3_scripts/show_border_and_title")
    (focus-chrome))

  (atomic-chrome-start-server))
#+END_SRC
****** nswbuff
#+BEGIN_SRC emacs-lisp
(use-package nswbuff
  :ensure t
  :config

  (setq nswbuff-left "  "
        nswbuff-clear-delay 2
        nswbuff-delay-switch nil
        nswbuff-this-frame-only 't
        nswbuff-recent-buffers-first t
        nswbuff-start-with-current-centered t
        nswbuff-display-intermediate-buffers t
        nswbuff-buffer-list-function 'nswbuff-projectile-buffer-list)

  (setq nswbuff-exclude-mode-regexp "Buffer-menu-mode\\|Info-mode\\|Man-mode\\|calc-mode\\|calendar-mode\\|compilation-mode\\|completion-list-mode\\|dired-mode\\|fundamental-mode\\|gnus-mode\\|help-mode\\|helpful-mode\\|ibuffer-mode\\|lisp-interaction-mode\\|magit-auto-revert-mode\\|magit-blame-mode\\|magit-blame-read-only-mode\\|magit-blob-mode\\|magit-cherry-mode\\|magit-diff-mode\\|magit-diff-mode\\|magit-file-mode\\|magit-log-mode\\|magit-log-select-mode\\|magit-merge-preview-mode\\|magit-mode\\|magit-process-mode\\|magit-reflog-mode\\|magit-refs-mode\\|magit-repolist-mode\\|magit-revision-mode\\|magit-stash-mode\\|magit-stashes-mode\\|magit-status-mode\\|magit-submodule-list-mode\\|magit-wip-after-apply-mode\\|magit-wip-after-save-local-mode\\|magit-wip-after-save-mode\\|magit-wip-before-change-mode\\|magit-wip-initial-backup-mode\\|magit-wip-mode\\|minibuffer-inactive-mode\\|occur-mode\\|org-agenda-mode\\|org-src-mode\\|pdf-view-mode\\|ranger-mode\\|shell-mode\\|special-mode\\|special-mode\\|term-mode\\|treemacs-mode\\|messages-buffer-mode")

  (setq nswbuff-exclude-buffer-regexps '(".*elc"
                                         "^#.*#$"
                                         "^\\*.*\\*"
                                         "archive.org$"
                                         "*slime-repl sbcl"
                                         "org-src-fontification"
                                         "*org-src-fontification:emacs-lisp-mode*"
                                         "*org-src-fontification\\.\\*")))
#+END_SRC
****** centered-cursor
#+BEGIN_SRC emacs-lisp
(use-package centered-cursor-mode
:defer t
:ensure t
:config
(setq ccm-recenter-at-end-of-file t))
#+END_SRC
****** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer t
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches "-lsh")
  (setq dired-hide-details-mode t))

;; (use-package dired+
;;   :quelpa (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
;;   :after dired
;;   :ensure nil
;;   :config
;;   (setq diredp-hide-details-initially-flag t)
;;   (setq diredp-hide-details-propagate-flag t)
;;   (diredp-toggle-find-file-reuse-dir t))
#+END_SRC
****** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :init
    (add-hook 'ranger-mode-hook 'my/ranger-options)
    (add-hook 'ranger-parent-dir-hook 'my/ranger-options-parent)

    (defun my/ranger-deer ()
      (interactive)
      (deer)
      (olivetti-mode +1)
      (shut-up
        (olivetti-set-width 70)))

    :bind (:map ranger-mode-map
                ("i"          . ranger-go)
                (";"          . evil-ex)
                ("tp"         . delete-file)
                ("<escape>"   . ranger-close)
                ("r"          . ranger-close)
                ("gg"         . ranger-goto-top)
                ("C-h"        . hydra-help/body)
                ("C-n"        . ranger-next-file)
                ("C-p"        . ranger-prev-file)
                ("m"          . ranger-find-file)
                ("C-l"        . ranger-find-links-dir)
                ("zi"         . ranger-toggle-details)
                ("zp"         . ranger-preview-toggle)
                ("รงcm"        . dired-create-directory)
                ("<insert>"   . dired-create-empty-file)
                ("D"          . dired-do-flagged-delete)
                ("x"          . diredp-delete-this-file)
                ("d"          . dired-flag-file-deletion)
                ("<C-return>" . dired-do-find-marked-files)
                ("<S-return>" . ranger-find-file-in-workspace))
    :config

    (general-define-key
     :keymaps 'ranger-mode-map
     :prefix "SPC"
     "f" 'hydra-find-file/body'
     "SPC" 'my/ranger-toggle-mark
     "q" 'ranger-close
     "r" 'ranger-close
     ";" 'evil-ex
     "c" 'hydra-commands/body
     "o" 'hydra-org-mode/body
     "i" 'helm-org-in-buffer-headings
     "a" 'counsel-M-x
     "b" 'my/evil-botright)

    (general-create-definer leader
      :prefix "SPC")

    (general-unbind 'ranger-mode-map
      :with 'ranger-prev-file
      [remap ranger-to-dired])

    (general-unbind 'ranger-mode-map
      :with 'ignore
      [remap windmove-left]
      [remap windmove-right])

    (leader
      :states '(normal visual)
      :keymaps 'override
      ;; "SPC" 'ranger-find-links-dir
      "r" 'my/ranger-deer)

    ;;;; SETTINGS ;;;;

    (setq ranger-max-tabs 0
          ranger-minimal nil
          ranger-footer-delay 0
          ranger-parent-depth 1
          ranger-footer-delay nil
          ranger-preview-file nil
          ranger-override-dired t
          ranger-persistent-sort t
          ranger-cleanup-eagerly t
          ranger-dont-show-binary t
          ranger-width-preview 0.65
          ranger-width-parents 0.12
          ranger-max-preview-size 0.5
          ranger-cleanup-on-disable t
          ranger-return-to-ranger nil
          ranger-max-parent-width 0.42
          ranger-deer-show-details nil
          ranger-excluded-extensions '("mkv" "iso" "mp4" "bin" "exe" "msi" "pdf" "doc" "docx"))

    ;;;; FUNCTIONS ;;;;

    (defun ranger-preview-toggle ()
      "Toggle preview of selected file."
      (interactive)
      (if (r--fget ranger-minimal)
          (message "Currently in deer mode. Previews are disabled.")
        (setq ranger-preview-file (not ranger-preview-file))
        (if ranger-preview-file
            (progn
              (ranger-hide-details)
              (ranger-setup-preview))
          (progn
            (when (and ranger-preview-window
                       (eq (selected-frame) (window-frame ranger-preview-window))
                       (window-live-p ranger-preview-window)
                       (window-at-side-p ranger-preview-window 'right))
              (ignore-errors
                (delete-window ranger-preview-window)))
            (ranger-hide-details)))))

    (defun ranger (&optional path)
      (interactive)
      (shut-up
        (let* ((file (or path (buffer-file-name)))
               (dir (if file (file-name-directory file) default-directory)))
          (when dir
            (r--fset ranger-minimal nil)
            (ranger-find-file dir)))))

    (defun my/ranger-go (path)
      (interactive
       (list
        (read-char-choice
         "
    b : bootcamp  h : home    s : scripts   w: web
    d : dotfiles  m : modules t : studying
    e : eclipe    o : org     v: emacs.d
  > "
         '(?a ?b ?c ?d ?e ?f ?g ?h ?i ?j ?l ?m ?n ?o ?p ?q ?r ?s ?t ?v ?z ?w))))
      (message nil)
      (let* ((c (char-to-string path))
             (new-path
              (cl-case (intern c)
                ('b "~/Studying/Prog/WebDev/bootcamp")
                ('d "~/dotfiles")
                ('v "~/.emacs.d")

                ('h "~")
                ('e "~/.eclipse")
                ('o "~/org")

                ('s "~/scripts")
                ('t "~/Studying")
                ('v "~/.emacs.d/modules")

                ('w "~/Studying/Prog/WebDev")
                ('q nil)))
             (alt-option
              (cl-case (intern c)
                ;; Subdir Handlng
                ('j 'ranger-next-subdir)
                ('k 'ranger-prev-subdir)
                ;; Tab Handling
                ('n 'ranger-new-tab)
                ('T 'ranger-prev-tab)
                ('t 'ranger-next-tab)
                ('c 'ranger-close-tab))))
        (when (string-equal c "q")
          (keyboard-quit))
        (when (and new-path (file-directory-p new-path))
          (ranger-find-file new-path))
        (when (eq system-type 'windows-nt)
          (when (string-equal c "D")
            (ranger-show-drives)))
        (when alt-option
          (call-interactively alt-option))))

  (advice-add 'ranger-go :override #'my/ranger-go)

  ;;;; OPTIONS ;;;

    (defun my/ranger-options ()
      (interactive)
      (shut-up
        (line-no-numbers)
        (olivetti-mode +1)
        (dired-hide-details-mode +1)
        (hide-mode-line-mode +1)))

    (defun my/ranger-options-parent ()
      (interactive)
      (shut-up
        (line-no-numbers)
        (dired-hide-details-mode +1)
        (toggle-truncate-lines +1)
        (hide-mode-line-mode +1)))

  ;;;; COMMANDS ;;;;
    (defun my/ranger-toggle-mark ()
      (interactive)
      (ranger-toggle-mark)
      (ranger-next-file 1))

    (defun my/ranger-toggle-mark ()
      (interactive)
      (ranger-toggle-mark)
      (ranger-next-file 1))

  ;;;; FIND ;;;;
    (defun my/ranger-find-bashdot ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/dotfiles/bash")))

    (defun my/ranger-find-texpander ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.texpander")))

    (defun my/ranger-find-nvim-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.config/nvim")))

    (defun my/ranger-find-config ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.config/")))

    (defun my/ranger-find-scripts-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/scripts")))

    (defun ranger-find-emacs-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.emacs.d")))

    (defun my/ranger-find-math-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/Math")))

    (defun ranger-find-file-in-workspace ()
      (interactive)
      (ranger-find-file)
      (duplicate-workspace-buffer))

    (defun my/ranger ()
      (interactive)
      (my/copy-dir)
      (start-process-shell-command "my/show-ranger" nil "~/scripts/emacs_scripts/show-ranger")))
#+END_SRC
****** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer t)
#+END_SRC
***** Super Save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :demand t
  :config
  (setq super-save-exclude '("\\.py" "+new-snippet+"))
  (setq-default super-save-exclude '("\\.py" "+new-snippet+"))

  (setq auto-save-default nil
        super-save-idle-duration 0.5
        super-save-auto-save-when-idle t
        auto-save-file-name-transforms `((".*" "~/.emacs.d/var/temp" t)))

  (setq super-save-hook-triggers '(mouse-leave-buffer-hook focus-out-hook))

  (setq super-save-triggers
        '(
          undo
          quickrun
          last-buffer
          windmove-up
          windmove-down
          windmove-left
          windmove-right
          balance-windows
          switch-to-buffer
          eyebrowse-close-window-config
          eyebrowse-create-window-config
          eyebrowse-next-window-config
          eyebrowse-prev-window-config
          eyebrowse-switch-to-window-config-1
          eyebrowse-switch-to-window-config-2
          eyebrowse-switch-to-window-config-3
          eyebrowse-switch-to-window-config-4
          eyebrowse-switch-to-window-config-5
          eyebrowse-switch-to-window-config-6
          eyebrowse-switch-to-window-config-7
          eyebrowse-switch-to-window-config-8
          eyebrowse-switch-to-window-config-9))

  (auto-save-mode -1)
  (super-save-mode +1))
#+END_SRC
***** Builtins
****** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
****** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
****** Startup
#+BEGIN_SRC emacs-lisp
(setq startup-screen-inhibit-startup-screen t)
#+END_SRC
****** Auto Revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1))
#+END_SRC
****** Files
#+BEGIN_SRC emacs-lisp
(use-package files
  ;; :init
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
  :init
  ;; (add-to-list 'write-file-functions 'redraw-display)
  (setq write-file-functions '(recentf-track-opened-file ))
  :ensure nil
  :config
  ;; (setq write-file-functions '(recentf-track-opened-file undo-tree-save-history-hook))
  (setq save-silently t
        version-control t
        kept-new-versions 5
        kept-old-versions 2
        bookmark-save-flag 1
        delete-old-versions t
        vc-make-backup-files t
        buffer-save-without-query t
        backup-by-copying-when-linked t
        large-file-warning-threshold nil
        backup-directory-alist '(("." . "~/.emacs.d/var/backup"))
        find-file-suppress-same-file-warnings t)
  (setq auto-save-timeout 30)
  (setq auto-save-interval 150)
  ;; (auto-save-mode +1)
  (auto-save-visited-mode -1)
  )
#+END_SRC
****** Prog
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\prog\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config

  (defun my/prog-mode-hooks ()
    (interactive)
    (shut-up
      (company-mode +1)
      (tab-jump-out-mode +1)
      (hl-line-mode +1)
      ;; (my/company-idle-three-prefix-one)
      (comment-auto-fill)
      (show-paren-mode +1)
      (company-mode +1)
      (toggle-truncate-lines +1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      (smartparens-mode +1)
      (evil-smartparens-mode +1)))

  (defun my/prog-save-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (save-buffer))

  (defun my/insert-* ()
    (interactive)
    (evil-insert-state)
    (insert "*"))

  (defun my/insert-*-space ()
    (interactive)
    (evil-insert-state)
    (insert "* "))

  (defun my/insert-plus-space ()
    (interactive)
    (evil-insert-state)
    (insert "+ "))

  (defun my/insert-minus-space ()
    (interactive)
    (evil-insert-state)
    (insert "- "))

  (defun my/insert-0-space ()
    (interactive)
    (evil-insert-state)
    (insert "0 "))

  (defun my/insert-8 ()
    (interactive)
    (evil-insert-state)
    (insert "8"))

  (defun my/insert-1-space ()
    (interactive)
    (evil-insert-state)
    (insert "1 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-3-space ()
    (evil-insert-state)
    (interactive)
    (insert "3 "))

  (defun my/insert-4-space ()
    (evil-insert-state)
    (interactive)
    (insert "4 "))

  (defun my/insert-5-space ()
    (evil-insert-state)
    (interactive)
    (insert "5 "))

  (defun my/insert-6-space ()
    (evil-insert-state)
    (interactive)
    (insert "6 "))

  (defun my/insert-7-space ()
    (evil-insert-state)
    (interactive)
    (insert "7 "))

  (defun my/insert-8-space ()
    (evil-insert-state)
    (interactive)
    (insert "8 "))

  (defun my/insert-9-space ()
    (evil-insert-state)
    (interactive)
    (insert "9 "))

  (general-unbind 'prog-mode-map
    :with 'my/prog-save-buffer
    [remap save-buffer])

  ;; https://www.emacswiki.org/emacs/autofillmode
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'my/only-indent-buffer)

  (general-nmap
    :keymaps 'prog-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)

  (general-define-key
   :keymaps 'prog-mode-map
   ;; "C-c 9" 'my/comment-and-format-code-macro
   "C-c y" 'my/company-show-options
   "<C-return>" nil
   "<M-return>" 'my/only-indent-buffer)

  (general-define-key
   :keymaps 'prog-mode-map
   "<M-return>" 'my/only-indent-buffer))
#+END_SRC
****** Text Builtin
#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (add-hook 'text-mode-hook (lambda () (visual-line-mode +1)))
  :ensure nil
  :config

  (defun my/text-hooks ()
    (interactive)
    (shut-up
      (subword-mode +1)
      (auto-capitalize-mode +1)
      (tab-jump-out-mode +1)
      ;; (evil-better-visual-line-on)
      (wc-mode +1)
      (electric-pair-local-mode +1)
      (show-paren-mode +1)
      (smartparens-mode +1)
      ;; (toggle-truncate-lines -1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      ;; (evil-swap-keys-swap-double-single-quotes)
      ))

  (defun my/paragraph-backwards ()
    (interactive)
    (previous-line)
    (backward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/paragraph-forward ()
    (interactive)
    (forward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/enable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode +1)
    (aggressive-fill-paragraph-mode +1)
    (message " both fills enabled"))

  (defun my/disable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode -1)
    (aggressive-fill-paragraph-mode -1)
    (message " both fills disabled"))

  (defun my/prose-enable ()
    (interactive)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (hl-line-mode -1)
    ;; (hl-sentence-mode +1)
    ;; (typo-mode +1)
    (pabbrev-mode +1))

  (defun my/prose-disable ()
    (interactive)
    (shut-up
      (flyspell-mode -1)
      (auto-capitalize-mode 1)
      (tab-jump-out-mode 1)
      (electric-operator-mode 1)
      (wc-mode 1)
      (hl-line-mode -1)
      ;; (hl-sentence-mode -1)
      (pabbrev-mode -1)
      ;; (typo-mode -1)
      ))

  (defun my/prose-english ()
    (interactive)
    (my/prose-enable)
    (shut-up
      (flyspell-mode +1)
      (ispell-change-dictionary "english")
      (flyspell-buffer))
    (message " prose english"))

  (defun my/prose-brasileiro ()
    (interactive)
    (my/prose-enable)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    ;; (flyspell-buffer)
    (message " prosa brasileira"))

  (defun my/ispell-english ()
    (interactive)
    (ispell-change-dictionary "english")
    (flyspell-mode +1)
    (message " english"))

  (defun my/ispell-brasileiro ()
    (interactive)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    (message " portuguรชs"))

  (defun my/ispell-dict-options ()
    (interactive)
    (counsel-M-x "^my/ispell-ask-dict "))

  (defun my/ispell-ask-dict-br ()
    (interactive)
    (ispell-change-dictionary "brasileiro"))

  (defun my/ispell-ask-dict-en ()
    (interactive)
    (ispell-change-dictionary "american"))

  (general-nvmap
    :keymaps 'text-mode-map
    "RET" 'hydra-spell/body)

  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
****** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :ensure nil
  :config
  (setq eldoc-idle-delay 0.5)
  (global-eldoc-mode -1))
#+END_SRC
****** hs-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :config

  ;; (defun my/my-hs-toogle-hiding ()
  ;;   (interactive)
  ;;   (beginning-of-line)
  ;;   (hs-toggle-hiding))

  (general-nvmap
    :keymaps 'hs-minor-mode-map
    "<tab>" 'hs-toggle-hiding)

  (general-unbind 'hs-minor-mode-map
    :with 'hs-toggle-hiding
    [remap evil-toggle-fold])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-hide-all
    [remap evil-close-folds])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-show-all
    [remap outline-show-all]))
#+END_SRC

****** select
#+BEGIN_SRC emacs-lisp
;; (use-package select
;;   :ensure nil
;;   :config
;;   (setq x-select-enable-primary nil))
#+END_SRC
****** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :init
  (add-hook 'ibuffer-hook 'my/ibuffer-hooks)
  :general
  (general-nvmap
    :keymaps 'ibuffer-mode-map
    "<escape>" 'quit-window
    "C-p" 'ibuffer-backward-line
    "C-n" 'ibuffer-forward-line
    "k" 'ibuffer-backward-line
    "j" 'ibuffer-forward-line
    "C-j" 'my/ibuffer-forward-group
    "C-k" 'my/ibuffer-backward-group)
  :custom
  (ibuffer-expert t)
  (ibuffer-default-shrink-to-minimum-size t)
  (ibuffer-always-show-last-buffer t)
  (ibuffer-saved-filter-groups
   (quote (("default"
            ("org" (mode . org-mode))
            ("elisp" (mode . emacs-lisp-mode))
            ("markdown" (mode . markdown-mode))
            ("emacs" (or
                      (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")
                      (name . "^\\*Warnings\\*$") (name . "^\\*info\\*$")))
            ("help" (or
                     (name . "^\\*Help\\*$")
                     (name . "^\\*helpful.*\\*$")))))))

  (ibuffer-directory-abbrev-alist '(("\\`/home/dotfiles/emacs/em/modules/packages/misc/" . "*misc*/")
                                    ("\\`/home/Documents/Studying/Prog/WebDev/" . "*web*/")
                                    ("\\`/home/Documents/Studying/" . "*study*/")
                                    ("\\`/home/Documents/Org/Agenda/" . "*agenda*/")
                                    ("\\`/home/Documents/Org/" . "*org*/")
                                    ("\\`/home/dotfiles/emacs/em/tmp/scratches/" . "*scratches*/")
                                    ("\\`/home/dotfiles/emacs/em/modules/packages/" . "*packages*/")))

  (ibuffer-formats '((" "
                      (name 18 18 :left :elide) "   "
                      (mode 16 16 :left :elide) "   " filename)
                     (mark " " (name 16 -1) " " filename)))

  :config
  (defun my/ibuffer-forward-group ()
    (interactive)
    (ibuffer-forward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-backward-group ()
    (interactive)
    (ibuffer-backward-filter-group)
    (ibuffer-backward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-hooks ()
    (interactive)
    (hl-line-mode +1)
    (ibuffer-switch-to-saved-filter-groups "default")
    (olivetti-mode +1))

  (general-unbind 'ibuffer-mode-map
    :with 'ignore
    [remap evil-forward-char]
    [remap evil-forward-word-begin]
    [remap evil-backward-char]
    [remap evil-end-of-visual-line]))
#+END_SRC

****** info
#+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :init
  (add-hook 'Info-mode-hook 'my/info-hook-commands)
  :config

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-info-eintr ()
    (interactive)
    (info "eintr"))

  (defun my/eval-next-sexp-function ()
    (interactive)
    (my/eval-next-sexp-macro))

  (defun my/info-hook-commands ()
    (interactive)
    (line-no-numbers)
    (hl-line-mode +1)
    (centered-cursor-mode +1)
    (hl-sentence-mode)
    (message ""))

  (defun my/info-commands ()
    (interactive)
    (counsel-M-x "^Info- "))

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-exit-emacs-state])

  (general-unbind 'Info-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Info-mode-map
    :with 'last-buffer
    [remap Info]
    [remap Info-exit]
    [remap info])

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-normal-state])

  (general-nvmap
    :keymaps 'Info-mode-map
    "C-c C-c" 'eval-last-sexp
    "<C-return>" 'my/eval-next-sexp-function
    "<left>" 'evil-backward-sentence-begin
    "<right>" 'evil-forward-sentence-begin
    "<up>" 'my/paragraph-backwards
    "<down>" 'my/paragraph-forward
    "C-n" 'Info-forward-node
    "C-p" 'Info-backward-node
    "<backspace>" 'link-hint-open-link
    "M-n" 'my/paragraph-forward
    "H" 'Info-history-back
    "L" 'Info-history-forward
    "m" 'Info-menu
    "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "<left>" 'evil-backward-sentence-begin
   "<right>" 'evil-forward-sentence-begin
   "H" 'Info-history-back
   "L" 'Info-history-forward
   "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "m" 'Info-menu
   "C-q" 'my/cheat-sheet))
#+END_SRC

****** bs cycle
#+BEGIN_SRC emacs-lisp
;; (use-package bs
;;   :ensure nil
;;   :init
;;   (setq bs-configurations '(("all" nil nil nil nil nil)

;; 			    ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("files-and-scratch" "^\\*scratch\\*$" "^info_keys.org$" nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last))))
#+END_SRC
****** cc mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :defer t
  ;; :ensure cc-mode
  :init
  (setq-default c-default-style "linux")
  (add-hook 'c-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell foo))

  (defun my/execute-c-program-shell ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (insert "sp")
      (comint-send-input)
      (insert "gcc ")
      (yank)
      (insert " && ./a.out")
      (comint-send-input)
      (sit-for 0.3)
      (comint-clear-buffer)))

  (general-imap
    :keymaps 'c-mode-map
    "<M-return>" 'my/emacs-indent-buffer
    "C-;" 'my/c-semicolon-del-blank-lines)

  (general-nvmap
    :keymaps 'c-mode-map
    "zk" 'flycheck-previous-error
    "zj" 'flycheck-next-error
    "$" 'c-end-of-statement
    "0" 'c-beginning-of-statement
    "M-v" 'c-goto-vars
    "<escape>" 'my/quiet-save-buffer-c
    "<M-return>" 'my/emacs-indent-buffer))
#+END_SRC
****** shell mode
#+BEGIN_SRC emacs-lisp
(use-package shell
  :defer t
  :ensure nil
  :init
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'after-save-hook 'my/after-save-hooks)
  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)
  (add-hook 'shell-mode-hook
            (lambda ()
              (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
  :config

  (defun my/after-save-hooks ()
    (interactive)
    (executable-make-buffer-file-executable-if-script-p)
    ;; (redraw-display)
    )
  ;; (magit-stage-modified)

  (defun my/shell-mode-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1)
    (setq-local company-auto-complete nil)
    ;; (my/company-idle-one-prefix-one-quiet)
    (my/shell-source-bashrc))

  (defun my/shell-go-up ()
    (interactive)
    (insert "cd ..")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-back ()
    (interactive)
    (comint-clear-buffer)
    (insert "cd - && ls")
    (comint-send-input))

  (defun my/shell-fasd-start ()
    (interactive)
    (insert "jj "))

  (defun my/shell-fasd-complete ()
    (interactive)
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-previous ()
    (interactive)
    (comint-clear-buffer)
    (insert "my-shell-go-previous")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))
;;; shell_extras.el ends here

  (general-imap
    :keymaps 'shell-mode-map
    "C-u" 'comint-kill-input
    "C-p" 'comint-previous-input
    "C-n" 'comint-next-input
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "C-/" 'my/shell-clear-and-list
    "M-p" 'my/shell-go-previous
    "C-c j" 'my/evil-shell-bottom)

  (nvmap
    :keymaps 'shell-mode-map
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "M-p" 'my/shell-go-previous
    "C-/" 'my/shell-clear-and-list
    "C-c ;" 'kill-buffer-and-window)

  (general-define-key
   :keymaps 'shell-mode-map
   "C-u" 'comint-kill-input
   "<M-return>" nil
   "C-;" 'kill-buffer-and-window
   "C-t" 'my/shell-go-back
   "C-c 0" 'my/jump-to-register-91
   "M-e" 'counsel-shell-history
   "C-n" 'comint-next-input
   "C-l" 'comint-clear-buffer
   "C-c u" 'universal-argument
   "M-p" 'my/shell-go-previous
   "C-p" 'comint-previous-input
   "C-c j" 'my/evil-shell-bottom)

  (general-unbind 'shell-mode-map
    :with 'quit-window
    [remap my/no-highlight])

  (general-unbind 'shell-mode-map
    :with 'my/shell-go-up
    [remap ivy-yasnippet])

  (general-unbind 'shell-mode-map
    :with nil
    [remap evil-normal-state]
    [remap evil-exit-emacs-state])

  (general-unbind 'shell-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'shell-mode-map
    :with nil
    [remap hydra-text-main/body])

  (general-unbind 'shell-mode-map
    :with 'my/shell-resync
    [remap shell-resync-dirs])

  (defun my/shell-resync ()
    (interactive)
    (comint-kill-whole-line 1)
    (shell-resync-dirs)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-list ()
    (interactive)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-clear-and-list ()
    (interactive)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-source-bashrc ()
    (interactive)
    (insert "source ~/.bashrc")
    (comint-send-input)
    (comint-clear-buffer))

  (general-define-key
   :keymaps 'company-active-map
   "<return>" nil))
#+END_SRC

****** eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :ensure nil
  :init
  (setq eshell-banner-message "")
  (setq comint-terminfo-terminal "ansi"))
#+END_SRC
****** calc
#+BEGIN_SRC emacs-lisp
(use-package calc
  :defer t
  :ensure nil
  :config

  ;; (general-vmap
  ;;   :keymaps 'override
  ;;   "<XF86Calculator>" nil
  ;;   "X" 'my/calc-region)

  (general-nmap
    :keymaps 'override
    ;; "C-c p" 'quick-calc
    "<XF86Calculator>" 'quick-calc)

  (general-nvmap
    :keymaps 'calc-mode-map
    "C-l" 'calc-reset
    "<escape>" 'calc-quit))
#+END_SRC

****** compilate
#+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :config

  (setq-default compilation-window-height 30)
  (setq compilation-window-height 30)

  ;; (general-unbind 'compilation-mode-map
  ;;   :with 'ignore
  ;;   [remap my/quiet-save-buffer])

  (general-nvmap
    :keymaps 'compilation-mode-map
    "i" 'quit-window
    "<escape>" 'quit-window
    "<C-return>" 'quit-window
    "RET" 'quit-window
    "C-/" 'quit-window
    ";" 'quit-window))
#+END_SRC
****** conf-mode
#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'conf-space-mode-hook 'my/conf-hooks)
  (add-hook 'conf-unix-mode-hook 'my/conf-hooks)
  :config
  (defun my/conf-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (hl-line-mode +1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (electric-pair-local-mode 1)
    (highlight-numbers-mode 1)
    (highlight-operators-mode 1)
    (highlight-indent-guides-mode 1)
    (subword-mode 1)
    (tab-jump-out-mode 1))

  (electric-pair-local-mode 1)
  (general-define-key
   :keymaps 'conf-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC

****** with-editor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :defer t
  :ensure nil
  :init
  (add-hook 'with-editor-mode-hook #'my/with-editor-hooks)
  :config
  (defun my/with-editor-hooks ()
    (interactive)
    (my/prose-enable)
    (flyspell-mode -1)
    (evil-insert-state))

  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish)

  (general-unbind 'with-editor-mode-map
    :with 'with-editor-cancel
    [remap my/ex-noh]))
#+END_SRC
****** desktop package
#+BEGIN_SRC emacs-lisp
;; (use-package desktop
;;   :ensure nil
;;   :after eyebrowse
;;   :config
;;   (setq desktop-save t
;;         desktop-save-buffer t
;;         desktop-restore-eager t
;;         desktop-restore-frames t
;;         desktop-auto-save-timeout 15
;;         desktop-load-locked-desktop t
;;         desktop-restore-reuses-frames t
;;         desktop-base-file-name ".desktop"
;;         desktop-restore-forces-onscreen nil
;;         desktop-restore-in-current-display t
;;         desktop-base-lock-name ".desktop.lock"
;;         desktop-dirname "~/.emacs.d/var/desktop")

;;   (add-to-list 'desktop-modes-not-to-save 'special-mode)
;;   (desktop-save-mode 1))
#+END_SRC
****** custom
#+BEGIN_SRC emacs-lisp
(use-package Custom-mode
  :defer t
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'custom-mode-map
    "q" 'Custom-buffer-done)
  (general-nvmap
    :keymaps 'custom-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)
  (general-define-key
   :keymaps 'custom-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
****** hippie-exp
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :defer t
  :ensure nil
  :config
  (general-imap
    "M-/" 'hippie-expand))
#+END_SRC
****** term
#+BEGIN_SRC emacs-lisp
(use-package term
  :defer nil
  :init
  (add-hook 'term-mode-hook 'my/term-mode-hooks)
  (setq comint-terminfo-terminal "ansi")
  :ensure nil
  :config

  (defun my/term-delete-window ()
    (interactive)
    (delete-windows-on "*terminal*"))

  (defun my/term ()
    (interactive)
    (term "/bin/bash"))

  (defun my/term-below ()
    (interactive)
    (split-window-below)
    (other-window 1)
    (term "/bin/bash")
    (hide-mode-line-mode +1))

  (defun my/term-mode-hooks ()
    (interactive)
    (subword-mode 1)
    ;; (dimmer-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1))

  (general-unbind 'term-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer]
    [remap evil-normal-state])

  (general-unbind 'term-mode-map
    :with 'kill-buffer-and-window
    [remap my/no-highlight])

  (general-unbind 'term-raw-map
    :with 'term-send-raw
    [remap delete-backward-char]
    [remap evil-delete-backward-word]
    [remap delete-backward-word]
    [remap evil-paste-from-register]
    [remap backward-kill-word])

  (general-define-key
   :keymaps 'term-mode-map
   "M-]" 'evil-window-next
   "C-l" 'term-send-raw
   "C-/" 'my/term-delete-window
   "C-p" 'term-send-raw
   "C-n" 'term-send-raw
   "C-a" 'term-send-raw
   "C-e" 'term-send-raw
   "C-k" 'kill-line
   "C-u" 'term-send-raw
   "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-mode-map
    "M-]" 'evil-window-next
    "C-l" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-a" 'term-send-raw
    "C-e" 'term-send-raw
    "C-k" 'kill-line
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-nvmap
    :keymaps 'term-mode-map
    "C-l" 'term-send-raw
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-raw-map
    "M-]" 'evil-window-next
    "C-h" 'term-send-backspace
    "C-/" 'my/term-delete-window
    "M-r" nil))
#+END_SRC
****** safe-term
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("C-x t" . sane-term)
    ("C-x T" . sane-term-create)))
#+END_SRC
****** abbrev
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer t
  :ensure nil
  :config
  (defun abbrev-edit-save-close ()
    (interactive)
    (abbrev-edit-save-buffer)
    (my/kill-this-buffer))
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
  ;; (setq abbrev-file-name "~/.emacs.d/etc/abbrev_defs")
  (general-define-key
   :keymaps 'edit-abbrevs-map
   "<C-return>" 'abbrev-edit-save-close)
  (general-nvmap
    :keymaps 'edit-abbrevs-mode-map
    [escape] 'abbrev-edit-save-buffer
    "q" 'my/kill-this-buffer))
#+END_SRC
****** help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :init
  (add-hook 'help-mode-hook 'hl-line-mode)
  :config

  (add-to-list 'display-buffer-alist
               '("*Help*" display-buffer-same-window))

  (setq help-window-select t)

  ;; (general-unbind 'org-mode-map
  ;;   :with 'cool-moves/line-backward
  ;;   [remap evil-jump-forward])

  (general-nmap
    :keymaps 'help-mode-map
    "gr" 'sel-to-end
    "<escape>" 'quit-window)

  (general-nvmap
    :keymaps    'help-mode-map
    "<tab>"     'forward-button
    "<backtab>" 'backward-button
    "M-p"       'my/paragraph-backwards
    "M-n"       'my/paragraph-forward
    "gs"        'evil-ex-nohighlight)

  (general-define-key
   :keymaps 'help-mode-map
   "<escape>" 'quit-window
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward
   "gs" 'evil-ex-nohighlight))
#+END_SRC

****** man
#+BEGIN_SRC emacs-lisp
(use-package man
  :ensure nil
  :init
  (add-hook 'Man-mode-hook 'my/man-internal)

  :config
  (set-face-attribute 'Man-overstrike nil :inherit 'bold :foreground "orange ed")
  (set-face-attribute 'Man-underline nil :inherit 'underline :foreground "forest green")


  (defun my/man-internal ()
    (interactive)
    (other-window -1)
    (hl-line-mode +1))

  (defun my/man-external ()
    (interactive)
    (delete-other-windows)
    (hl-line-mode +1))

  (general-nvmap
    :keymaps 'Man-mode-map
    "C-x n" 'recursive-narrow-or-widen-dwim
    "q" 'quit-window
    "RET" 'man-follow
    "M-n" 'my/paragraph-forward
    "M-p" 'my/paragraph-backwards
    "C-p" 'Man-previous-section
    "C-n" 'Man-next-section
    "C-c RET" 'Man-follow-manual-reference)

  (general-define-key
   :keymaps 'Man-mode-map
   "q" 'quit-window)

  (general-unbind 'Man-mode-map
    :with 'sel-to-end
    [remap Man-update-manpage])

  (general-unbind 'Man-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Man-mode-map
    :with 'ignore
    [remap evil-insert]))
#+END_SRC
****** misc
******* scroll-bar
#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config
  (horizontal-scroll-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC
******* tool-bar
#+BEGIN_SRC emacs-lisp
(use-package tool-bar
  :ensure nil
  :config
  (setq tool-bar-mode nil)
  (tool-bar-mode -1))
#+END_SRC
******* show-paren-mode
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (custom-set-faces '(show-paren-match ((t(
                                           :background "#292929"
                                           :foreground "dark orange"
                                           :inverse-video nil
                                           :underline nil
                                           :slant normal
                                           :weight bold))))))
#+END_SRC

******* blink-cursor-mode
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  ;; :init
  ;; (remove-hook 'focus-out-hook 'save-buffer)
  :config
  (setq focus-follows-mouse 't)
  (blink-cursor-mode 0)

  ;; From: https://emacs.stackexchange.com/a/22668
  (defun my/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (if (eq
           (if (numberp alpha)
               alpha
             (cdr alpha)) ; may also be nil
           100)
          (set-frame-parameter nil 'alpha '(85 . 50))
        (set-frame-parameter nil 'alpha '(100 . 100))))))
#+END_SRC

******* autorevert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode 1))
#+END_SRC
******* mouse
#+BEGIN_SRC emacs-lisp
(use-package mouse
  :defer t
  :ensure nil
  :config
  (setq mouse-yank-at-point t))
#+END_SRC
******* paragraphs
#+BEGIN_SRC emacs-lisp
;; (use-package paragraphs
;;   :defer t
;;   :ensure nil
;;   :config
;;   (setq sentence-end-double-space nil)
;;   (setq sentence-end nil))
(setq sentence-end-double-space nil)
(setq sentence-end nil)
#+END_SRC
******* hl-line
#+BEGIN_SRC emacs-lisp
;; (use-package hl-line
;;   ;; :defer t
;;   :ensure nil
;;   :config
;;   (global-hl-line-mode nil))
#+END_SRC

******* warnings
#+BEGIN_SRC emacs-lisp
(use-package warnings
  :ensure nil
  :config
  (setq warning-minimum-level :emergency))
#+END_SRC

******* custom
#+BEGIN_SRC emacs-lisp
(use-package custom
  :defer t
  :ensure nil
  :init
  (add-hook 'after-load-theme-hook 'my/disable-variable-pitch)
  :config

  ;; http://bit.ly/2rrNnWr
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))

  ;; http://bit.ly/2WmnClo
  (defadvice load-theme (before disable-before-load)
    "Disable loaded themes before enabling a new theme"
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))
  (ad-activate 'load-theme)

  (setq custom-safe-themes t))
#+END_SRC
******* comint
#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer t
  :ensure nil
  :config
  (setq comint-prompt-read-only t))
#+END_SRC
******* sh-script
#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :defer t
  :ensure nil
  :init
  (add-hook 'sh-mode-hook  'my/sh-script-hooks)
  :config

  (defun my/sh-script-hooks ()
    (interactive)
    (flycheck-mode)
    (evil-swap-keys-swap-double-single-quotes))

  (general-nvmap
    :keymaps 'sh-mode-map
    "RET" 'hydra-prog-mode/body)

  (add-to-list 'auto-mode-alist '("\\.inputrc\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\.bash_aliases\\'" . sh-mode)))
#+END_SRC
******* vc-mode
#+BEGIN_SRC emacs-lisp
(use-package vc-mode
  :defer nil
  :ensure nil
  :config

  (setq vc-follow-symlinks t)

  (defun my/vc-push ()
    (interactive)
    (vc-push)
    (other-window 1))

    (general-define-key
     :keymaps 'vc-git-log-edit-mode-map
     "<C-return>" 'log-edit-done)

    (general-nmap
      :keymaps 'vc-git-log-edit-mode-map
      "<escape>" 'log-edit-kill-buffer))
#+END_SRC
******* register
#+BEGIN_SRC emacs-lisp
(use-package register
  :defer t
  :ensure nil
  :config
  (setq register-preview-delay 0)

  (defun my/window-to-reg-1 ()
    (interactive)
    (window-configuration-to-register 49 nil))

  (defun my/window-to-reg-2 ()
    (interactive)
    (window-configuration-to-register 50 nil))

  (defun my/window-to-reg-3 ()
    (interactive)
    (window-configuration-to-register 51 nil))

  (defun my/window-to-reg-4 ()
    (interactive)
    (window-configuration-to-register 52 nil))

  (defun my/window-to-reg-5 ()
    (interactive)
    (window-configuration-to-register 53 nil))

  (defun my/jump-to-reg-1 ()
    (interactive)
    (jump-to-register 49 nil))

  (defun my/jump-to-reg-2 ()
    (interactive)
    (jump-to-register 50 nil))

  (defun my/jump-to-reg-3 ()
    (interactive)
    (jump-to-register 51 nil))

  (defun my/jump-to-reg-4 ()
    (interactive)
    (jump-to-register 52 nil))

  (defun my/jump-to-reg-5 ()
    (interactive)
    (jump-to-register 53 nil))

  )
#+END_SRC

******* doc-view
#+BEGIN_SRC emacs-lisp
(use-package doc-view
  :defer t
  :ensure nil
  :config
  (setq doc-view-continuous t))
#+END_SRC
******* loaddefs
#+BEGIN_SRC emacs-lisp
(use-package loaddefs
  :defer t
  :ensure nil
  :config
  (setq browse-url-generic-program "google-chrome-stable")
  (setq browse-url-browser-function 'browse-url-generic))
#+END_SRC
****** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer nil
  :ensure nil
  :config
  (setq recentf-max-menu-items '10
        recentf-auto-cleanup 'mode
        recentf-save-file (expand-file-name "recentf" "\~/.emacs.d/var/")
        recentf-exclude   '("Dired"
                            "*.tex"
                            "*slime-repl sbcl"
                            "erc-mode" "help-mode"
                            "completion-list-mode"
                            "/home/dotfiles/emacs/em/var/*.*"
                            "custom.el"
                            "Buffer-menu-mode"
                            "gnus-.*-mode"
                            "occur-mode"
                            "*.Log.*"
                            "*.*log.*"
                            ".*help.*"
                            "^#.*#$"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*Help*"
                            "*Calc Trail*"
                            "magit-process"
                            "magit-diff"
                            "*Org-Babel Error Output*"
                            "\\`\\*helm"
                            "\\`\\*Echo Area"
                            "\\`\\*Minibuf"
                            "Ibuffer"
                            "epc con"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*cheatsheet*"
                            "*Help*"
                            "*Echo Area 0*"
                            "*Echo Area 1"
                            "*Minibuf 0*"
                            "*Minibuf-1*"
                            "info-history"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "*scratch*"
                            "*Warning*"
                            "*Messages*"
                            "^init.org$"
                            "^packs.org$"
                            "^functions.org$"
                            "^keys.org$"
                            "^misc.org$"
                            "^macros.org$"
                            "^hydras.org$"
                            "^links.org$"
                            "^custom.el$"
                            "*Flycheck error messages*"
                            "*Flymake log*"
                            "*company-documentation*"
                            "^.archive.org$"
                            ".*magit.*"
                            ".*elc"
                            "*shell*"
                            "*new*"
                            "*Flycheck error messages*"
                            "*clang-output*"
                            "*Bongo Playlist*"
                            "*eclim: problems*"
                            "*eclimd*"
                            "*compilation*"
                            "*Bongo Library*"
                            ;; ".*pdf"
                            "*Outline.*"
                            "*blacken*"
                            "*server*"
                            "*code-conversion-work*"
                            "*blacken-error*"
                            "*quickrun*"
                            "~/.emacs.d/var/*"))

  ;; (recentf-load-list)
  (recentf-mode -1))
#+END_SRC

****** time-date
#+BEGIN_SRC emacs-lisp
(use-package time-date
  :defer nil
  :ensure nil
  :config
  ;;  measure time
  ;;  https://stackoverflow.com/q/23622296

  (defmacro my/measure-time (&rest body)
    "Measure the time it takes to evaluate BODY."
    (interactive)
    `(let ((time (current-time)))
       ,@body
       (message "%.06f" (float-time (time-since time))))))
#+END_SRC

****** simple
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\fund\\'" . fundamental-mode))
  ;; (add-hook 'after-init-hook 'my/quit-warning-window)
  (add-hook 'completion-list-mode-hook 'my/completion-mode-hooks)
  :config

  (defun my/clone-buffer ()
    (interactive)
    (split-window-below)
    (clone-indirect-buffer-other-window (buffer-name) "1" nil)
    (evil-window-move-far-right))

  ;; completion-list-mode
  (defun my/other-window ()
    (interactive)
    (other-window -1))

  (defun my/completion-mode-hooks ()
    (interactive)
    (forward-paragraph)
    (switch-to-buffer-other-window "*Completions*")
    (hl-line-mode +1))

  (setq pcomplete-help 't
        pcomplete-autolist 't
        pcomplete-ignore-case 't)

  ;; (defun my/quit-warning-window ()
  ;;   (interactive)
  ;;   (quit-windows-on "*Warnings*"))

  ;; https://www.emacswiki.org/emacs/QuotedInsert
  (setq read-quoted-char-radix 10)

  (setq use-dialog-box nil)
  (setq kill-whole-line 't)
;;;; WINDOWS ;;;;
  (setq window-resize-pixelwise t)
  (setq recenter-positions '(top middle bottom))

  (defun my/kill-whole-buffer ()
    (interactive)
    (read-only-mode -1)
    (kill-region (point-min) (point-max))
    (quit-window))

  (defun my/set-fill-120 ()
    (interactive)
    (shut-up
      (set-fill-column 120)))

  (defun my/set-fill-70 ()
    (interactive)
    (shut-up
      (set-fill-column 70)))

  (defun my/set-fill-89 ()
    (interactive)
    (shut-up
      (set-fill-column 89)))

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  ;; (setq fill-column 69)
  (setq-default display-line-numbers nil)
  (line-number-mode +1)
  (setq auto-fill-mode t)
  (setq-default auto-fill-mode t)

  (defun my/eval-buffer ()
    (interactive)
    (progn
      (save-excursion
        (eval-buffer)
        (indent-buffer)
        (my/save-all)
        (message " buffer evaluated"))))

  (defun my/eval-buffer-no-save ()
    (interactive)
    (save-excursion
      (indent-buffer)
      (eval-buffer)
      (message " buffer evaluated")))

  (defun my/move-file-to-trash ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (delete-window))

  (defun my/move-file-to-trash-close-ws ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (eyebrowse-close-window-config))

  (defun delete-file-and-buffer ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))

  (defun show-fill-column ()
    (interactive)
    (describe-variable 'fill-column))

  (defun show-major-mode ()
    (interactive)
    (describe-variable 'major-mode))

  (defun my/buffer-name ()
    (interactive)
    (message (buffer-name)))

  (setq save-interprogram-paste-before-kill nil)
  (setq backward-delete-char-untabify-method 'hungry)

  (general-unbind 'special-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (general-unbind 'messages-buffer-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)

  (global-visual-line-mode -1)
  (setq global-visual-line-mode nil)
  (setq-default global-visual-line-mode nil)
  (setq truncate-lines t)
  (setq-default truncate-lines t))
#+END_SRC
****** eval
#+BEGIN_SRC emacs-lisp
(use-package eval
  :defer t
  :ensure nil
  :config
  (setq debug-on-error nil))
#+END_SRC

****** dispnew
#+BEGIN_SRC emacs-lisp
(use-package dispnew
  :defer t
  :ensure nil
  :config
  (setq visible-bell nil))
#+END_SRC

****** editfns
#+BEGIN_SRC emacs-lisp
(use-package editfns
  :defer t
  :ensure nil
  :config
  (put 'narrow-to-region 'disabled nil))
#+END_SRC
****** image
#+BEGIN_SRC emacs-lisp
(use-package image
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'image-mode-map
    "C--" 'image-decrease-size
    "C-=" 'image-increase-size
    "=" 'image-transform-fit-to-width
    "RET" 'image-transform-fit-to-width
    "q" 'image-kill-buffer))
;; "<escape>" 'my/quit-window
#+END_SRC
****** time
#+BEGIN_SRC emacs-lisp
(use-package time
  :ensure nil
  :config
  (setq-default display-time-format "| %a, %H:%M |")
  (setq-default display-time-default-load-average nil)
  (display-time)
  (display-time-mode +1))
#+END_SRC

****** minibuffer
#+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :ensure nil
  :config

  (general-define-key
   :keymaps 'minibuffer-inactive-mode-map
   "<S-insert>" 'yank
   "C-h" 'delete-backward-char)

  (general-define-key
   :keymaps 'minibuffer-local-map
   "<escape>" 'abort-recursive-edit
   "C-u" 'my/backward-kill-line
   "C-w" 'backward-kill-word
   "C-h" 'delete-backward-char))
#+END_SRC
****** debug
#+BEGIN_SRC emacs-lisp
(use-package debug
  :ensure nil
  :config
  (general-nmap
    :keymaps 'debugger-mode-map
    "<escape>" 'ignore)

  (setq debug-on-error nil))
#+END_SRC
****** fringe
#+BEGIN_SRC emacs-lisp
(use-package fringe
  :ensure nil
  :config
  (fringe-mode -1))
#+END_SRC
****** avoid
#+BEGIN_SRC emacs-lisp
;; (use-package avoid
;;   :defer nil
;;   :ensure nil
;;   :config
;;   (setq mouse-avoidance-banish-position '((frame-or-window . frame)
;;                                           (side . right)
;;                                           (side-pos . 3)
;;                                           (top-or-bottom . top)
;;                                           (top-or-bottom-pos . 10)))
;;   (mouse-avoidance-mode 'banish))
#+END_SRC
****** disable-mouse
#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :defer t
  :config
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  (global-disable-mouse-mode))
#+END_SRC
****** savehist
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (setq history-length 500)
  (setq savehist-autosave-interval (* 1 30))
  (setq savehist-file "~/.emacs.d/var/savehist.el")
  (setq savehist-additional-variables '(kill-ring search-ring filesets-data))
  :config
  (savehist-mode t))
#+END_SRC
****** subword
#+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :config
  (global-subword-mode +1))
#+END_SRC
****** gud
#+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :config
  (defun my/pdb ()
    (interactive)
    (pdb (buffer-file-name))))
#+END_SRC
****** messages-buffer-mode
****** midnight-mode
#+BEGIN_SRC emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq midnight-period 10800)
  (midnight-mode +1))
#+END_SRC
***** Text Utils
****** Wordnut
#+BEGIN_SRC emacs-lisp
(use-package wordnut
  :defer t
  :init
  (add-hook 'wordnut-mode-hook 'hl-line-mode)
  :ensure t)
#+END_SRC
****** agg fil par
#+BEGIN_SRC emacs-lisp
(use-package aggressive-fill-paragraph)
#+END_SRC
****** pabbrev
#+BEGIN_SRC emacs-lisp
(use-package pabbrev
  :defer t
  :ensure t
  :config
  (setq pabbrev-idle-timer-verbose nil)
  (general-imap
    :keymaps 'pabbrev-mode-map
    "C-l" 'pabbrev-expand-maybe))
#+END_SRC

****** lorem ipsum
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum
  :defer t
  :ensure t
  :config
  (setq lorem-ipsum-paragraph-separator "\n\n"))
#+END_SRC

****** hl-sentence
#+BEGIN_SRC emacs-lisp
(use-package hl-sentence
  :defer t
  :init
  (add-hook 'hl-sentence-mode-hook 'my/disable-hl-line-mode)
  :ensure t
  :config
  (defun my/disable-hl-line-mode ()
    (interactive)
    (hl-line-mode -1))
  (custom-set-faces
   '(hl-sentence ((t (:inherit hl-line))))))
#+END_SRC

****** flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer t
  :init
  (add-hook 'flyspell-mode-hook 'flyspell-buffer)
  :config
  (setq flyspell-abbrev-p t)
  (setq flyspell-issue-message-flag nil)
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-default-dictionary "american")

  (defun my/ispell-show-dictionary ()
    (interactive)
    (describe-variable 'ispell-current-dictionary))

  (general-define-key
   :keymaps 'flyspell-mode-map
   "C-c d" 'my/ispell-show-dictionary))

(use-package flyspell-correct-ivy
  :after flyspell
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+END_SRC
****** ispell
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :defer t
    :ensure nil
    :init
    ;; https://github.com/company-mode/company-mode/issues/912#issuecomment-532016905
    (advice-add 'ispell-lookup-words :around
                (lambda (orig &rest args)
                  (shut-up (apply orig args))))
    )
#+END_SRC

****** auto capitalize
https://is.gd/JyKZsg
#+BEGIN_SRC emacs-lisp
(setq auto-capitalize-ask nil)
(autoload 'auto-capitalize-mode "auto-capitalize"
  "Toggle `auto-capitalize' minor mode in this buffer." t)
;; (autoload 'turn-on-auto-capitalize-mode "auto-capitalize"
;;   "Turn on `auto-capitalize' minor mode in this buffer." t)
(autoload 'enable-auto-capitalize-mode "auto-capitalize"
  "Enable `auto-capitalize' minor mode in this buffer." t)
#+END_SRC
****** fix-word
#+BEGIN_SRC emacs-lisp
(use-package fix-word
  :defer t)
#+END_SRC
****** wc-mode
#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :defer t
  :config
  (defun my/wc-count-lines (&optional rstart rend field)
    (interactive)
    (if rstart
        (setq rend (max rstart rend))
      (if (and (interactive-p) transient-mark-mode mark-active)
          (setq rstart (region-beginning)
                rend (region-end))
        (setq rstart (point-min)
              rend (point-max))))
    (let ((wcount (funcall wc-count-words-function rstart rend))
          (lcount (funcall wc-count-lines-function rstart rend))
          (ccount (funcall wc-count-chars-function rstart rend)))
      (when (interactive-p) (message " %d line%s"
                                     lcount
                                     (if (= lcount 1) "" "s")))
      (if field
          (nth field (list lcount wcount ccount))
        (list lcount wcount ccount))))
  (defun my/wc-count (&optional rstart rend field)
    (interactive)
    (if rstart
        (setq rend (max rstart rend))
      (if (and (interactive-p) transient-mark-mode mark-active)
          (setq rstart (region-beginning)
                rend (region-end))
        (setq rstart (point-min)
              rend (point-max))))
    (let ((wcount (funcall wc-count-words-function rstart rend))
          (lcount (funcall wc-count-lines-function rstart rend))
          (ccount (funcall wc-count-chars-function rstart rend)))
      (when (interactive-p) (message " %d line%s, %d word%s, %d char%s"
                                     lcount
                                     (if (= lcount 1) "" "s")
                                     wcount
                                     (if (= wcount 1) "" "s")
                                     ccount
                                     (if (= ccount 1) "" "s")))
      (if field
          (nth field (list lcount wcount ccount))
        (list lcount wcount ccount)))))
#+END_SRC
****** olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :defer t
  :init
  (setq-default olivetti-body-width 95)
  :config
  (defun my/olivetti-narrow ()
    (interactive)
    (shut-up
    (olivetti-mode +1)
    (olivetti-set-width 70))))
;; (add-hook 'olivetti-mode-hook 'my/set-fill-120)
#+END_SRC
****** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :defer t
  :init
  (add-hook 'markdown-mode-hook 'my/markdown-hooks)
  (setq markdown-hide-urls 't)
  (setq-default markdown-hide-markup nil)
  (setq markdown-enable-wiki-links t)
  :config
  (defun my/markdown-forward-paragraph ()
    (interactive)
    (markdown-forward-paragraph)
    (forward-to-indentation))

  (defun my/markdown-hooks ()
    (interactive)
    (olivetti-mode +1)
    (my/prose-enable)
    (my/prose-english)
    ;; (typo-mode +1)
    ;; (my/company-idle-one-prefix-two-quiet)
    (emmet-mode +1))

  (defun my/markdown-copy-buffer ()
    (interactive)
    (save-excursion
      (my/markdown-copy-buffer-macro)
      (message " buffer yanked without title")))

  (setq markdown-css-paths '("/home/mrbig/org/Creative/Web/md_themes/retro/css/retro.css"))

  (defun my/counsel-markdown-commands ()
    (interactive)
    (counsel-M-x "^markdown- "))

  ;; (general-nmap
  ;;   :keymaps 'markdown-mode-map
  ;;   "<escape>" 'my/quiet-save-buffer-markdown)

  (general-nvmap
    :keymaps 'markdown-mode-map
    ">" 'markdown-promote-subtree
    "<" 'markdown-demote-subtree
    "}" 'markdown-forward-paragraph
    "RET" 'hydra-spell/body
    "[" 'markdown-previous-link
    "]" 'markdown-next-link
    "<tab>" 'markdown-cycle
    "<insert>" 'markdown-insert-link)

  (general-define-key
   :keymaps 'markdown-mode-map
   "C-c s" 'my/markdown-insert
   "C-x y" 'my/markdown-copy-buffer
   "C-c l" 'markdown-toc-generate-or-refresh-toc
   "M-p" 'markdown-backward-paragraph
   "M-n" 'my/markdown-forward-paragraph
   "<tab>" 'markdown-cycle
   "<insert>" 'markdown-insert-link))

(defun my/markdown-insert ()
  (interactive)
  (counsel-M-x "^markdown-insert- "))

(use-package markdown-toc
  :after markdown
  :ensure t)
#+END_SRC

****** adoc-mode
#+BEGIN_SRC emacs-lisp
(use-package adoc-mode
  :defer t
  :init
  (add-hook 'adoc-mode-hook 'my/disable-variable-pitch)
  (add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode)))
#+END_SRC
****** all-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :defer t)
#+END_SRC
****** typo
#+BEGIN_SRC emacs-lisp
(use-package typo
  :defer t
  :config
  (defun typo-insert-cycle (cycle)
    "Insert the strings in CYCLE"
    (let ((i 0)
          (repeat-key last-input-event)
          repeat-key-str)
      (insert (nth i cycle))
      (setq repeat-key-str (format-kbd-macro (vector repeat-key) nil))
      (while repeat-key
        (message "(inserted %s)"
                 (typo-char-name (nth i cycle))
                 repeat-key-str)
        (if (equal repeat-key (read-event))
            (progn
              (clear-this-command-keys t)
              (delete-char (- (length (nth i cycle))))
              (setq i (% (+ i 1)
                         (length cycle)))
              (insert (nth i cycle))
              (setq last-input-event nil))
          (setq repeat-key nil)))
      (when last-input-event
        (clear-this-command-keys t)
        (setq unread-command-events (list last-input-event)))))


  (define-typo-cycle typo-cycle-dashes
    "Cycle through various dashes."
    ("โ"   ; EM DASHH
     "-"   ; HYPHEN-MINUS
     "โ"   ; EN DASH
     "โ"   ; MINUS SIGN
     "โ"   ; HYPHEN
     "โ")) ; NON-BREAKING HYPHEN
  (setq typo-language "Brasileiro"))
#+END_SRC
****** writeroom-mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :defer t
    :init
    (add-hook 'writeroom-mode-hook 'my/enable-writeroom-hooks)
    (advice-add 'writeroom-mode :before #'toggle-frame-fullscreen)
    :config
    (setq writeroom-border-width 85
          writeroom-fringes-outside-margins nil
          writeroom-bottom-divider-width 0
          writeroom-width 86
          ;; writeroom-mode-line nil
          writeroom-global-effects '(writeroom-set-fullscreen
                                     writeroom-set-alpha
                                     writeroom-set-menu-bar-lines
                                     writeroom-set-tool-bar-lines
                                     writeroom-set-vertical-scroll-bars
                                     writeroom-set-bottom-divider-width
                                     writeroom-set-internal-border-width))
    (general-define-key
     :keymaps 'writeroom-mode-map
     "C-9" #'writeroom-increase-width
     "C-0" #'writeroom-decrease-width
     "C--" #'writeroom-adjust-width)

    (defun my/enable-writeroom-hooks ()
      (interactive)
      (shut-up
        (my/prose-brasileiro)
        (olivetti-mode -1)
        (aggressive-fill-paragraph-mode +1)
        (auto-fill-mode +1)
        (set-fill-column 83))))
#+END_SRC
****** fountain-mode
#+BEGIN_SRC emacs-lisp
(use-package fountain-mode
  :defer t
  :init
  ;; (remove-hook 'fountain-mode-hook 'hl-sentence-mode)
  ;; (remove-hook 'fountain-mode-hook 'outline-minor-mode)
  (add-hook 'fountain-mode-hook 'my/fountain-hooks)
  :ensure t
  :config

  (defun my/fountain-hooks ()
    (interactive)
    ;; (hl-sentence-mode +1)
    (outline-minor-mode +1)
    (tab-jump-out-mode -1)
    (pabbrev-mode -1))

  ;; (general-unbind 'fountain-mode-map
  ;;   :with 'org-narrow-to-subtree
  ;;   [remap recursive-narrow-or-widen-dwim])

  ;; (general-unbind 'fountain-mode-map
  ;;   :with 'widen
  ;;   [remap recursive-widen])

  (general-define-key
   :keymaps 'fountain-mode-map
   "M-p"   'fountain-backward-scene
   "M-n"   'fountain-forward-scene
   "C-S-p" 'fountain-backward-character
   "C-S-n" 'fountain-forward-character
   "C-M-p" 'my/paragraph-backwards
   "C-M-n" 'my/paragraph-forward)

  (general-nvmap
    :keymaps 'fountain-mode-map
    "zi" 'fountain-outline-show-all
    "gk" 'fountain-outline-previous
    "gj" 'fountain-outline-next
    "gl" 'fountain-backward-scene
    "gh"  'fountain-forward-scene
    "M-p"   'fountain-backward-scene
    "M-n"   'fountain-forward-scene
    "C-S-p" 'fountain-backward-character
    "C-S-n" 'fountain-forward-character
    "<tab>" 'fountain-dwim))
#+END_SRC
****** url-shortener
#+BEGIN_SRC emacs-lisp
(use-package url-shortener
  :defer t
  :config
  (setq bitly-access-token "3026d7e8b1a0f89da10740c69fd77b4b3293151e"))
#+END_SRC
****** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :defer nil
  :ensure t
  :init

  (add-hook 'pdf-view-mode-hook 'my/pdf-view-settings)
  (add-hook 'pdf-tools-enabled-hook 'my/pdf-view-settings)

  (add-hook 'pdf-outline-buffer-mode-hook 'my/pdf-outline-settings)

  :config
  (setq pdf-view-continuous t)
  (setq pdf-view-resize-factor 1.15)
  (setq pdf-view-display-size 'fit-page)
  (setq pdf-misc-size-indication-minor-mode t)
  (setq pdf-annot-activate-created-annotations t)

  (defun my/call-ranger-from-pdf ()
    (interactive)
    (last-buffer)
    (ranger))

  (defun pdf-occur-goto-quit ()
    (interactive)
    (pdf-occur-goto-occurrence)
    (quit-windows-on "*PDF-Occur*"))

  (defun my/pdf-delete-occur-window ()
    (interactive)
    (quit-windows-on "*PDF-Occur*"))

  (defun my/pdf-view-settings ()
    (interactive)
    (pdf-annot-minor-mode 1)
    (pdf-links-minor-mode 1)
    ;; (line-no-numbers)
    (pdf-history-minor-mode 1)
    (tab-jump-out-mode -1))

  (defun my/pdf-outline-settings ()
    (interactive)
    (outline-minor-mode 1)
    (hl-line-mode 1))

  (general-define-key
   :keymaps 'pdf-outline-minor-mode-map
   "<escape>" 'pdf-outline-quit)

  (general-define-key
   :keymaps 'pdf-outline-buffer-mode-map
   "gh" 'pdf-outline-up-heading
   "<tab>" 'pdf-outline-toggle-subtree
   "<escape>" 'pdf-outline-quit)

  (general-nmap
    :keymaps 'pdf-outline-buffer-mode-map
    "<escape>" 'pdf-outline-quit)

  (general-unbind 'pdf-outline-buffer-mode-map
    :with 'pdf-outline-quit
    [remap my/quiet-save-buffer])

  (general-unbind 'pdf-view-mode-map
    :with 'my/call-ranger-from-pdf
    [remap ranger])

  (general-unbind 'pdf-view-mode-map
    :with 'my/kill-this-buffer
    "Q")

  (nvmap :keymaps 'pdf-annot-list-mode-map
    "q" 'pdf-outline-quit-and-kill
    "<escape>" 'pdf-outline-quit)

  (nvmap :keymaps 'pdf-occur-buffer-mode-map
    "go" 'pdf-occur-goto-occurrence
    "<return>" 'pdf-occur-goto-quit)

  (general-define-key
   :keymaps 'pdf-view-mode-map
   "w" 'pdf-view-fit-width-to-window
   "<return>" 'quick-calc
   "<kp-enter>" 'quick-calc
   "J" 'pdf-view-next-page
   "j" 'pdf-view-next-line-or-next-page
   "K" 'pdf-view-previous-page
   "k" 'pdf-view-previous-line-or-previous-page
   "p" 'pdf-view-previous-page
   "n" 'pdf-view-next-page

   "C-x i" 'org-noter-insert-precise-note

   "C-c v v" 'pdf-view-set-slice-using-mouse
   "C-c v r" 'pdf-view-reset-slice
   "C-c C-c" 'pdf-annot-add-highlight-markup-annotation
   "M-o" 'pdf-history-backward
   "M-i" 'pdf-history-forward
   "H" 'pdf-history-backward
   "L" 'pdf-history-forward)

  (general-unbind 'pdf-view-mode-map
    :with 'pdf-view-fit-page-to-window
    [remap evil-beginning-of-visual-line])

  (general-unbind 'pdf-view-mode-map
    :with 'pdf-outline
    [remap evil-toggle-fold])

  (general-define-key
   :keymaps 'pdf-annot-edit-contents-minor-mode-map
   "C-c C-c" 'pdf-annot-edit-contents-abort
   "<C-return>" 'pdf-annot-edit-contents-commit)

  (nvmap :keymaps 'pdf-annot-edit-contents-minor-mode-map
    "c" 'pdf-annot-edit-contents-abort)

  (nvmap :keymaps 'pdf-view-mode-map
    "M-s" 'last-buffer
    "<kp-enter>" 'quick-calc
    "i" 'org-noter-insert-note
    "I" 'org-noter-insert-precise-note
    "C-l" 'counsel-bookmark
    "C-c C-c" 'pdf-annot-add-highlight-markup-annotation
    "c" 'pdf-annot-add-highlight-markup-annotation
    "H" 'pdf-history-backward
    "L" 'pdf-history-forward
    "S" 'pdf-occur
    "C-s" 'pdf-occur
    "ss" 'my/pdf-delete-occur-window
    ;; "q" 'last-buffer
    ;; "M-s" 'last-buffer
    "gf" 'find-pdf-keys
    "TAB" 'pdf-outline
    "D" 'pdf-annot-delete
    "gp" 'pdf-view-goto-page
    ";" 'hydra-org-noter/body
    "f" 'pdf-links-action-perform
    "gr" 'pdf-view-jump-to-register
    "t" 'pdf-annot-add-text-annotation
    "gm" 'pdf-view-position-to-register
    "h" 'pdf-view-scroll-up-or-next-page
    "l" 'pdf-view-scroll-down-or-previous-page
    "<down>" 'pdf-view-next-line-or-next-page
    "<up>" 'pdf-view-previous-line-or-previous-page
    "J" 'pdf-view-next-page
    "j" 'pdf-view-next-line-or-next-page
    "K" 'pdf-view-previous-page
    "k" 'pdf-view-previous-line-or-previous-page
    "p" 'pdf-view-previous-page
    "n" 'pdf-view-next-page
    "," 'pdf-view-previous-page
    "." 'pdf-view-next-page
    "w" 'pdf-view-fit-width-to-window
    "C-0" 'pdf-view-fit-height-to-window
    "<escape>" nil
    ;; "<left>" 'eyebrowse-prev-window-config
    ;; "<right>" 'eyebrowse-next-window-config
    "C-c h" 'pdf-annot-add-highlight-markup-annotation)

  (pdf-loader-install))
#+END_SRC

***** Macros
#+BEGIN_SRC emacs-lisp
(fset 'my/clean-video-filenames-macro
      [?: ?% ?s ?/ ?\\ ?. ?m ?p ?4 ?/ ?/ return ?: ?% ?s ?/ ?_ ?/ ?  ?/ return])

(fset 'my/narrow-html-section-macro
      (kmacro-lambda-form [?v ?a ?t ?V ?  ?n escape] 0 "%d"))

(fset 'my/python-make-print
      (kmacro-lambda-form [?v ?g ?_ ?S ?\) escape ?' ?< ?i ?p ?r ?i ?n ?t escape ?l] 0 "%d"))

(fset 'my/python-make-fstring
      (kmacro-lambda-form [?v ?i ?w ?S ?\" ?v ?i ?\" ?S ?\} ?h ?i ?f ?\C-f ?\C-f ?\C-b ?  ?\C-b] 0 "%d"))

(fset 'my/python-fix-string-style
      (kmacro-lambda-form [?v ?a ?\" escape ?' ?< ?a ?\\ ?n ?  escape ?' ?> ?i ?\; ?\\ ?b ?  backspace backspace ?n ?  escape ?' ?<] 0 "%d"))

(fset 'my/comment-and-format-code-macro
      (kmacro-lambda-form [?g ?c ?g ?v ?g ?q] 0 "%d"))

(fset 'my/insert-current-word
      (kmacro-lambda-form [?z ?= ?i ?y] 0 "%d"))

(fset 'my/org-hide-others-macro
      (kmacro-lambda-form [?z ?m tab] 31 "%d"))

(fset 'my/org-elisp-block-macro
      (kmacro-lambda-form [escape ?' ?< ?O ?# ?+ ?B ?E ?G ?I ?N ?_ ?S ?R ?C ?  ?e ?m ?a ?c ?s ?- ?l ?i ?s ?p escape ?' ?> ?o ?# ?+ ?E ?N ?D ?_ ?S ?R ?C escape] 0 "%d"))

(fset 'my/org-to-pdf-macro
      (kmacro-lambda-form [?\C-c ?\C-e ?l ?o] 0 "%d"))

(fset 'my/org-sort-pages-macro
      (kmacro-lambda-form [?\C-c ?^ ?r ?P ?A ?G ?E ?S return] 0 "%d"))

(fset 'org-hide-all
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([3 117 tab] 0 "%d") arg)))

(fset 'org-sort-todos
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("gm^d" 0 "%d") arg)))

(fset 'my/narrow-to-paren-macro
      (kmacro-lambda-form [escape ?v ?a ?\( ?  ?n escape ?' ?<] 0 "%d"))

(defun my/evil-format-paragraph-function ()
  (interactive)
  (my/evil-format-paragraph-macro)
  (my/quiet-save-buffer))

(fset 'my/evil-format-paragraph-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("gwap" 0 "%d") arg)))

(fset 'my/select-paragraph
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vap" 1 "%d") arg)))

(fset 'my/goto-python-file
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217828 92 46 112 121 13] 0 "%d") arg)))

(fset 'my/goto-pdf-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217828 46 112 100 102 return] 0 "%d") arg)))

(fset 'my/goto-org-src-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217828 79 114 103 32 83 114 99 return] 0 "%d") arg)))

(fset 'my/markdown-copy-buffer-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("gg2jyG" 0 "%d") arg)))

(fset 'my/widen-reset-no-switch
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" ow wa ml" 0 "%d") arg)))

(fset 'my/widen-reset
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("nw ml wazz\363" 0 "%d") arg)))

(fset 'my/widen-reset
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("nw ml wazz\363" 0 "%d") arg)))

(fset 'insert-link-in-list
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 119 103 114 insert insert return return] 0 "%d") arg)))

(fset 'duplicate-a-paragrah
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vapy'>p" 0 "%d") arg)))

(fset 'duplicate-inner-paragraph
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vipy'>gop" 0 "%d") arg)))

(fset 'my/goto-file-at-point-macro
      (kmacro-lambda-form [?\C-x ?\C-f ?\C-m] 0 "%d"))

(fset 'my/eyebrowse-create-named-configs
      (kmacro-lambda-form [?  ?2 ?  ?3 ?  ?4 ?  ?1 ?  ?R ?\C-u ?1 ?. ?  ?C ?S ?S return ?  ?2 ?  ?R ?\C-u ?2 ?. ?  ?H ?T ?M ?L return ?  ?3 ?  ?R ?3 ?. ?  ?T ?a ?s ?k ?s return ?  ?4 ?  ?R ?N ?o backspace backspace ?\C-u ?4 ?. ?  ?N ?o ?t ?e ?s return ?  ?1] 0 "%d"))

(fset 'my/show-variable-at-point
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([8 118 return] 0 "%d") arg)))

(fset 'my/disable-theme
      (kmacro-lambda-form [134217848 ?d ?i ?s ?a ?b ?l ?e ?- ?t ?h ?e ?m ?e return return] 0 "%d"))

(fset 'adjust-cheatsheet-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 116 106 escape] 0 "%d") arg)))

(fset 'adjust-vertigo-cheat-sheet
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 116 106 106 106 escape 24 67108912 61 61 escape] 0 "%d") arg)))

(fset 'adjust-server-name
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 74 32 116 106 106 106 escape 118 105 34 24 110 110 escape 24 67108912 61 61 61 201326640] 0 "%d") arg)))

(fset 'my/book-set
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([24 114 109 return] 0 "%d") arg)))

(fset 'goto-pdf-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([24 98 46 112 100 102 return] 0 "%d") arg)))

(fset 'my/undo-save
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("ru1" 0 "%d") arg)))

(fset 'my/undo-restore
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("rU1" 0 "%d") arg)))

(fset 'clone-to-workspace
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("4cmZ0 f'Z" 0 "%d") arg)))

(fset 'insert-leader
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape C-f9] 0 "%d") arg)))

(fset 'i3-toggle-keys
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 90 C-f11 103 103 47 48 48 115 99 return 134217853 106 103 99 105 112 134217853 106 103 99 105 112 C-f12 96 90 0] 0 "%d") arg)))

(fset 'eyebrowse-swap-workspace
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 110 return 134217829 32 110 return 134217829] 0 "%d") arg)))

(fset 'show-text-objects
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 101 118 105 108 32 111 114 103 32 116 101 120 116 return 122 105 122 116 122 110] 0 "%d") arg)))

(fset 'my/narrow-to-tag-macro
      (kmacro-lambda-form [?v ?a ?t ?V ?  ?n escape] 0 "%d"))

(fset 'my/dumb-jump-prefer-external-macro
      (kmacro-lambda-form [escape ?\C-c ?M f11 return] 0 "%d"))

(fset 'my/html-clear-file-macro
      (kmacro-lambda-form [?\C-x ?h ?c ?1 ?1 tab ?\C-m tab] 0 "%d"))

(fset 'my/narrow-to-paren-macro
      (kmacro-lambda-form [escape ?v ?a ?\( ?  ?n escape ?' ?<] 0 "%d"))

(fset 'my/clear-html-macro
      (kmacro-lambda-form [?\C-x ?h ?c ?! C-return] 0 "%d"))

(fset 'my/python-paste-exercise
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 111 103 111 112 103 119 97 112 103 99 105 112 escape] 0 "%d") arg)))

(fset 'my/python-make-string
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 103 102 41 104 83 41 105 115 116 114 escape 108] 0 "%d") arg)))

(fset 'indent-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217837 M-return 134217837] 0 "%d") arg)))

;; (fset 'add-hook-macro
;;       (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("I(add-hook ' ')\342" 0 "%d") arg)))

(fset 'my/ex-run-python-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217848 109 121 47 101 120 45 112 121 return return] 0 "%d") arg)))

(fset 'add-hook-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([73 17 40 97 100 100 45 104 111 111 107 32 17 39 5 32 17 39 41 134217826 6] 0 "%d") arg)))

(fset 'my/eval-next-sexp-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 97 40 escape 24 5] 0 "%d") arg)))

(fset 'c-goto-vars
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([109 113 103 103 47 115 101 116 108 111 99 97 108 101 return 50 106] 0 "%d") arg)))

(fset 'py-open-beg
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 home] 0 "%d") arg)))

(fset 'run-c-with-arguments
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([10 109 121 32 99 111 112 121 32 102 105 108 101 110 return 32 101 46 47 escape 112 105 backspace backspace 32] 0 "%d") arg)))

(fset 'py-enclose
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vg_S)i" 0 "%d") arg)))

(fset 'copy-line-no-newline
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g,Z0Y'Z" 0 "%d") arg)))

(fset 'my/duplicate-line-macro
      (kmacro-lambda-form [?m ?Z ?y ?y ?p ?\' ?Z ?j] 0 "%d"))

(fset 'python-open-two-lines-insert
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([end return return return] 0 "%d") arg)))

(fset 'python-open-two-line
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 13 13 home] 0 "%d") arg)))

(fset 'my/run-python-all
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217848 114 117 110 45 112 121 116 104 111 110 return 134217848 101 118 105 108 45 110 111 114 109 97 108 45 115 97 116 backspace backspace 116 97 116 101 return 48 12 32 119 114 98 106 escape 67] 0 "%d") arg)))

(fset 'org-quote-selection
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 90 79 35 43 86 69 71 S-backspace S-backspace S-backspace 66 69 71 73 78 95 81 85 79 84 69 escape 96 62 111 35 43 69 66 68 S-backspace S-backspace 78 68 43 S-backspace 95 81 85 79 84 69 escape 96 60 103 111 escape 100 100] 0 "%d") arg)))

(fset 'org-markdown-to-clipboard
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" omhyk" 0 "%d") arg)))

(fset 'reset-scratch-c
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" xdimsc" 0 "%d") arg)))

(fset 'adjust-show-fill-colum
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 112 24 110 110 escape 32 119 61 escape 32 119 114 106 106 escape 32 109 69] 0 "%d") arg)))

(fset 'c-widen
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g,Z ow wa ml" 0 "%d") arg)))

(fset 'c-narrow-to-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 90 118 105 112 24 110 110 escape 32 119 61 61 escape 32 109 110 96 90] 0 "%d") arg)))

(fset 'duplicate-workspace-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g,Z\363 f'Z" 0 "%d") arg)))
(fset 'new-eval-src-block
      [?g ?\] ?Z ?v ?i ?E ?  ?c ?r escape ?' ?Z ?z ?z])
(fset 'run-c-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 69 121 32 119 115 11 116 101 109 112 46 99 return 24 104 112 backspace 114] 0 "%d") arg)))

(fset 'run-c-block-insert
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 118 105 69 121 32 119 115 11 116 101 109 112 46 99 return 24 104 112 backspace 114] 0 "%d") arg)))

(fset 'adjust-eshell-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 97] 0 "%d") arg)))

(fset 'adjust-eshell-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 97] 0 "%d") arg)))

(fset 'my/debug-c-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 98 112 134217766 103 100 98 32 45 45 98 97 116 99 104 32 45 45 101 120 32 114 32 45 45 101 120 32 98 114 32 45 45 101 120 32 113 32 45 45 97 114 103 115 32 insert 127 127 13] 0 "%d") arg)))

(fset 'c-complete-newline
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 90 97 59 escape 96 90 97] 0 "%d") arg)))

(fset 'adjust-term
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 105 115 112 13] 0 "%d") arg)))

(fset 'adjust-python-term
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 116 106 escape] 0 "%d") arg)))

(fset 'adjust-term-c
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 105] 0 "%d") arg)))

(fset 'format-hydra-binding
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 103 114 83 41 96 60 97 39 right 32 left left] 0 "%d") arg)))

(fset 'create-setq
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 103 114 83 41 96 60 97 115 101 116 113 32 escape 96 62 105 32] 0 "%d") arg)))

(fset 'create-setq-from-visual
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([83 41 96 60 97 115 101 116 113 32 escape 96 62 97 escape 105 32] 0 "%d") arg)))

(fset 'alg-goto-var-ins
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 103 47 94 118 97 114 36 return 106 106 105] 0 "%d") arg)))

(fset 'alg-goto-inicio-ins
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 103 47 94 105 110 105 99 105 111 36 return 106 106 105] 0 "%d") arg)))

(fset 'alg-goto-var
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 118 97 114 return 106 106] 0 "%d") arg)))

(fset 'alg-goto-inicio
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 105 110 105 99 105 111 return 106 106] 0 "%d") arg)))

(fset 'my/eval-parentheses-macro
      (kmacro-lambda-form [?v ?a ?\( 134217848 ?e ?v ?a ?l ?- return escape] 0 "%d"))

(fset 'my/calc-region
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([121 XF86Calculator insert return 103 111 112] 0 "%d") arg)))

(fset 'term-ls-p
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([115 109 97 108 108 112 114 111 109 112 116 return 99 108 101 97 114 return 108 115 return 112 32] 0 "%d") arg)))

(fset 'term-gcc
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 99 99 32 45 119 32 45 108 109 32 escape 112 97 32 38 38 32 46 47 46 backspace 97 46 44 backspace backspace 46 111 117 116 escape 48 107 119 119 119 119 105 escape 48 107 108 108 108 108 108 105 home 99 108 101 97 114 32 38 38 32 return] 0 "%d") arg)))

(fset 'select-next-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([47 35 92 43 66 69 71 73 78 95 83 82 67 return 86 47 35 92 43 69 78 68 95 83 82 67 return] 0 "%d")) arg)))

(fset 'select-next-inner-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([47 35 92 43 66 69 71 73 78 95 83 82 67 return 106 86 47 35 92 43 69 78 68 95 83 82 67 return 107] 0 "%d")) arg)))

(fset 'my-yank-region
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("y" 0 "%d") arg)))
#+END_SRC
***** My Write Modes
****** My Insert Mode
#+BEGIN_SRC emacs-lisp
(defun my/write-insert-mode ()
  (interactive)
  (general-unbind '(org-mode-map evil-org-mode-map)
    :with 'ignore
    ;; [remap evil-delete-backward-word]
    [remap undo-fu-only-redo]
    [remap undo-fu-only-undo]
    [remap evil-org-open-below]
    [remap evil-org-open-above]
    [remap delete-backward-char]
    [remap delete-char]
    [remap evil-change-line]
    [remap evil-change-to-initial-state]
    [remap evil-change-to-previous-state]
    [remap evil-change-whole-line]
    [remap evil-change]
    [remap evil-delete-backward-char-and-join]
    [remap evil-delete-backward-char]
    [remap evil-delete-buffer]
    [remap evil-delete-char]
    [remap evil-delete-line]
    [remap evil-delete-marks]
    [remap evil-delete-whole-line]
    [remap evil-delete]
    [remap evil-join-space]
    [remap evil-join]
    [remap evil-org-delete-backward-char]
    [remap evil-org-delete-char]
    [remap evil-org-delete]
    [remap kill-line]
    [remap kill-paragraph]
    [remap kill-rectangle]
    [remap kill-region]
    [remap kill-ring-save]
    [remap kill-sentence]
    [remap kill-visual-line]
    [remap kill-whole-line]
    [remap kill-word]
    [remap my/backward-kill-line]
    [remap org-delete-backward-char]
    [remap org-delete-char]
    [remap org-delete-indentation]
    [remap org-delete-property-globally]
    [remap org-delete-property]
    [remap undo])
  (evil-define-key 'insert org-mode-map (kbd "C-k") 'ignore)
  (evil-define-key 'insert org-mode-map (kbd "DEL") 'ignore)
  (message " insert only"))
#+END_SRC
****** My Edit Mode
#+BEGIN_SRC emacs-lisp
(defun my/write-edit-mode ()
  (interactive)
  (general-unbind '(org-mode-map evil-org-mode-map)
    :with nil
    [remap undo-fu-only-redo]
    [remap undo-fu-only-undo]
    [remap evil-delete-backward-word]
    [remap evil-org-open-below]
    [remap evil-org-open-above]
    [remap delete-backward-char]
    [remap delete-char]
    [remap evil-change-line]
    [remap evil-change-to-initial-state]
    [remap evil-change-to-previous-state]
    [remap evil-change-whole-line]
    [remap evil-change]
    [remap evil-delete-backward-char-and-join]
    [remap evil-delete-backward-char]
    [remap evil-delete-buffer]
    [remap evil-delete-char]
    [remap evil-delete-line]
    [remap evil-delete-marks]
    [remap evil-delete-whole-line]
    [remap evil-delete]
    [remap evil-join-space]
    [remap evil-join]
    [remap evil-org-delete-backward-char]
    [remap evil-org-delete-char]
    [remap evil-org-delete]
    [remap kill-line]
    [remap kill-paragraph]
    [remap kill-rectangle]
    [remap kill-region]
    [remap kill-ring-save]
    [remap kill-sentence]
    [remap kill-visual-line]
    [remap kill-whole-line]
    [remap kill-word]
    [remap my/backward-kill-line]
    [remap org-delete-backward-char]
    [remap org-delete-char]
    [remap org-delete-indentation]
    [remap org-delete-property-globally]
    [remap org-delete-property]
    [remap undo])
  (evil-define-key 'insert org-mode-map (kbd "C-k") 'kill-visual-line)
  (evil-define-key 'insert org-mode-map (kbd "DEL") 'evil-delete-backward-char-and-join)
  (message " insert and edit"))
#+END_SRC
***** Prog
****** Company
******* Company Main
******** Company Tips
Company Ispell Portuguese fix: *set-buffer-file-coding-system* and chose *utf-8*.
******** Company Package

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer t
  :config
  (general-define-key
   :keymaps   'company-active-map
   "C-n"      'company-select-next
   "S-SPC" 'company-select-next
   "C-p"      'company-select-previous
   "C-j"      nil
   "C-k"      'company-abort
   "M--"      'my/company-comp-first-with-dash
   ;; "M-="      'my/company-comp-first-with-equal
   "M-q"      'my/company-comp-first
   "M-w"      'my/company-comp-first-with-paren
   "M-e"      'my/company-comp-with-paren
   "M-r"      'my/company-comp-with-dot
   "M-f"      'my/company-comp-first-with-square-bracket
   "M-j"      'my/company-comp-first-space
   "C-j"      'company-complete
   "<return>" 'company-complate
   "C-l"      nil
   "M-r"      'company-filter-candidates
   "RET"      nil
   "<escape>" 'company-abort
   ;; "<escape>" nil
   "<tab>"    'my/company-yasnippet
   "C-h"      'delete-backward-char

   "M-1"      'company-complete-number
   "M-2"      'company-complete-number
   "M-3"      'company-complete-number
   "M-4"      'company-complete-number
   "M-5"      'company-complete-number
   "M-6"      'company-complete-number
   "M-7"      'company-complete-number
   "M-8"      'company-complete-number
   "M-9"      'company-complete-number
   "M-0"      'company-complete-number

   "C-1"      'company-complete-number
   "C-2"      'company-complete-number
   "C-3"      'company-complete-number
   "C-4"      'company-complete-number
   "C-5"      'company-complete-number
   "C-6"      'company-complete-number
   "C-7"      'company-complete-number
   "C-8"      'company-complete-number
   "C-9"      'company-complete-number
   "C-0"      'company-complete-number
   "C-w"      'evil-delete-backward-word)

  (general-define-key
   :keymaps   'company-filter-map
   "C-n"      nil
   "C-p"      nil
   "M-q"      'company-complete
   "M-w"      'company-complete
   "M-e"      'company-complete
   "M-r"      'company-complete
   "M-d"      'company-complete
   "<return>" 'company-complete
   "RET"      'company-complete
   "<tab>"    'company-complete
   "<escape>" 'company-abort
   "C-h"      'delete-backward-char

   "M-1"      'company-complete-number
   "M-2"      'company-complete-number
   "M-3"      'company-complete-number
   "M-4"      'company-complete-number
   "M-5"      'company-complete-number
   "M-6"      'company-complete-number
   "M-7"      'company-complete-number
   "M-8"      'company-complete-number
   "M-9"      'company-complete-number
   "M-0"      'company-complete-number

   "C-1"      'company-complete-number
   "C-2"      'company-complete-number
   "C-3"      'company-complete-number
   "C-4"      'company-complete-number
   "C-5"      'company-complete-number
   "C-6"      'company-complete-number
   "C-7"      'company-complete-number
   "C-8"      'company-complete-number
   "C-9"      'company-complete-number
   "C-0"      'company-complete-number
   "C-w"      'evil-delete-backward-word)

  (general-imap
    :keymaps 'company-mode-map
    "S-SPC" 'company-complete
    "M-/" 'hippie-expand)

  (setq company-show-numbers t
        company-idle-delay 0.3
        company-tooltip-limit 10
        company-auto-complete nil
        company-auto-complete-chars '(46)
        company-dabbrev-other-buffers t
        company-selection-wrap-around t
        company-minimum-prefix-length 2
        company-dabbrev-code-everywhere nil
        company-dabbrev-downcase nil
        company-dabbrev-code-ignore-case t
        company-tooltip-align-annotations 't
        company-dabbrev-ignore-case 'keep-prefix
        company-begin-commands '(self-insert-command)
        company-dabbrev-ignore-buffers "\\`[ *]")

;;;; BACKENDS ;;;;

  (setq-default company-backends '(company-semantic
                                   company-clang
                                   company-cmake
                                   company-capf
                                   company-files
                                   (company-dabbrev-code company-keywords)
                                   company-dabbrev
                                   company-shell))

;;;; FUNCTIONS ;;;;

  (defun my/company-comp-space ()
    (interactive)
    (company-complete)
    (insert " "))

  (defun my/company-comp-first-space
      (interactive)
    (company-select-next)
    (company-complete)
    (insert " "))

  (defun my/company-comp-first-with-paren ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert "()")
    (backward-char))

  (defun my/company-comp-first-with-equal ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert "=")
    (company-complete))

  (defun my/company-comp-first-with-dash ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert "-")
    (company-complete))

  (defun my/company-comp-with-dot ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert ".")
    (company-complete))

  (defun my/company-comp-with-paren ()
    (interactive)
    (company-complete)
    (insert "()")
    (backward-char))

  (defun my/company-comp-first-with-square-bracket ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert "[\"\"]")
    (backward-char 2))

  (defun my/company-comp-with-square-bracket ()
    (interactive)
    (company-complete)
    (insert "[]")
    (backward-char))

  (defun my/company-comp-colon ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert ": "))

  (defun my/company-comp-colon-semicolon ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert ": ;")
    (backward-char))

  (defun my/company-comp-first ()
    (interactive)
    (company-select-next)
    (company-complete))

  (defun my/company-comp-first-space ()
    (interactive)
    (company-select-next)
    (company-complete)
    (insert " "))

  (defun my/company-comp-first-comint ()
    (interactive)
    (company-select-next)
    (company-complete)
    (comint-send-input))

  (defun my/company-comp-comint ()
    (interactive)
    (company-complete)
    (comint-send-input))

  (defun my/company-yasnippet ()
    (interactive)
    (company-abort)
    (yas-expand))

  (defun my/company-abort-tab ()
    (interactive)
    (company-abort)
    (forward-char))

;;;; TOGGLES ;;;;

  (defun my/company-show-options ()
    (interactive)
    (counsel-M-x "^my/company-idle-"))

  (defun my/company-show-delay ()
    (interactive)
    (describe-variable 'company-idle-delay))

  (defun my/company-show-prefix-length ()
    (interactive)
    (describe-variable 'company-minimum-prefix-length))

  (defun my/company-idle-zero-prefix-one ()
    (interactive)
    (setq-local company-idle-delay 0.0)
    (setq-local company-minimum-prefix-length 1)
    (message "idle delay: 0, minimun prefix length: 1"))

  (defun my/company-idle-zero-prefix-one-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.0)
    (setq-local company-minimum-prefix-length 1))

  (defun my/company-idle-zero-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.0)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0, minimun prefix length: 2"))

  (defun my/company-idle-zero-prefix-two-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.0)
    (setq-local company-minimum-prefix-length 2))

  (defun my/company-idle-one-prefix-one ()
    (interactive)
    (setq-local company-idle-delay 0.1)
    (setq-local company-minimum-prefix-length 1)
    (message "idle delay: 0.1, minimun prefix length: 1"))

  (defun my/company-idle-one-prefix-one-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.1)
    (setq-local company-minimum-prefix-length 1))

  (defun my/company-idle-one-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.1)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0.1, minimun prefix length: 2"))

  (defun my/company-idle-one-prefix-two-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.1)
    (setq-local company-minimum-prefix-length 2))

  (defun my/company-idle-two-prefix-one ()
    (interactive)
    (setq-local company-idle-delay 0.2)
    (setq-local company-minimum-prefix-length 1)
    (message "idle delay: 0.2, minimun prefix length: 1"))

  (defun my/company-idle-two-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.2)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0.2, minimun prefix length: 2"))

  (defun my/company-idle-two-prefix-two-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.2)
    (setq-local company-minimum-prefix-length 2))

  (defun my/company-idle-two-prefix-one-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.2)
    (setq-local company-minimum-prefix-length 1))

  (defun my/company-idle-three-prefix-one ()
    (interactive)
    (setq-local company-idle-delay 0.3)
    (setq-local company-minimum-prefix-length 1)
    (message "idle delay: 0.3, minimun prefix length: 1"))

  (defun my/company-idle-three-prefix-one-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.3)
    (setq-local company-minimum-prefix-length 1))

  (defun my/company-idle-three-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.3)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0.3, minimun prefix length: 2"))

  (defun my/company-idle-three-prefix-three-quiet ()
    (interactive)
    (setq-local company-idle-delay 0.3)
    (setq-local company-minimum-prefix-length 3))

  (defun my/company-idle-four-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.4)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0.4, minimun prefix length: 2"))

  (defun my/company-idle-four-prefix-two-silent ()
    (interactive)
    (setq-local company-idle-delay 0.4)
    (setq-local company-minimum-prefix-length 2))

  (defun my/company-idle-five-prefix-two ()
    (interactive)
    (setq-local company-idle-delay 0.5)
    (setq-local company-minimum-prefix-length 2)
    (message "idle delay: 0.5, minimun prefix length: 2"))

  (defun my/company-idle-five-prefix-two-silent ()
    (interactive)
    (setq-local company-idle-delay 0.5))

  (defun my/company-idle-five-prefix-three-silent ()
    (interactive)
    (setq-local company-idle-delay 0.5)
    (setq-local company-minimum-prefix-length 3))

  (defun my/company-idle-five-prefix-four ()
    (interactive)
    (setq-local company-idle-delay 0.5)
    (setq-local company-minimum-prefix-length 4)
    (message "idle delay: 0.5, minimun prefix length: 2"))

  (defun my/company-idle-five-prefix-four-silent ()
    (interactive)
    (setq-local company-idle-delay 0.5)
    (setq-local company-minimum-prefix-length 4))

  (defun my/company-idle-five-prefix-three ()
    (interactive)
    (setq-local company-idle-delay 0.5)
    (setq-local company-minimum-prefix-length 3)
    (message "idle delay: 0.5, minimun prefix length: 2")))
#+END_SRC

******* Company Others
******** company shell
#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :after company
  :ensure t
  :init
  (add-to-list 'company-backends 'company-shell t)
  (setq company-shell-modes '(sh-mode fish-mode shell-mode eshell-mode text-mode prog-mode lisp-interaction-mode markdown-mode))
  :config
  (setq company-shell-delete-duplicates t)
  (setq company-fish-shell-modes nil))
#+END_SRC
******** post it
#+BEGIN_SRC emacs-lisp
(use-package pos-tip
  :defer t
  :ensure t
  :config
  (setq pos-tip-border-width 3)
  (setq pos-tip-internal-border-width 3)
  (setq pos-tip-background-color "grey9")
  (setq pos-tip-foreground-color "yellow1"))
#+END_SRC
******* company-web
#+BEGIN_SRC emacs-lisp
(use-package company-web
  :after company
  :ensure t)
#+END_SRC
******* company-tern
#+BEGIN_SRC emacs-lisp
(use-package company-tern
  :after company
  :ensure t
  :config
  ;; (add-to-list 'company-backends 'company-tern)
  (setq company-tern-meta-as-single-line t))
#+END_SRC
****** Prescient
******* prescient
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :defer t
  :ensure t
  :config
  (prescient-persist-mode +1))
#+END_SRC

******* ivy-prescient
#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :after ivy
  :ensure t
  :config

  (setq ivy-prescient-sort-commands '(counsel-projectile-find-file-dwim
                                      counsel-projectile-find-file
                                      counsel-projectile-switch-to-buffer
                                      counsel-find-library
                                      counsel-find-file
                                      counsel-ag
                                      counsel-org-capture))

  ;; (setq ivy-prescient-sort-commands '(counsel-find-library))

  (ivy-prescient-mode +1))
#+END_SRC

******* company prescient
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after company
  :config
  (company-prescient-mode +1)
  (prescient-persist-mode +1))
#+END_SRC
****** Yasnippet
******* Yasnippet Main
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :defer nil
  ;; :init
  ;; (add-hook 'snippet-mode-hook (lambda () (super-save-mode -1)))
  :config
  (setq yas--default-user-snippets-dir "/home/jerry/.emacs.d/etc/yasnippet")
  ;; (yas-load-directory "/home/jerry/.emacs.d/etc/yasnippet")
  (setq yas-also-auto-indent-first-line t
        yas-indent-line 'auto
        yas-triggers-in-field nil)

  (defun my/yas-after-exit-hooks ()
    (interactive)
    (org-babel-execute-src-block)
    (org-babel-remove-result)
    (evil-force-normal-state))

  (defun my/company-yas-snippet ()
    (interactive)
    (company-abort)
    (evil-insert-state)
    (yas-expand))

  (general-unbind 'yas-keymap
    :with 'my/jump-out
    [remap kill-ring-save])

  (defun my/jump-out ()
    (interactive)
    (evil-append 1))

  (defun my/yas-load-other-window ()
    (interactive)
    (yas-load-snippet-buffer '## t)
    (other-window -1))

  (defun my/yas-load-other-kill-contents-other-window ()
    (interactive)
    (yas-load-snippet-buffer '## t)
    (other-window -1)
    (kill-buffer-contents)
    (evil-insert-state))

  (defun my/yas-before-hooks ()
    (interactive)
    (electric-operator-mode -1))

  (defun my/yas-after-hooks ()
    (interactive)
    (electric-operator-mode +1))

  (general-imap
    :keymaps 'yas-minor-mode-map
    "M-u" 'ivy-yasnippet)

  (general-nmap
    :keymaps 'yas-minor-mode-map
    "M-u" 'ivy-yasnippet)

  (general-unbind 'snippet-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (general-define-key
   :keymaps 'snippet-mode-map
   "<C-return>" 'yas-load-snippet-buffer-and-close
   "<M-return>" 'my/yas-load-other-window
   "<C-M-return>" 'my/yas-load-other-kill-contents-other-window
   "M-;" 'hydra-yasnippet/body)

  (general-imap
    :keymaps 'snippet-mode-map
    "M-;" 'hydra-yasnippet/body
    "DEL" 'evil-delete-backward-char-and-join)

  (yas-global-mode +1))
#+END_SRC
******* Yasnippet Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+END_SRC
******* Ivy Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet
  :after yasnippet)
#+END_SRC
****** Lisp
******* emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :init
  (add-hook 'lisp-mode-hook 'my/elisp-hooks)
  (add-hook 'emacs-lisp-mode-hook 'my/elisp-hooks)
  (add-hook 'lisp-interaction-mode 'my/elisp-hooks)
  :config

  (general-unbind 'lisp-interaction-mode-map
    :with 'evil-ex-nohighlight
    [remap save-buffer])

  (general-unbind 'emacs-lisp-mode-map
    :with 'my/goto-package-elisp-file
    [remap my/goto-package])

  (defun my/elisp-hooks ()
    (interactive)
    (evil-smartparens-mode -1)
    (lispy-mode +1)
    (lispyville-mode +1)
    (origami-mode -1)
    (hs-minor-mode +1)
    (electric-operator-mode -1))

  (defun my/eval-line-function ()
    (interactive)
    (save-excursion
      (eval-region
       (line-beginning-position)
       (line-end-position))
      (my/quiet-only-save-buffer)))

  (defun my/eval-line-function-and-show ()
    (interactive)
    (save-excursion
      (eval-region
       (line-beginning-position)
       (line-end-position))
      (beginning-of-visual-line)
      (forward-word)
      (forward-word)
      (my/quiet-only-save-buffer)
      (helpful-at-point))))
#+END_SRC
******* lispy
#+BEGIN_SRC emacs-lisp
(use-package lispy
  :config
  (setq lispy-safe-threshold 375)

  (defun my/lispy-kill ()
    (interactive)
    (lispy-kill)
    (evil-insert-state))

  (general-define-key
   :keymaps 'lispy-mode-map
   "C-:"     'helpful-variable
   "C-;" 'helpful-at-point
   )

  (general-define-key
   :keymaps 'lispy-mode-map
   :states '(normal visual)
   ";" 'evil-ex)

  (general-define-key
   :keymaps 'lispy-mode-map
   :states '(normal insert visual)
   "M-r"               'counsel-projectile-switch-to-buffer
   "M-s" 'last-buffer
   "C-:"     'helpful-variable
   "C-;" 'helpful-at-point
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward)

  (general-unbind 'lispy-mode-map
    :states '(insert)
    :with 'self-insert-command
    "["
    "]")

  (general-unbind 'lispy-mode-map
    :states '(insert)
    :with 'tab-to-tab-stop
    "M-i")

  (general-unbind 'lispy-mode-map
    :states '(normal visual insert)
    :with 'last-buffer
    "M-s")

  (general-unbind 'lispy-mode-map
    :with 'last-buffer
    [remap lispy-splice])

  (general-unbind 'lispy-mode-map
    :with 'indent-buffer
    [remap lispy-meta-return])

  (general-unbind 'lispy-mode-map
    :with 'eyebrowse-prev-window-config
    "M-q")

  (general-unbind 'lispy-mode-map
    :with 'org-edit-src-exit
    [remap lispy-mark-symbol])

  (general-unbind 'lispy-mode-map
    :states '(normal visual)
    :with 'org-edit-src-exit
    "<backspace>"))
#+END_SRC
******* lispyville
#+BEGIN_SRC emacs-lisp
(use-package lispyville
  :after lispy
  :config
  (general-define-key
   :keymaps 'lispyville-mode-map
   "C-M-h" 'lispyville-beginning-of-defun
   "C-M-l" 'lispyville-end-of-defun
   "C-M-k" 'lispy-up-slurp
   "C-M-j" 'lispy-down-slurp)

  (general-nmap
    :keymaps 'lispyville-mode-map
    "<" 'lispyville-barf
    ">" 'lispyville-slurp)

  (general-unbind 'lispyville-mode-map
    :with 'lispyville-comment-or-uncomment
    [remap evil-commentary])

  (general-unbind 'lispyville-mode-map
    :with 'evil-jump-backward
    [remap lispy-string-oneline])

  (with-eval-after-load 'lispyville
    (lispyville-set-key-theme
     '(operators
       c-w
       (escape insert)
       (additional-movement normal visual motion)))))
#+END_SRC
******* lisp-mode
#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\.cl\\'" . lisp-mode)))
#+END_SRC
******* parinfer
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :defer t
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             evil           ; If you use Evil.
             lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    ;; (add-hook 'clojure-mode-hook #'parinfer-mode)
    ;; (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    ;; (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    ;; (add-hook 'scheme-mode-hook #'parinfer-mode)
    ;; (add-hook 'lisp-mode-hook #'parinfer-mode)
    ))
#+END_SRC
******* paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :defer t)
#+END_SRC
******* racket mode
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :defer nil
    :init
    (add-to-list 'auto-mode-alist '("\\rkt\\'" . racket-mode))
    (add-hook 'racket-mode-hook 'my/racket-hooks)
    (add-hook 'racket-repl-mode-hook 'my/racket-repl-hooks)
    :config
    (advice-add 'racket-repl-switch-to-edit :after #'beacon-blink)
    (advice-add 'racket-repl :after #'beacon-blink)
    (advice-add 'racket-repl :after #'evil-insert-state)
    (advice-add 'racket-run-and-switch-to-repl :after #'evil-insert-state)

    (defun my/racket-delete-repl ()
      (interactive)
      (delete-windows-on "*Racket REPL*")
      (beacon-blink))

    (defun my/racket-hooks ()
      (interactive)
      (smartparens-mode +1)
      (smartparens-strict-mode +1)
      (racket-smart-open-bracket-mode +1)
      (my/company-idle-one-prefix-one-quiet))

    (defun my/racket-repl-hooks ()
      (interactive)
      (evil-smartparens-mode +1)
      (smartparens-mode +1)
      (smartparens-strict-mode +1)
      (hide-mode-line-mode +1)
      (racket-smart-open-bracket-mode +1)
      (tab-jump-out-mode +1)
      (company-mode +1)
      (my/company-idle-one-prefix-one-quiet))

    (general-define-key
     :keymaps 'racket-mode-map
     :states   '(normal visual)
     "RET" 'hydra-racket-mode/body)

    (general-define-key
     :keymaps 'racket-describe-mode-map
     "<escape>" 'delete-window
     "q" 'delete-window)

    (general-nvmap
      :keymaps 'racket-describe-mode-map
      "<escape>" 'delete-window)

    (general-define-key
     :keymaps 'racket-mode-map
     :states   '(normal visual insert)
     "C-k" 'my/lispy-kill
     "C-c l" 'racket-insert-lambda
     "C-c ESC" 'my/racket-delete-repl
     "<C-return>" 'racket-run-and-switch-to-repl
     "C-c RET" 'racket-run
     "C-;" 'racket-repl
     "C-/"   'racket-repl
     "<escape>"   'racket-repl)

    (general-define-key
     :keymaps 'racket-repl-mode-map
     :states   '(normal visual insert)
     "C-k" 'my/lispy-kill
     "C-c C-p" 'racket-cycle-paren-shapes
     "C-;" 'my/racket-delete-repl
     "<C-return>" 'my/racket-delete-repl
     "C-l" 'comint-clear-buffer
     "C-/"   'racket-repl-switch-to-edit)

    (general-define-key
     :keymaps 'racket-repl-mode-map
     :states   '(normal)
     "<escape>"   'racket-repl-switch-to-edit)

    (general-define-key
     :keymaps 'racket-mode-map
     :states   '(normal)
     "8" 'my/insert-*-space
     "*" 'my/insert-8
     "="   'my/insert-plus-space
     "-"   'my/insert-minus-space
     "9" 'my/racket-open-bracket)

    (defun my/racket-open-bracket ()
      (interactive)
      (evil-insert-state)
      (racket-smart-open-bracket))

    (defun my/insert-close-paren ()
      (interactive)
      (evil-insert-state)
      (insert ")"))

    (defun my/insert-9 ()
      (interactive)
      (evil-insert-state)
      (insert "9"))

    (defun my/insert-0 ()
      (interactive)
      (evil-insert-state)
      (insert "0"))

    (general-define-key
     :keymaps 'racket-mode-map
     :states   '(insert)
     "8" 'my/insert-*-space
     "*" 'my/insert-8
     "9" 'racket-smart-open-bracket
     "(" 'my/insert-9
     "0" 'my/insert-close-paren
     ")" 'my/insert-0
     "="   'my/insert-plus-space
     "-"   'my/insert-minus-space
     )

    (general-define-key
     :keymaps 'racket-repl-mode-map
     :states   '(insert)
     "<escape>" 'racket-repl-switch-to-edit
     "C-i" 'evil-normal-state
     "C-u" 'kill-whole-line
     "8" 'my/insert-*-space
     "*" 'my/insert-8
     "9" 'racket-smart-open-bracket
     "(" 'my/insert-9
     "0" 'my/insert-close-paren
     ")" 'my/insert-0
     "="   'my/insert-plus-space
     "-"   'my/insert-minus-space
     "C-n" 'comint-next-input
     "C-p" 'comint-previous-input))
#+END_SRC
****** haskell
******* haskell-mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :defer t
  :init
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC
****** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :init
  (eval-after-load 'flycheck
    '(flycheck-add-mode 'html-tidy 'html-mode))

  (eval-after-load 'flycheck
    '(flycheck-add-mode 'css-stylelint 'css-mode))
  ;; (add-hook 'flycheck-mode-hook 'flycheck-buffer)
  :ensure t
  :config

  (setq flycheck-mode-line nil
        flycheck-gcc-warnings nil
        flycheck-clang-warnings nil
        flycheck-display-errors-delay 0.3
        flycheck-idle-change-delay 0.3
        flycheck-clang-pedantic t
        flycheck-gcc-pedantic t))
#+END_SRC

****** Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :defer t
  :ensure nil
  :init
  (setq-default flymake-no-changes-timeout 0.2))
#+END_SRC
****** Tab Jump Out
#+BEGIN_SRC emacs-lisp
(use-package tab-jump-out
  :defer t
  :ensure t
  :config
  (tab-jump-out-mode t))
#+END_SRC

****** Elec Operator
#+BEGIN_SRC emacs-lisp
(use-package electric-operator
  :defer t
  :ensure t
  :config
  (electric-operator-add-rules-for-mode 'python-mode
                                        (cons "+" " + ")
                                        (cons "-" " - ")
                                        (cons "ndd" " and ")
                                        (cons "ntt" " not ")))
#+END_SRC
****** Aggresive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :defer t
  :ensure t
  :config
  (setq aggressive-indent-sit-for-time 0.05))
#+END_SRC
****** Elec Pair
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :defer t
  :config
  (electric-pair-mode +1))
#+END_SRC

****** Highlight
******* highlight numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :defer t
  :ensure t)
#+END_SRC
******* highlight operators
#+BEGIN_SRC emacs-lisp
(use-package highlight-operators
  :defer t
  :ensure t)
#+END_SRC
******* rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :ensure t)
#+END_SRC
******* highlightindent guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :defer t
  :ensure t)
#+END_SRC

****** Folding
******* origami
#+BEGIN_SRC emacs-lisp
(use-package origami
  :defer t
  :ensure t
  :config

  (general-nvmap
   :keymaps 'origami-mode-map
   "<tab>" 'origami-toggle-node)

  (setq origami-fold-replacement ".")

  )
  #+END_SRC
******* yafolding
#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :defer t)
  #+END_SRC
****** VC
******* Magit
******** Magit Main
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :init
  (add-hook 'magit-post-stage-hook 'my/magit-after-stage-hooks)
  :config
  (defun my/magit-stage-untracked ()
    (interactive)
    (progn
      (magit-status)
      (beginning-of-buffer)
      (magit-section-forward-sibling)
      (magit-stage)
      (magit-mode-bury-buffer)))

  (defun my/magit-stage-modified-and-commit ()
    (interactive)
    (progn
      (my/tangle-py-init.org-only-quiet)
      (let ((current-prefix-arg '(4))) (magit-stage-modified))
      (magit-commit-create)))

  (defun my/magit-stage-this-file-and-commit ()
    (interactive)
    (progn
      (my/tangle-this-file-quiet)
      (magit-stage-modified)
      (magit-commit-create)))



  (defun my/magit-after-stage-hooks ()
    (interactive)
    (message " staging complete"))

  (add-to-list 'magit-no-confirm 'stage-all-changes)

  (global-magit-file-mode +1))
#+END_SRC
******** With Editor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :defer t
  :ensure nil
  :init
  (add-hook 'with-editor-mode-hook #'my/with-editor-hooks)
  :config
  (defun my/with-editor-hooks ()
    (interactive)
    (my/prose-enable)
    (flyspell-mode -1)
    (evil-insert-state))

  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish)

  (general-unbind 'with-editor-mode-map
    :with 'with-editor-cancel
    [remap my/ex-noh]))
#+END_SRC
******** Evil Magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after magit)
#+END_SRC
******* Gitignore
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :defer t
  :init
  (add-hook 'gitignore-mode-hook 'my/prog-mode-hooks)
  :ensure t)
#+END_SRC

******* Git Timemachine
******** Keybindings
- p :: Visit previous historic version
- n :: Visit next historic version
- w :: Copy the abbreviated hash of the current historic version
- W :: Copy the full hash of the current historic version
- g :: Goto nth revision
- t :: Goto revision by selected commit message
- q :: Exit the time machine.
- b :: Run magit-blame on the currently visited revision (if magit available).
- c :: Show current commit using magit (if magit available).
- r :: Rollback (write-file).
******** How to rollback
Just use your normal `write-file` and supply the file name of your choice. Be aware that you might be throwing away local uncommitted changes to the file in question. If you don't want to use you muscle memory to write the file you can map `write-file` to something short and sweet in `git-timemachine-mode-map`
******** Package
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :defer t
  ;; :init
  ;; (add-hook 'git-timemachine-mode-hook 'hydra-git-timemachine/body)
  :config

  (general-define-key
   :states '(normal visual insert)
   :keymaps 'git-timemachine-mode-map
   "r" 'write-file)

  (general-unbind 'git-timemachine-mode-map
    :with 'git-timemachine-show-next-revision
    [remap evil-paste-pop-next])

  (general-unbind 'git-timemachine-mode-map
    :with 'git-timemachine-show-previous-revision
    [remap evil-paste-pop])

  (general-unbind 'git-timemachine-mode-map
    :with 'hydra-git-timemachine/body
    [remap org-open-at-point-global])

  (general-define-key
   :keymaps 'git-timemachine-mode-map
   "C-c s" 'git-timemachine-show-commit
   "C-c b" 'git-timemachine-switch-branch
   "C-c k" 'git-timemachine-kill-revision
   "C-c n" 'git-timemachine-show-nth-revision
   "C-c r" 'git-timemachine-show-current-revision))
#+END_SRC
******* Git Auto Commit
#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode
  :defer nil
  :config
  (setq-default gac-debounce-interval 600)
  (defun gac-commit (buffer)
    "Commit the current buffer's file to git."
    (shut-up
      (let* ((buffer-file (buffer-file-name buffer))
             (filename (convert-standard-filename
                        (file-name-nondirectory buffer-file)))
             (commit-msg (gac--commit-msg buffer-file))
             (default-directory (file-name-directory buffer-file)))
        (shell-command
         (concat "git add " (shell-quote-argument filename)
                 gac-shell-and
                 "git commit -m " (shell-quote-argument commit-msg)))))))
#+END_SRC
****** Misc
****** Quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :defer nil
  :init
  (add-hook 'quickrun--mode-hook   'my/quickrun-hooks)

  :config
  (defun my/quickrun-hooks ()
    (interactive)
    (hide-mode-line-mode +1)
    (rainbow-delimiters-mode +1))

  (defun my/quickrun-quit ()
    (interactive)
    (quit-window)
    (my/recenter-window)
    ;; (my/evil-bottom)
    (redraw-display))

  (general-nvmap
    :keymaps 'quickrun--mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward
    "i" 'my/quickrun-quit
    "<C-return>" 'my/quickrun-quit
    "RET" 'my/quickrun-quit
    ";" 'my/quickrun-quit)

  (general-nmap
    :keymaps 'quickrun--mode-map
    "<escape>" 'my/quickrun-quit
    "RET" 'my/quickrun-quit)

  (defun my/quickrun ()
    (interactive)
    (save-buffer)
    (quickrun))

  (general-unbind 'quickrun--mode-map
    :with 'my/quickrun-quit
    [remap my/quiet-save-buffer])

  (general-unbind 'compilation-mode-map
    :with 'my/quickrun-quit
    [remap my/quiet-save-buffer]))
#+END_SRC
****** Smart Hungry Delete
#+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :defer t
  :ensure t
  :config
  (general-nvmap
    :keymaps 'override
    "X" 'smart-hungry-delete-forward-char)
  (smart-hungry-delete-add-default-hooks))
#+END_SRC
****** Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer t
  :ensure t
  :config
  (defun my/dumb-jump-go ()
    (interactive)
    (save-buffer)
    (dumb-jump-go))
  (setq dumb-jump-quiet 't
        dumb-jump-aggressive 't
        dumb-jump-selector 'ivy))
#+END_SRC
****** Evil Smartparens
#+BEGIN_SRC emacs-lisp
(use-package evil-smartparens
  :after evil
  :config
  (general-unbind 'evil-smartparens-mode-map
    :with 'exchange-point-and-mark
    [remap evil-sp-override]))
#+END_SRC
****** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode +1))
#+END_SRC
****** Vimrc
#+BEGIN_SRC emacs-lisp
(use-package vimrc-mode
  :defer t
  :ensure t
  :init
  (add-hook 'vimrc-mode-hook 'my/disable-evil-smartparens)
  (add-to-list 'auto-mode-alist '("\\.vim\\'" . vimrc-mode))
  :config
  (defun my/disable-evil-smartparens ()
    (interactive)
    (evil-smartparens-mode -1)))
#+END_SRC
****** Web
******* JS
******** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :init
  (add-hook 'js2-mode-hook #'my/js2-hooks)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  :config

  (add-to-list 'company-backends 'company-tern)

  (defun my/semicolon-newline ()
    (interactive)
    (insert ";\n"))

  (general-imap
    :keymaps   'js2-mode-map
    ";" 'my/semicolon-newline)

  (general-nvmap
    :keymaps   'js2-mode-map
    "<return>" 'hydra-js2-refactor/body)

  (defun my/js2-hooks ()
    (shut-up
      (electric-pair-local-mode +1)
      (origami-mode +1)
      (hs-minor-mode -1)
      (js2-refactor-mode)
      (electric-operator-mode +1)
      ;; (toggle-truncate-lines +1)
      (evil-swap-keys-swap-double-single-quotes)
      (setq-local company-backends '(company-tern
                                     company-semantic
                                     company-clang
                                     company-cmake
                                     company-capf
                                     company-files
                                     (company-dabbrev-code
                                      company-gtags
                                      company-etags
                                      company-keywords)
                                     company-dabbrev
                                     company-shell))

      ;; (my/company-idle-one-prefix-two-quiet)
      (tern-mode +1)
      )))

#+END_SRC
******** js2-refactor
#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
  :after js2
  :config
  (general-define-key
   :keymaps 'js2-refactor-mode-map
   :states '(normal visual insert)
   "C-k" 'js2r-kill))
#+END_SRC
******** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t
  :ensure t)
#+END_SRC
******* CSS Mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'css-mode-hook 'my/css-mode-hooks)

  :config

  (general-define-key
   :keymaps 'css-mode-map
   :states '(normal visual insert)
   "<C-return>" 'counsel-css)

  (general-nvmap
    :keymaps 'css-mode-map
    "<M-return>" 'indent-buffer
    "<return>" 'hydra-css-mode/body)

  (general-imap
    :keymaps 'css-mode-map
    "<M-return>" 'indent-buffer)

  (defun my/css-mode-hooks ()
    (interactive)
    (hl-line-mode -1)
    (emmet-mode +1)
    (flycheck-mode +1)
    (electric-pair-local-mode +1)
    (electric-operator-mode +1)
    (hs-minor-mode -1)
    (evil-smartparens-mode +1)
    (impatient-mode +1)
    (highlight-indentation-mode +1)
    (evil-swap-keys-swap-double-single-quotes)
    (setq web-mode-indent-style 1)
    (origami-mode +1)
    (git-auto-commit-mode +1)
    (toggle-truncate-lines +1)
    (aggressive-indent-mode +1)
    (my/company-idle-one-prefix-one-quiet)
    ;; (setq-local company-backends '((company-css
    ;;                                 company-web-html
    ;;                                 company-files)
    ;;                                (company-semantic
    ;;                                 company-capf
    ;;                                 company-dabbrev-code
    ;;                                 company-keywords
    ;;                                 company-dabbrev
    ;;                                 company-shell)))
    ))
#+END_SRC

******* Emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :defer t
  :ensure t
  :config

  (setq emmet-insert-flash-time 0.1)
  (setq emmet-move-cursor-between-quotes t)

  (general-define-key
   :keymaps 'emmet-mode-keymap
   "C-S-p" 'my/emmet-prev
   "C-S-n" 'my/emmet-next)

  (defun my/emmet-prev ()
    (interactive)
    (emmet-prev-edit-point 1)
    (evil-insert-state))

  (defun my/emmet-next ()
    (interactive)
    (emmet-next-edit-point 1)
    (evil-insert-state))

  (emmet-mode +1))
#+END_SRC
******* Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :ensure t
  :init
  (add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
  (add-hook 'web-mode-hook 'my/web-mode-hooks)

  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))

  :config

  (setq web-mode-enable-current-column-highlight t
        web-mode-enable-current-element-highlight t
        web-mode-markup-indent-offset 4)

  (defun my/web-mode-hooks ()
    (interactive)
    (shut-up
      (progn
        (emmet-mode +1)
        (flycheck-mode +1)
        (electric-pair-local-mode +1)
        (hs-minor-mode -1)
        (evil-smartparens-mode +1)
        ;; (impatient-mode +1)
        (highlight-indentation-mode +1)
        (evil-swap-keys-swap-double-single-quotes)
        (setq web-mode-indent-style 1)
        (setq truncate-lines t)
        (origami-mode +1)
        (git-auto-commit-mode +1)
        (aggressive-indent-mode +1)
        (setq-local company-backends '((company-files
                                        company-web-html
                                        company-css
                                        company-bootstrap
                                        )
                                       (company-semantic
                                        company-capf
                                        company-dabbrev-code
                                        company-keywords
                                        company-dabbrev
                                        company-shell)))
        (my/company-idle-one-prefix-one-quiet)
        (toggle-truncate-lines))))
  (general-create-definer leader
    :prefix "SPC")
  (leader
    :states '(normal)
    :keymaps 'web-mode-map
    "n" 'my/narrow-to-tag-macro)

  (general-nvmap
    :keymaps 'web-mode-map
    "zo" 'origami-recursively-toggle-node
    "g3" 'evilmi-jump-items
    "<return>" 'hydra-web-mode/body
    "<M-return>" 'indent-buffer
    "ge" 'evil-end-of-line
    "gl" 'web-mode-element-next
    "gh" 'web-mode-element-previous
    "gj" 'web-mode-element-sibling-next
    "gk" 'web-mode-element-sibling-previous)

  (general-define-key
   :keymaps 'web-mode-map
   :states '(normal visual insert)
   "C-c b" 'my/narrow-html-section-macro
   "<S-tab>" 'origami-recursively-toggle-node
   "C-k" 'web-mode-attribute-kill
   "M-e" 'web-mode-element-next
   "M-a" 'web-mode-element-previous
   "C-/" 'web-mode-tag-next
   "C-;" 'web-mode-tag-previous
   "M-t" 'web-mode-attribute-next
   "C-t" 'web-mode-attribute-previous
   "<M-return>" 'indent-buffer
   "<C-return>" 'counsel-css
   "<C-M-return>" 'browse-url-of-file)

  (defun my/set-web-theme ()
    (interactive)
    (disable-theme 'noctilux)
    (load-theme 'doom-dracula))

  (general-unbind 'web-mode-map
    :with 'my/clear-html-macro
    [remap web-mode-comment-indent-new-line])

  (general-unbind 'web-mode-map
    :with 'origami-close-all-nodes
    [remap evil-close-folds])

  (general-unbind 'web-mode-map
    :with 'origami-open-all-nodes
    [remap outline-show-all])

  (defun my/erase-buffer-yank ()
    (interactive)
    (erase-buffer)
    ;; (insert "!")
    ;; (emmet-expand-line nil)
    (yank nil)
    (evil-window-middle))

  (defun web-mode-buffer-indent ()
    "Indent all buffer."
    (interactive)
    (indent-region (point-min) (point-max))
    (delete-trailing-whitespace)))
#+END_SRC

******* Web Beautify
#+BEGIN_SRC emacs-lisp
(use-package web-beautify
  :after web-mode
  :config
  ;; (setq web-beautify-args '("-f" "-" "--indent-size 2" "--indent-inner-html" "--indent-empty-lines" "--quiet"))
  (setq web-beautify-args '("-f" "-" "--quiet"))
  (defun my/web-beautify-html ()
    (interactive)
    (let ((inhibit-message t))
      (web-beautify-html)
      (indent-buffer)
      (save-buffer)))

  )
#+END_SRC
******* company-bootstrap
#+BEGIN_SRC emacs-lisp
(use-package company-bootstrap
  :defer t
  :load-path "~/.emacs.d/etc/custom_lisp/company-bootstrap/")
#+END_SRC
******* impatient mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :defer t
  :config
  (setq impatient-mode-delay 0.5)
  ;; (httpd-start)
  )
#+END_SRC
****** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :defer t
  :init
  (add-hook 'csv-mode-hook 'my/prog-mode-hooks)
  (add-hook 'csv-mode-hook 'auto-revert-mode))
#+END_SRC
****** Python
******* elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
  (add-hook 'elpy-mode-hook 'my/elpy-hooks)
  :config
  ;; (setq elpy-rpc-python-command "python3")
  ;; (setq highlight-indentation-blank-lines 't)
  ;; (setq elpy-rpc-python-command "/home/jerry/.pyenv/shims/python3.8")
  (setq elpy-autodoc-delay 3)
  (setq elpy-rpc-virtualenv-path 'current)
  (general-unbind 'normal elpy-mode-map
    :with 'yafolding-toggle-element
    [remap elpy-folding-toggle-at-point])

  (defun my/elpy-hooks ()
    (interactive)
    (my/disable-eldoc)
    (pyenv-mode +1))

  (defun my/disable-eldoc ()
    (interactive)
    (eldoc-mode -1))

  (defun elpy-goto-definition ()
    (interactive)
    (elpy-rpc-warn-if-jedi-not-available)
    (let ((location (elpy-rpc-get-definition)))
      (if location
          (elpy-goto-location (car location) (cadr location))
        (error "No definition found")))
    (save-excursion
      (evil-scroll-line-to-center 1)))

  (general-define-key
   :keymaps 'elpy-mode-map
   "C-c d" 'elpy-doc)

  (defun my/elpy-switch-to-buffer ()
    (interactive)
    (elpy-shell-switch-to-buffer)
    (quit-windows-on "*Python*")))
#+END_SRC
******* pyenv
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode
  :defer t)
#+END_SRC
******* jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :after python)
#+END_SRC
******* python
#+BEGIN_SRC emacs-lisp
(use-package python
  :defer t
  :ensure nil
  :init
  (add-hook 'python-mode-hook 'my/python-hooks)
  ;; https://stackoverflow.com/a/6141681
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'write-contents-functions (lambda() (elpy-black-fix-code)) nil t)))

  :config
  (font-lock-add-keywords 'python-mode
                          '(("cls" . font-lock-keyword-face)))
  (setq python-shell-interpreter "python3")
  (setq python-shell-interpreter-args "-i -q")

  (setq python-shell-completion-native-enable nil)

  (defun my/python-hooks ()
    (interactive)
    (electric-operator-mode +1)
    (flycheck-mode +1)
    (origami-mode -1)
    (yafolding-mode +1)
    (rainbow-delimiters-mode +1)
    (highlight-operators-mode +1)
    (evil-swap-keys-swap-double-single-quotes)
    (evil-swap-keys-swap-colon-semicolon)
    (evil-swap-keys-swap-underscore-dash)
    (evil-swap-keys-swap-square-curly-brackets)
    (smartparens-strict-mode +1)
    (git-auto-commit-mode +1)
    (my/company-idle-one-prefix-one-quiet)
    (highlight-numbers-mode +1)
    ;; (anaconda-mode +1)
    ;; (hs-minor-mode +1)
    ;; (pyenv-mode +1)
    (importmagic-mode +1)
    (blacken-mode +1)
    (elpy-enable +1)
    (flymake-mode -1))

  ;; (setq-local company-backends '(company-jedi
  ;;                                company-dabbrev-code
  ;;                                company-files
  ;;                                (company-semantic
  ;;                                 company-capf
  ;;                                 company-keywords
  ;;                                 company-dabbrev
  ;;                                 company-shell)))

  (defun my/olivetti-narrow ()
    (interactive)
    (olivetti-mode +1)
    (setq-local olivetti-body-width 60))

  (defun my/inferior-python-mode-hooks ()
    (interactive)
    (line-numbers)
    (subword-mode 1)
    (electric-operator-mode)
    (company-mode )
    ;; (my/company-idle-one-prefix-one-quiet)
    (evil-swap-keys-swap-double-single-quotes)
    (evil-swap-keys-swap-colon-semicolon))

  ;; PYTHON KEYS ;;
  (defun my/insert-paren ()
    (interactive)
    (evil-insert-state)
    (insert "()")
    (backward-char 1))

  (general-define-key
   :keymaps 'inferior-python-mode-map
   "M-e" 'counsel-shell-history
   "C-c j" 'my/evil-shell-bottom
   "C-c u" 'universal-argument
   "C-u" 'comint-kill-input
   "C-l" 'comint-clear-buffer
   "C-;" 'my/elpy-switch-to-buffer
   "C-n" 'comint-next-input
   "C-p" 'comint-previous-input)

  (general-unbind 'inferior-python-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer]
    [remap evil-normal-state])

  (general-unbind 'python-mode-map
    :with 'elpy-folding-toggle-at-point
    [remap hs-toggle-hiding])

  (general-define-key
   :keymaps 'python-mode-map
   "M-a" 'python-nav-backward-statement
   "M-e" 'python-nav-forward-statement
   "C-S-p" 'python-nav-backward-sexp
   "C-S-n" 'python-nav-forward-sexp
   "C-x o" 'my/olivetti-narrow
   "C-x m" 'elpy-multiedit-python-symbol-at-point
   "C-x M" 'elpy-multiedit-stop
   "C-c g" 'my/counsel-ag-python
   "M-m" 'blacken-buffer
   "C-c p" 'my/python-make-print
   "C-c f" 'my/python-make-fstring
   "C-c DEL" 'my/erase-python-file
   "C-c =" 'my/erase-python-file-and-yank
   )

  (general-unbind 'python-mode-map
    :with 'my/python-save-buffer
    [remap my/quiet-save-buffer])

  (general-unbind 'python-mode-map
    :with 'yafolding-hide-all
    [remap evil-close-folds])

  (general-nmap
    :keymaps 'python-mode-map
    "<escape>" 'save-buffer)

  (general-nvmap
    :keymaps 'python-mode-map
    "M-a" 'python-nav-backward-statement
    "M-e" 'python-nav-forward-statement
    "C-S-p" 'python-nav-backward-sexp
    "C-S-n" 'python-nav-forward-sexp
    "C-รง" 'my/python-newline-beg
    "zi" 'hs-show-all
    "<backspace>" 'org-edit-src-exit
    "<C-return>" 'my/quickrun
    "<tab>" 'elpy-folding-toggle-at-point
    "<tab>" 'elpy-folding-toggle-at-point
    "RET" 'hydra-python-mode/body
    "zm" 'evil-close-folds
    "gh" 'outline-up-heading
    "gl" 'outline-next-heading
    "zl" 'outline-show-subtree
    "<" 'python-indent-shift-left
    ">" 'python-indent-shift-right
    "gj" 'outline-forward-same-level
    "gk" 'outline-backward-same-level)

  (defun my/python-newline-beg ()
    (interactive)
    (evil-insert-state)
    (newline)
    (beginning-of-line))

  (defun my/python-colon-newline ()
    (interactive)
    (end-of-line)
    (insert ":")
    (newline-and-indent))

  (general-imap
    :keymaps 'python-mode-map
    "C-="   'my/python-colon-newline
    "C-รง" 'my/python-newline-beg
    "<C-return>" 'my/quickrun
    "C-h" 'python-indent-dedent-line-backspace
    "M-a" 'python-nav-backward-statement
    "M-e" 'python-nav-forward-statement
    "C-S-p" 'python-nav-backward-sexp
    "C-S-n" 'python-nav-forward-sexp
    )

  ;; PYTHON FUNCTIONS;;

  (defun execute-python-program ()
    (interactive)
    (my/window-to-register-91)
    (my/quiet-save-buffer)
    (defvar foo)
    (setq foo (concat "python3 " (buffer-file-name)))
    (other-window 1)
    (switch-to-buffer-other-window "*Async Shell Command*")
    (shell-command foo))

  (defun my/execute-python-program-shell-simple  ()
    (interactive)
    (my/window-to-register-91)
    (my/quiet-save-buffer)
    (defvar foo)
    (setq foo (concat "python3 " (prelude-copy-file-name-to-clipboard)))
    (shell-command foo))

  (defun my/ex-python-run ()
    (interactive)
    (evil-ex "w !python3"))

  (defun my/execute-python-program-shell ()
    (interactive)
    (progn
      (my/quiet-save-buffer)
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (sit-for 0.3)
      (insert "source ~/scripts/cline_scripts/smallprompt.sh")
      (comint-send-input)
      (insert "python3 ")
      (yank)
      (comint-send-input)
      (evil-insert-state)
      (sit-for 0.3)
      (comint-clear-buffer)
      (company-mode -1)))

  (general-unbind 'python-mode-map
    :with 'elpy-doc
    [remap helpful-at-point])

  (defun my/run-python-external ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (start-process-shell-command
       "call term" nil
       "~/scripts/i3_scripts/show_term_right")))

  (defun my/erase-python-file ()
    (interactive)
    (erase-buffer)
    (insert "#!/usr/bin/env python3\n\n")
    (evil-insert-state)
    (flycheck-clear))

  (defun my/erase-python-file-and-yank ()
    (interactive)
    (erase-buffer)
    (insert "#!/usr/bin/env python3\n\n")
    (yank))

  (defun my/kill-python-file ()
    (interactive)
    (kill-region (point-min) (point-max))
    (insert "#!/usr/bin/env python3\n\n")
    (evil-insert-state)
    (flycheck-clear))

  (defun my/python-save-buffer ()
    (interactive)
    (evil-ex-nohighlight)
    (let ((inhibit-message t))
      (delete-trailing-whitespace)
      (save-buffer)))

  ;; PYTHON SETTINGS

  (setq comment-auto-fill-only-comments t
        python-indent-offset 4
        python-indent-guess-indent-offset nil)

  (auto-fill-mode 1))
#+END_SRC

******* blacken
#+BEGIN_SRC emacs-lisp
(use-package blacken
  ;; :pin melpa-stable
  :defer t
  :config
  (setq blacken-fast-unsafe nil)
  (setq blacken-line-length 79))
#+END_SRC
******* importmagic
#+BEGIN_SRC emacs-lisp
(use-package importmagic
  :after python
  :config
  (setq importmagic-be-quiet t)
  (remove-hook 'python-mode-hook 'importmagic-mode))
#+END_SRC
******* anaconda-mode
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure nil
  :after python)
#+END_SRC
******* company-jedi
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :after python
  :init
  (add-to-list 'company-backends 'company-jedi)
  :ensure t)
#+END_SRC
******* py-autopep8
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :after python
  :ensure t)
#+END_SRC
******* live-py-mode
#+BEGIN_SRC emacs-lisp
(use-package live-py-mode
  :defer t
  :ensure t
  :config
  (setq live-py-update-all-delay 1))
#+END_SRC
****** Projectile
******* Projectile Main
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer t
  :init
  (defvaralias 'projectile-globally-ignored-buffers 'nswbuff-exclude-buffer-regexps)
  :config
  ;;;; SETTINGS ;;;;
  (setq projectile-globally-ignored-directories '(".hg"
                                                  ".git"
                                                  ".old"
                                                  ".bzr"
                                                  ".tox"
                                                  ".svn"
                                                  ".idea"
                                                  "~/.e/"
                                                  "~/org"
                                                  ".eunit"
                                                  "_darcs"
                                                  "~/maps"
                                                  "~/.fzf/"
                                                  "~/.tmux/"
                                                  "_FOSSIL_"
                                                  "~/.pyenv/"
                                                  "~/.irssi/"
                                                  ".fslckout"
                                                  "~/scripts/"
                                                  "~/.config/"
                                                  "~/dotfiles"
                                                  "~/.emacs.d"
                                                  "~/.emacs.d/"
                                                  ".stack-work"
                                                  ".ensime_cache"
                                                  "~/Studying/UFBA"
                                                  "~/.emacs.d/quelpa"
                                                  "~/.emacs_anywhere/"
                                                  "~/.PyCharmCE2019.1/"
                                                  "*PyCharmCE2019*"
                                                  "~/maps/.emacs_anywhere"
                                                  "/home/dotfiles/.emacs.d/"
                                                  "~/Studying/Unifacs/Segundo_Semestre"))

  (setq projectile-enable-caching 't)
  (setq projectile-mode-line-prefix " <p>")
  (setq projectile-mode-line-function
        '(lambda () (format " <p> [%s]" (projectile-project-name))))

;;;; FUNCTIONS ;;;;

  (defun my/projectile-ranger ()
    "Open `ranger' at the root of the project."
    (interactive)
    (ranger (projectile-ensure-project (projectile-project-root))))

  (defun my/counsel-projectile-commands ()
    (interactive)
    (counsel-M-x "^counsel-projectile "))

  (defun my/projectile-show-commands ()
    (interactive)
    (counsel-M-x "^projectile- "))

;;;; KEYBINDINGS ;;;;

  (general-define-key
   :keymaps 'projectile-command-map
   "ESC" 'keyboard-quit
   "TAB" 'projectile-project-buffers-other-buffer)

  ;; (general-nvmap
  ;;   :keymaps 'override
  ;;   "M-r" 'counsel-projectile-switch-to-buffer)

  )
#+END_SRC
******* Counsel Projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :defer nil
  :config
  (counsel-projectile-mode 1))
#+END_SRC
****** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :defer t)
#+END_SRC
****** racket
******* geiser
#+BEGIN_SRC emacs-lisp
(use-package geiser
  :defer t
  :ensure nil
  :init
  (add-hook 'geiser-repl-mode-hook 'hide-mode-line-mode)
  :config

  (defun my/geiser-delete-window ()
    (interactive)
    (delete-window)
    (beacon-blink))

  (defun my/geiser-switch-to-repl ()
    (interactive)
    (geiser-mode-switch-to-repl nil)
    (evil-insert-state)
    (beacon-blink))

  (defun my/geiser-switch-to-repl-and-enter ()
    (interactive)
    (geiser-mode-switch-to-repl-and-enter)
    (evil-insert-state)
    (beacon-blink))

  (general-define-key
   :keymaps 'geiser-mode-map
   :states   '(normal visual insert)
   "<C-return>" 'my/geiser-switch-to-repl-and-enter
   "C-;" 'my/geiser-switch-to-repl
   "C-/"   'my/geiser-switch-to-repl
   )

  (general-define-key
   :keymaps 'geiser-repl-mode-map
   :states   '(normal visual insert)
   "C-;" 'my/geiser-delete-window
   "<C-return>" 'my/geiser-delete-window
   "C-l" 'comint-clear-buffer
   "C-/"   'my/other-window)

  (general-define-key
   :keymaps 'geiser-repl-mode-map
   :states   '(normal visual)
   "<escape>" 'my/geiser-delete-window))
#+END_SRC
******* quack
#+BEGIN_SRC emacs-lisp
(use-package quack
  :after racket-mode)
#+END_SRC
****** xmodmap-mode
#+BEGIN_SRC emacs-lisp
(define-generic-mode 'xmodmap-mode
  '(?!)
  '("add" "clear" "keycode" "keysym" "pointer" "remove")
  nil
  '("[xX]modmap\\(rc\\)?\\'")
  nil
  "Simple mode for xmodmap files.")
(add-to-list 'auto-mode-alist '("\\xmodmaps?\\'" . xmodmap-mode))
#+END_SRC
***** pomidor
| Key   | Description          |
|-------+----------------------|
| Enter | Start new pomodoro.  |
| Space | Start a break.       |
| R     | Resets the timer.    |
| q     | Quit pomidor buffer. |
| Q     | Turns off pomidor.   |

https://github.com/TatriX/pomidor/
#+BEGIN_SRC emacs-lisp
(use-package pomidor
  :bind (("<f9>" . pomidor))
  :config (setq pomidor-sound-tick nil
                pomidor-sound-tack nil)

  ;; To change timer duration:
  ;; (setq pomidor-seconds (* 25 60)) ; 25 minutes for the work period
  ;; (setq pomidor-break-seconds (* 5 60)) ; 5 minutes break time

  (general-unbind 'pomidor-mode-map
    :with 'quit-window
    [remap pomidor]
    [remap minibuffer-keyboard-quit])

  :hook (pomidor-mode . (lambda ()
                          (display-line-numbers-mode -1) ; Emacs 26.1+
                          (setq left-fringe-width 0 right-fringe-width 0)
                          (setq left-margin-width 2 right-margin-width 0)
                          ;; force fringe update
                          (set-window-buffer nil (current-buffer)))))
#+END_SRC
**** Super Save
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :demand t
  :config
  (setq super-save-exclude '("\\.py" "+new-snippet+"))
  (setq-default super-save-exclude '("\\.py" "+new-snippet+"))

  (setq auto-save-default nil
        super-save-idle-duration 0.5
        super-save-auto-save-when-idle t
        auto-save-file-name-transforms `((".*" "~/.emacs.d/var/temp" t)))

  (setq super-save-hook-triggers '(mouse-leave-buffer-hook focus-out-hook))

  (setq super-save-triggers
        '(
          undo
          quickrun
          last-buffer
          windmove-up
          windmove-down
          windmove-left
          windmove-right
          balance-windows
          switch-to-buffer
          eyebrowse-close-window-config
          eyebrowse-create-window-config
          eyebrowse-next-window-config
          eyebrowse-prev-window-config
          eyebrowse-switch-to-window-config-1
          eyebrowse-switch-to-window-config-2
          eyebrowse-switch-to-window-config-3
          eyebrowse-switch-to-window-config-4
          eyebrowse-switch-to-window-config-5
          eyebrowse-switch-to-window-config-6
          eyebrowse-switch-to-window-config-7
          eyebrowse-switch-to-window-config-8
          eyebrowse-switch-to-window-config-9))

  (auto-save-mode -1)
  (super-save-mode +1))
#+END_SRC
**** N1
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:47
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_CATEGORY: init
:END:
***** Search
****** Engine
#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :config
  (defun engine/search-prompt (engine-name default-word)
    (if (string= default-word "")
        (format "Search %s: " (capitalize engine-name))
      (format "Search %s (%s): " (capitalize engine-name) default-word)))

  (defadvice browse-url (after browse-url-after activate) (my/focus-chrome-delayed))
  ;; (advice-remove 'browse-url 'my/focus-chrome-delayed)

  (defengine Google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine Python-3
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=Python 3 %s")

  ;; (defengine Python-3-docs
  ;;   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=Python 3.8 documentation %s")

  (defengine Python-3-docs
    "https://docs.python.org/3/search.html?q= %s")

  (defengine google-bootstrap
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=bootstrap 4 %s")

  (defengine google-flexbox
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=flexbox %s")

  (defengine google-css
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=css %s")

  (defengine google-css-grid
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=css grid %s")

  (defengine devdocs-io
    "https://devdocs.io/#q=%s")
  (defengine emacs-wiki
    "https://duckduckgo.com/?q=%s site:emacswiki.org")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")
  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")
  (defengine reddit
    "https://old.reddit.com/search?q=%s")

  (defengine dic-informal
    "https://www.dicionarioinformal.com.br/sinonimos/%s")

  (defun my/engine-search-dic-informal ()
    (interactive)
    (engine/search-dic-informal (current-word)))

  (defengine michaelis
    "https://michaelis.uol.com.br/moderno-portugues/busca/portugues-brasileiro/%s")

  (defun my/engine-search-michaealis ()
    (interactive)
    (engine/search-michaelis (current-word)))

  (defengine asimov-wikia
    "http://asimov.wikia.com/wiki/Special:Search?query=%s")
  (defengine wiki-en
    "https://en.wikipedia.org/wiki/%s")
  (defengine wiki-pt
    "https://pt.wikipedia.org/wiki/%s")
  (defengine plato
    "https://plato.stanford.edu/search/searcher.py?query=%s")
  (defengine translate
    "https://translate.google.com/?source=osdd#view=home&op=translate&sl=auto&tl=pt&text=%s")

  (defengine urban-dictionary
    "https://www.urbandictionary.com/define.php?term=%s")

  (defun my/engine-urban-dict ()
    (interactive)
    (engine/search-urban-dictionary (current-word)))

  (defengine the-free-dictionary
    "https://www.thefreedictionary.com/%s")

  (defengine MDN
    "https://developer.mozilla.org/en-US/search?q=%s")
  (engine-mode t))
#+END_SRC
****** Google Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :defer t
  :config
  (setq google-translate-pop-up-buffer-set-focus 't
        google-translate-default-source-language "en"
        google-translate-default-target-language "pt"))
#+END_SRC
***** Hydra
****** hydra main
#+BEGIN_SRC emacs-lisp
(use-package hydra
:ensure t
:config

(general-define-key
:keymaps 'override
"M-;" 'hydra-yasnippet/body
"<f1>" 'hydra-help/body)

(general-unbind 'hydra-base-map
"0" "1" "2" "3" "4" "5" "6" "7" "8" "9")
(setq hydra-amaranth-warn-message " *amaranth hydra*"))
#+END_SRC
****** hydras
******* Programming
******** python
#+BEGIN_SRC emacs-lisp
(defhydra hydra-python-mode (:color blue :hint nil :foreign-keys run)
  "
    ^
    ^Python^
    ^^^^^-----------------------------------------
    _r_: run term    _c_: copy eror  _B_: pdb
    _s_: quickshell  _d_: goto def   _a_: scratch
    _P_: prev error  _b_: go back    _o_: doc
    _n_: next error  _D_: docs       _l_: lorem

"

  ("<escape>" nil)
  ("q" nil)

  ("r" my/run-on-terminal)
  ("s" quickrun-shell)
  ("P" flymake-goto-prev-error)
  ("n" flymake-goto-next-error)

  ("c" flycheck-copy-errors-as-kill)

  ;; ("d" my/dumb-jump-go)
  ;; ("RET" my/dumb-jump-go)
  ;; ("b" dumb-jump-back)
  ;; ("<C-return>" dumb-jump-back)

  ("d" elpy-goto-definition)
  ("RET" elpy-goto-definition)
  ("b" pop-tag-mark)
  ("<C-return>" dumb-jump-back)


  ("g" engine/search-python-3)
  ("D" engine/search-python-3-docs)
  ("B" my/pdb)
  ("a" my/goto-python-scratch)
  ("o" elpy-doc)
  ("l" lorem-ipsum-insert-sentences))
#+END_SRC

******** racket
#+BEGIN_SRC emacs-lisp
(defhydra hydra-racket-mode (:color blue :hint nil :foreign-keys run)
  "
    ^
    ^Racket^
    ^^^--------------------------
    _d_...doc       _g_..goto def
    _e_...describe  _m_..goto module
    _s_...send sexp _b_..go back
    _RET_.eval sexp

"
  ("<escape>" nil)

  ("q" nil)
  ("d" racket-doc)
  ("e" racket-describe)
  ("RET" racket-eval-last-sexp)
  ("v" racket-eval-last-sexp)
  ("s" racket-send-last-sexp)
  ("g" racket-visit-definition)
  ("m" racket-visit-module)
  ("b" racket-unvisit))
#+END_SRC

******** prog
#+BEGIN_SRC emacs-lisp
(defhydra hydra-prog-mode (:color blue :hint nil :foreign-keys run)
  "
^
^Flycheck^        ^Others^
^^^---------------------------------
_f_: first error  _m_: flycheck mode
_p_: prev  error  _k_: flymake prev
_n_: next  error  _j_: flymake next
_c_: copy  error  _q_: quickrun

"
  ("<escape>" nil)
  ("RET" nil)

  ("f" flycheck-first-error)
  ("j" flymake-goto-prev-error)
  ("k" flymake-goto-next-error)

  ("n" flycheck-next-error)
  ("p" flycheck-previous-error)
  ("c" flycheck-copy-errors-as-kill)
  ("m" flycheck-mode)
  ("q" quickrun))
#+END_SRC
******** flycheck
#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck-mode (:color blue :hint nil :foreign-keys run)
"
^
^Flycheck^
---------------------------------------------------
_a_: check buffer          _e_: display error at point
_b_: go to first error     _f_: explain error at point
_c_: go to previous error  _g_: clear errors
_d_: go to next error      _h_: flycheck mode

"
("q" nil)
("<escape>" nil)
("RET" hydra-flycheck-list-mode/body)

("a" flycheck-buffer)
("b" flycheck-first-error)
("c" flycheck-previous-error)
("d" flycheck-next-error)
("e" flycheck-display-error-at-point)
("f" flycheck-explain-error-at-point)
("g" flycheck-clear)
("h" flycheck-mode))
#+END_SRC
******** prog modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-prog-modes (:color blue :hint nil :foreign-keys run)
  "
^
    ^Prog Modes^
    -----------
    _h_: guides
    _c_: company
    _s_: smparens
    _t_: tab jump
    _e_: operator
    _r_: rainbow
    _E_: my prog on
    _d_: my prog off
"
  ("<escape>" nil)
  ("<C-return>" nil)
  ("RET" nil)

  ("m" flycheck-mode)
  ("c" company-mode)
  ("s" smartparens-mode)
  ("t" tab-jump-out-mode)
  ("h" highlight-indent-guides-mode)
  ("e" electric-operator-mode)
  ("r" rainbow-delimiters-mode)
  ("E" my/prog-mode-on)
  ("d" my/prog-mode-off))
#+END_SRC
******** yasnippet
#+BEGIN_SRC emacs-lisp
(defhydra hydra-yasnippet (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
^YASnippet^
^^^^^^^^-----------------------------------------
_;_: load  _r_: reload all  _q_: quit  _d_: docs
_n_: new   _v_: visit       _k_: kill

"

  (";" my/yas-load-other-window)
  ("M-;" my/yas-load-other-window)

  ("v" yas-visit-snippet-file)
  ("M-v" yas-visit-snippet-file)

  ("n" yas-new-snippet)
  ("M-n" yas-new-snippet)

  ("r" yas-reload-all)
  ("M-r" yas-reload-all)

  ("q" quit-window)
  ("M-q" quit-window)

  ("k" kill-buffer-and-window)
  ("M-k" kill-buffer-and-window)

  ("d" my/open-yasnippets-docs)
  ("M-d" my/open-yasnippets-docs))
#+END_SRC

******** shell
#+BEGIN_SRC emacs-lisp
(defhydra hydra-shell (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
^Shells^
----------------------------
_s_: small     _p_: python shell
_j_: bellow    _a_: python async
_h_: far left
_l_: far right
_k_: far top
"

("<escape>" nil)
(";" kill-buffer-and-window)
("s" my/shell-botright)
("j" my/shell-bellow)
("h" my/shell-far-left)
("l" my/shell-far-right)
("k" my/shell-very-top)
("p" my/python-botright)
("a" my/execute-python-program-shell))
#+END_SRC
******** projectile
#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile-mode (:color blue :hint nil :foreign-keys run)
  "

  Projectile
  ^^^^^----------------------------------------------------
  _a_: ag             _f_: file dwin    _k_: kill buffers
  _g_: ag at point    _i_: file         _p_: switch project
  _c_: counsel proj.  _d_: file in dir  _b_: switch buffer

"
  ("q" nil)
  ("<escape>" nil)

  ("a" counsel-projectile-ag)
  ("g" counsel-ag-thing-at-point)
  ("c" counsel-projectile)

  ("f" counsel-projectile-find-file-dwim)
  ("i" counsel-projectile-find-file)
  ("d" projectile-find-file-in-directory)

  ("k" projectile-kill-buffers)
  ("p" counsel-projectile-switch-project)
  ("b" counsel-projectile-switch-to-buffer)
  ("." counsel-org-capture))
#+END_SRC

******* tangle
#+BEGIN_SRC emacs-lisp
(defhydra hydra-tangle (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^Tangle^
    --------------------------
    _l_: tangle only
    _d_: tangle and debug
    _o_: tangle and load
    _s_: tangle, load and show
    _f_: tangle default
    _r_: tangle and restart

"

  ("l" my/tangle-py-init.org-only)
  ("d" my/tangle-py-init.org-and-debug)
  ("o" my/tangle-py-init.org-and-load)
  ("s" my/tangle-py-init.org-load-and-show)
  ("f" org-babel-tangle)
  ("r" my/tangle-restart-emacs))
#+END_SRC
******* Spelling
#+BEGIN_SRC emacs-lisp
(defhydra hydra-spell (:color blue :hint nil)
  "
^
  _e_: prose en   _W_: wordnut search    _i_: dic. informal
  _b_: prose br   _w_: wordnut at point  _u_: urban dic. at point
  _n_: ispell en  _g_: google translate  _f_: free. dic.
  _r_: ispell br  _G_: google reverse    _l_: google
  _o_: flyspell   _m_: michaelis         _c_: insert char

^^
"
  ("<escape>" nil)

  ("e" my/prose-english)
  ("b" my/prose-brasileiro)
  ("n" my/ispell-english)
  ("r" my/ispell-brasileiro)
  ("o" flyspell-mode)

  ("W" wordnut-search)
  ("w" wordnut-lookup-current-word)

  ("g" google-translate-at-point)
  ("G" google-translate-at-point-reverse)

  ("m" my/engine-search-michaealis)
  ("M" engine/search-michaelis)

  ("i" my/engine-search-dic-informal)
  ("I" engine/search-dic-informal)

  ("u" my/engine-urban-dict)
  ("U" engine/search-urban-dictionary)

  ("f" engine/search-the-free-dictionary)
  ("l" engine/search-google)
  ("c" insert-char))
#+END_SRC

******* Evil Swap
#+BEGIN_SRC emacs-lisp
(defhydra hydra-evil-swap (:color blue :hint nil)
  "
^
   _m_: swap mode           _p_: equal w/ plus
   _d_: dash w/ emdash      _8_: 8 w/ asterisk
   _e_: emdash w/ dash      _c_: colon w/ semicolon
   _u_: underscore w/ dash  _q_: double quotes w/ single
^^
"
  ("<escape>" nil)
  ("m" evil-swap-keys-mode)
  ("d"  evil-swap-keys-swap-dash-emdash)
  ("e"  evil-swap-keys-swap-emdash-dash)
  ("u"  evil-swap-keys-swap-underscore-dash)

  ("p"  evil-swap-keys-swap-equal-plus)
  ("8"  evil-swap-keys-swap-eight-asterisk)
  ("c"  evil-swap-keys-swap-colon-semicolon)
  ("q"  evil-swap-keys-swap-double-single-quotes))
#+END_SRC

******* Killing
#+BEGIN_SRC emacs-lisp
(defhydra hydra-kill (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Kill^
    ---------------------------------------------------
    _a_: buffer     _d_: +all    _m_: +matching  _s_: server
    _b_: +window    _e_: +others _q_: my/quit
    _c_: +workspace _h_: +help   _g_: w.delete

"

  ("<escape>" nil)

  ("a" my/kill-this-buffer)
  ("b" kill-buffer-and-window)
  ("c" my/kill-buffer-and-workspace)
  ("d" my/kill-all-buffers)
  ("D" my/kill-all-buffers-except-treemacs)
  ("e" my/kill-other-buffers)
  ("h" my/kill-help-buffers)
  ("m" my/kill-matching-buffers)

  ("f" quit-window)
  ("q" my/quit-window)
  ("g" delete-window)
  ("s" save-buffers-kill-emacs))
#+END_SRC

******* Vertigo
#+BEGIN_SRC emacs-lisp
(defhydra hydra-vertigo (:color blue :hint nil)
"
^
^Vertigo^
---------------------
_,_: โ
_._: โ

a s d f g h j k l o
1 2 3 4 5 6 7 8 9 0
"
("<escape>" nil)
("." vertigo-visible-jump-down)
("," vertigo-visible-jump-up))
#+END_SRC
******* Window
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color blue :hint nil :exit nil :foreign-keys nil)
  "

^Resize       ^Split
---------------------------
_H_: width+    _h_: left
_L_: width-    _l_: righ
_K_: height    _k_: up
_J_: height    _j_: down
_b_: balance   _z_: registers
_r_: botright
"
  ("<escape>" nil)
  ("RET" nil)

  ("H" my/evil-inc-width :exit nil)
  ("L" my/evil-dec-width :exit nil)
  ("J" my/evil-dec-height :exit nil)
  ("K" my/evil-inc-height :exit nil)

  ("h" split-window-horizontally)
  ("j" my/split-vertically)
  ("k" split-window-below)
  ("l" my/split-right)

  ("b" balance-windows :exit t)
  ("r" my/evil-botright)

  ("z" hydra-window-registers/body))
#+END_SRC

******* Modes
#+BEGIN_SRC emacs-lisp
(defhydra hydra-modes (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Modes^
    ^^^^^^^^-------------------------------------------------------------------
    _c_: company    ^_q_: elec operator   _u_: unkill. scratch  _z_: capitalize
    _o_: \" options  _s_: hl-sentence     _w_: evil swap keys
    _l_: hl-line    ^_v_: visible         _k_: which-key
    _g_: olivetti   ^_h_: hide mode-line  _t_: transparency

"
  ("<escape>" nil)
  ("c" #'company-mode)
  ("o" #'my/company-show-options)
  ("l" #'hl-line-mode)
  ("g" #'olivetti-mode)

  ("q" #'electric-operator-mode)
  ("s" #'hl-sentence-mode)
  ("v" #'visible-mode)
  ("h" #'hide-mode-line-mode)

  ("u" #'unkillable-scratch)
  ("w" #'hydra-evil-swap/body)
  ("k" #'which-key-mode)
  ("t" #'my/toggle-transparency)
  ("z" #'auto-capitalize-mode))
#+END_SRC

******* Eval
#+BEGIN_SRC emacs-lisp
(defhydra hydra-eval (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
^Eval^
------------------------
_a_: block  _n_: next sexp
_b_: region
_c_: buffer
_d_: line
_h_: l.&show
_e_: keys
_i_: i3
_z_: NEW

"
("<escape>" nil)
("z" my-yank-region)
("a" my/tangle-and-eval-block-timed)
("b" eval-region)
("c" my/eval-buffer)
("d" my/eval-line-function)
("h" my/eval-line-function-and-show)
("e" my/tangle-reload-keys)
("i" i3-reload)
("n" my/eval-next-sexp-macro))
#+END_SRC

******* Packages
#+BEGIN_SRC emacs-lisp
(defhydra hydra-packages (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^
    ^Packages^
    -------------------
    _l_: list
    _r_: refresh
    _d_: delete
    _e_: describe
    _i_: install
    _f_: install file

"
  ("<escape>" nil)

  ("l" package-list-packages)
  ("r" package-refresh-contents)
  ("d" package-delete)
  ("i" package-install)
  ("f" package-install-file)
  ("e" describe-package))
#+END_SRC

******* Commands
DEADLINE: <2019-12-08 Sun>
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
    ^Main Commands^
    ^^^^^^^^^-----------------------------------------------------------------------------------
    _g_: copy dir         _i_: i3 reload     _a_: global abbrev  _c_: clone buffer  _d_: desktop
    _f_: copy filepath    _3_: i3 restart    _m_: mode abbrev    _W_: write file
    _n_: copy filename    _p_: packages      _t_: edit abbrevs   _r_: rename both
    _e_: lines by length  _w_: count words   _s_: check parens   _l_: load theme


"
  ("<escape>" nil)

  ("g" my/copy-dir)
  ("f" prelude-copy-file-name-to-clipboard)
  ("n" my/copy-file-only-name-to-clipboard)
  ("e" my/sort-lines-by-length)

  ("i" my/i3-reload)
  ("3" my/i3-restart)
  ("p" hydra-packages/body)
  ("w" my/wc-count)

  ("a" define-global-abbrev)
  ("m" define-mode-abbrev)
  ("t" edit-abbrevs)
  ("r" rename-file-and-buffer)
  ("s" check-parens)
  ("c" clone-indirect-buffer-other-window)
  ("W" write-file)
  ("d" hydra-desktop/body)
  ("l" load-theme)
  ("L" disable-theme))
#+END_SRC

******** desktop
#+BEGIN_SRC emacs-lisp
(defhydra hydra-desktop (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
  ^Desktop^
  ^^^^------------------------------
  _r_: read   _v_: revert  _m_: mode
  _s_: save   _e_: remove
  _c_: clear  _h_: chdir

"

  ("<escape>" nil)

  ("r" desktop-read)
  ("s" desktop-save-in-desktop-dir)
  ("c" desktop-clear)
  ("v" desktop-revert)
  ("e" desktop-remove)
  ("h" desktop-change-dir)
  ("m" desktop-save-mode))
#+END_SRC
******** Text Hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-main (:color blue :hint nil :exit nil :foreign-keys nil)
  "
^
  _e_: clean spaces  _l_: lorem par
  _i_: dup. par      _s_: lorem sen
  _t_: truncate      _Y_: copy line
  _d_: com & dup     _y_: move line
"

  ("<escape>" nil)

  ("e" xah-clean-whitespace)
  ("SPC" hydra-text-commands/body)
  ("i" duplicate-inner-paragraph)

  ("t" toggle-truncate-lines)

  ("l" lorem-ipsum-insert-paragraphs)
  ("s" lorem-ipsum-insert-sentences)
  ("y" avy-move-line)
  ("Y" avy-copy-line)
  ("d" my/comm-dup-line))
#+END_SRC

******** motions
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-motions (:color amaranth :hint nil :foreign-keys nil)
  "
   ^
   ^Motions^
   -------------------------
   _l_: line โ      _w_: word โ
   _L_: line โ      _W_: word โ
   _p_: par  โ      _c_: char โ
   _P_: par  โ      _C_: char โ
   _s_: sentence โ  _x_: sexp โ
   _S_: sentence โ  _X_: sexp โ

"

  ("<escape>" nil)
  ("m" nil)
  ("u" undo-tree-undo :exit t)

  ("l" cool-moves/line-forward)
  ("L" cool-moves/line-backward)

  ("p" cool-moves/paragraph-forward)
  ("P" cool-moves/paragraph-backward)

  ("w" cool-moves/word-forward)
  ("W" cool-moves/word-backwards)

  ("c" cool-moves/character-forward)
  ("C" cool-moves/character-backward)

  ("s" cool-moves/sentence-forward)
  ("S" cool-moves/sentence-backward)

  ("x" cool-moves/sexp-forward)
  ("X" cool-moves/sexp-backward))
#+END_SRC
******** more text hydra
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-commands (:color blue :hint nil)
  "
^
    ^More Text^
    ---------------------------------------------
    _s_: setq         _m_: move line      _g_: agg fill
    _f_: hydra key    _l_: copy line      _i_: auto fill
    _a_: text adju    _z_: show fill      _p_: insert par
    _v_: visible mode _e_: enable fills
    _c_: to chrome    _d_: disable fills

^^
"
  ("<escape>" nil)
  ("C-;" nil)
  ("SPC" nil)
  (";" nil)
  ("<menu>" nil)

  ("s" create-setq)
  ("f" format-hydra-binding)
  ("p" Lorem-ipsum-insert-paragraphs)
  ("m" avy-move-line)
  ("l" avy-copy-line)
  ("v" visible-mode)
  ("a" text-scale-adjust)
  ("w" copy-to-messenger)
  ("c" copy-to-chrome)
  ("g" aggressive-fill-paragraph-mode)
  ("i" auto-fill-mode)
  ("z" show-fill-column)
  ("e" my/enable-auto-agg-fill)
  ("d" my/disable-auto-agg-fill))
#+END_SRC

******* Searching
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-search (:hint nil :color blue :exit nil :foreign-keys nil)
  "
  _s_: evil search      _r_: counsel processes
  _w_: grep or swiper   _u_: substitute
  _r_: counsel grep     _g_: google
  _o_: counsel outline  _e_: en-wikipedia
"

  ("<escape>" nil nil)

  ("C-s" evil-search-forward)
  ("s" evil-search-forward)
  ("w" counsel-grep-or-swiper)
  ("r" counsel-grep)
  ("o" counsel-outline)

  ("r" counsel-list-processes)
  ("u" my/evil-substitute)
  ("g" engine/search-google)
  ("e" engine/search-wiki-en))
#+END_SRC

******* Org Hydra
******** Org Main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-mode (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    _a_: archive     _d_: deadline  _g_: tag     _t_: todos     _x_: export       _h_: hooks
    _p_: goto last   _s_: schedule  _r_: rifle   _c_: toc mode  _z_: timestamp    _t_: cycle list
    _l_: store link  _u_: ins link  _i_: indent  _e_: refile    _b_: bulles mode

"

  ("<escape>" nil)

  ("a" org-archive-subtree-default)
  ("b" org-bullets-mode)
  ("p" org-capture-goto-last-stored)

  ("d" org-deadline)
  ("s" org-schedule)
  ("l" org-store-link)

  ("g" counsel-org-tag)
  ("r" helm-org-rifle)
  ("u" org-web-tools-insert-link-for-url)

  ("t" org-todo)

  ("c" toc-org-mode)
  ("i" org-indent-mode)
  ("e" org-refile)
  ("x" org-export-dispatch)
  ("z" org-time-stamp)
  ("h" my/org-hooks)
  ("t" org-cycle-list-bullet))
#+END_SRC

******** Org Clock
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-clock (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    _i_: in    _m_: recent   _e_: set effort
    _o_: out   _c_: cancel   _a_: change \"
    _l_: last  _s_: started  _d_: done
    _y_: show  _t_: todo     _g_: goto
"


  ("q" nil)
  ("<escape>" nil)

  ("i" org-clock-in)
  ("o" org-clock-out)
  ("l" org-clock-in-last)
  ("c" org-clock-cancel)
  ("y" org-clock-display)
  ("m" org-mru-clock-in)
  ("e" org-set-effort)
  ("a" org-clock-modify-effort-estimate)
  ("s" my/org-started-with-clock)
  ("S" my/org-started-no-clock)
  ("d" my/org-todo-done)
  ("t" my/org-todo)
  ("g" org-clock-goto))
#+END_SRC

******** Org Agenda
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-agenda (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^Org Agenda^
    ^^---------------------------
    _a_: agenda      _l_: lock
    _1_: one day     _u_: unlock
    _2_: two days    _d_: add
    _3_: three days  _r_: remove
    _7_: seven days  _p_: update "

  ("q" nil)
  ("<escape>" nil)

  ("a" my/org-agenda)

  ("1" org-1-day-agenda)
  ("2" org-2-days-agenda)
  ("3" org-3-days-agenda)
  ("7" org-7-days-agenda)
  ("l" org-agenda-set-restriction-lock)
  ("u" org-agenda-remove-restriction-lock)
  ("r" org-remove-file)
  ("d" org-agenda-file-to-front)
  ("p" my/update-agenda-files))
#+END_SRC
******** Org Timer
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-timer (:color blue :hint nil :exit nil :foreign-keys nil)
"
    ^Org Timer^
    ------------------
    _e_: set timer
    _s_: start
    _t_: stop
    _p_: play/pause
    _r_: remaining
    _c_: change
    _i_: insert
    _d_: insert desc.
"

("q" nil)
("<escape>" nil)

("e" org-timer-set-timer)
("s" org-timer-start)
("t" org-timer-stop)
("p" org-timer-pause-or-continue)
("r" org-timer-show-remaining-time)
("c" org-timer-change-times-in-region)

;; insert
("i" org-timer)
("d" org-timer-item))
#+END_SRC

******** Org Todos
#+BEGIN_SRC emacs-lisp
(defhydra hydra-org-todo-ballantines (:color blue :hint nil :exit nil :foreign-keys nil)
"

    _t_: todo    _n_: next                         ^^^^|  _d_: done    _e_: remove
    _r_: repeat  _w_: wait                         ^^^^|  _p_: paused  _c_: cancelled
    _i_: idea    _m_: maybe _k_: working  _s_: staged  |  _u_: used
"

("q" nil)
("<escape>" nil)

("t" my/org-todo)
("i" my/org-todo-idea)
("n" my/org-todo-next)
("d" my/org-todo-done)

("r" my/org-todo-repeate)
("w" my/org-todo-wait)
("p" my/org-todo-paused)
("c" my/org-todo-cancelled)

("m" my/org-todo-maybe)
("s" my/org-todo-staged)
("k" my/org-todo-working)
("u" my/org-todo-used)
("e" my/org-remove-todo))
#+END_SRC
******* Info Mode
******** main
#+BEGIN_SRC emacs-lisp

(defhydra hydra-info-mode (:color blue :hint nil :foreign-keys nil)
"
^
    _p_: node โ  _k_: ref โ  _u_: info โ _s_: search _t_: toc
    _n_: node โ  _j_: ref โ  _m_: menu   _g_: goto   _i_: index "

("<escape>" nil)
("q" nil)

("u" Info-up)
("p" Info-backward-node)
("n" Info-forward-node)
("t" Info-toc)
("i" Info-inde )
("g" Info-goto-node)
("s" Info-search)
("m" Info-menu)
("j" Info-next-reference)
("k" Info-prev-reference))
#+END_SRC
******* Help
#+BEGIN_SRC emacs-lisp
(defhydra hydra-help (:color blue :hint nil :exit t :foreign-keys nil)

  "

    ^^Help
    ----------------------------------------
    _f_: callable  _k_: key       _i_: info
    _v_: variable  _l_: key long
    _e_: package   _w_: where is
    _p_: at point  _a_: apropos
    _m_: major     _d_: docs
    _o_: modes     _c_: command

"

  ("<escape>" nil)
  ("C-h" helpful-variable)
  ("C-f" helpful-callable)

  ("f" helpful-callable)
  ("F" helpful-function)
  ("e" describe-package)
  ("v" helpful-variable)
  ("p" helpful-at-point)
  ("m" show-major-mode)
  ("o" describe-mode)

  ("k" describe-key-briefly)
  ("l" helpful-key)
  ("w" where-is)

  ("a" counsel-apropos)
  ("c" helpful-command)
  ("d" apropos-documentation)
  ("i" info))
#+END_SRC

******* Files
******** main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-find-file (:hint nil :color blue)

  "
    ^File
    ^^^^^--------------------------------------------
    _a_: aliases     _I_: init.el   _s_: *scratch*
    _b_: bashrc      _i_: init.org  _o_: org scratch
    _n_: inputrc     _w_: warnings  _e_: el scratch
    _v_: env. vars   _g_: messages  _m_: md scracth
    _c_: completion  _u_: custom    _p_: py scratch
    _3_: i3 config                ^^_r_: rkt scratch

"
  ("<escape>" nil)

  ("a" my/goto-bash-aliases)
  ("b" my/goto-bashrc)
  ("n" my/goto-inputrc)
  ("v" my/goto-env_variables)
  ("c" my/goto-bash-completion)

  ("I" my/goto-init.el)
  ("i" my/goto-init)
  ("w" my/goto-warnings-buffer)
  ("g" my/goto-messages-buffer)
  ("u" my/goto-custom-file)

  ("3" my/goto-i3-config)
  ("s" my/goto-scratch-buffer)
  ("o" my/goto-scratch-org)
  ("e" my/goto-scratch-elisp)
  ("m" my/goto-scratch-markdown)
  ("p" my/goto-python-scratch)
  ("r" my/goto-racket-scratch))
#+END_SRC
******** scracthes
#+BEGIN_SRC emacs-lisp
;; (defhydra hydra-scratches (:hint nil :color blue)

;;   "
;;     ^Scratches
;;     ^^-----------
;;     _s_: initial
;;     _o_: org
;;     _e_: elisp
;;     _m_: markdown
;;     _p_: python

;; "
;;   ("<escape>" nil)

;;   ("s" my/goto-scratch-buffer)
;;   ("o" my/goto-scratch-org)
;;   ("e" my/goto-scratch-elisp)
;;   ("m" my/goto-scratch-markdown)
;;   ("p" my/goto-python-scratch))
#+END_SRC

******* Web
#+BEGIN_SRC emacs-lisp
(defhydra hydra-web-mode (:exit nil :hint nil :foreign-keys run)
  "

    Web Mode
    ^^^^--------------------------------------
    _b_: beautify html  _d_: dumb jump
    _c_: beautify css   _C_: search css
    _w_: colors web     _f_: search flexbox
    _e_: colors emacs
    _r_: rename
"

  ("q" nil)
  ("<escape>" nil)
  ("<return>" nil)

  ("b" my/web-beautify-html :exit t)
  ("c" web-beautify-css :exit t)

  ("w" counsel-colors-web :exit t)
  ("e" counsel-colors-emacs :exit t)

  ("f" engine/search-google-flexbox :exit t)
  ("C" engine/search-google-css :exit t)


  ("r" web-mode-element-rename :exit t)
  ("d" dumb-jump-go-prefer-external :exit t)

  ("f" flycheck-first-error)

  ("<return>" counsel-css :exit t))
#+END_SRC
******* CSS
#+BEGIN_SRC emacs-lisp
(defhydra hydra-css-mode (:color blue :hint nil :exit nil :foreign-keys nil)
  "
    ^
    ^CSS^
    ^^^----------------------------
    _m_: MDN      _w_: web colors
    _g_: Grid     _o_: emacs colors
    _c_: CSS
    _i_: indent
    _b_: beautify "


  ("<escape>" nil)
  ("q" nil)

  ("m" engine/search-mdn)
  ("<return>" engine/search-mdn)
  ("g" engine/search-google-css-grid)
  ("c" engine/search-google-css)

  ("b" web-beautify-css)
  ("i" indent-buffer)

  ("w" counsel-colors-web)
  ("o" counsel-colors-emacs)
  )
#+END_SRC
******* Version Control
******** git-timemachine
#+BEGIN_SRC emacs-lisp
(defhydra hydra-git-timemachine (:color amaranth :hint nil :foreign-keys run)
  "
    _C-p_: prev rev  _C-r_: current rev
    _C-n_: next rev  _C-l_: latest rev "

  ("C-q" git-timemachine-quit :exit t)
  ("<escape>" git-timemachine-quit :exit t)
  ("q" git-timemachine-quit :exit t)

  ("C-p" git-timemachine-show-previous-revision)
  ("C-n" git-timemachine-show-next-revision)

  ("C-r" git-timemachine-show-current-revision)
  ("C-l" git-timemachine-show-latest-revision-in-branch)

  ("C-o" olivetti-mode))
#+END_SRC

******** vc-mode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-vc-mode (:color blue :hint nil :foreign-keys run)
"
^
    ^VC Mode^
    ---------------------------------------------
    _v_: next      _p_: push      _d_: diff    _t_: time
    _r_: revert    _u_: pull      _m_: merge
    _g_: register  _a_: annotate  _e_: resolve
"

("<escape>" nil)

("v" vc-next-action)
("r" vc-revert-buffer)
("g" vc-register)

("p" my/vc-push)
("u" vc-pull)
("a" vc-annotate)

("d" vc-diff)
("m" vc-merge)
("e" vc-resolve-conflicts)
("t" hydra-git-timemachine/body))
#+END_SRC
******** magit
********* magit-main
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-main (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    ^Magit^
    --------------------------------------------------------------------------
    _s_: stage modified    _d_: dispatch       _M_: commit dispatch  _t_: status
    _รง_: stage and commit  _f_: file dispatch  _p_: push to remote   _i_: time machine
    _c_: stage at point    _m_: create commit  _P_: push dispatch    _a_: add

"
  ("<escape>" nil)
  ("q" nil)

  ("s" magit-stage-modified)
  ("รง" my/magit-stage-modified-and-commit)
  ("c" magit-stage)

  ("d" magit-dispatch)
  ("f" magit-file-dispatch)
  ("m" magit-commit-create)

  ("M" hydra-magit-commit/body)
  ("p" magit-push-current-to-pushremote)
  ("P" magit-push)

  ("t" magit-status)
  ("i" git-timemachine)
  ("a" my/magit-stage-untracked))
#+END_SRC

********* magit commit
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-commit (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
    ^Magit Commit^
    -------------------------------------------------------------
    _A_: augment _F_: instant fixup   _c_: commit    _x_: absorb changes
    _a_: amend   _s_: squash          _e_: extend
    _f_: fixup   _S_: instant squash  _n_: reshelve

"
("<escape>" nil)
("q" nil)

("A" magit-commit-augment)
("a" magit-commit-amend)
("f" magit-commit-fixup)
("F" magit-commit-instant-fixup)
("s" magit-commit-squash)
("S" magit-commit-instant-squash)
("c" magit-commit-create)
("e" magit-commit-extend)
("n" magit-commit-reshelve)
("w" magit-commit-reword)
("x" magit-commit-absorb))
#+END_SRC
********* magit transient
#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit-transient (:color blue :hint nil :exit nil :foreign-keys nil)
"
^
    ^Transient and dwim commands^
    --------------------------------------------------------------------------------
    _b_: branch  _e_: ediff  _m_: merge      _r_: rebase         _y_: show refs  _%_: worktree
    _c_: commit  _f_: fetch  _o_: submodule  _t_: tag            _z_: stash
    _d_: diff    _l_: log    _p_: push       _w_: apply patches  _!_: run
"

("<escape>" nil)
("q" nil)

("b"  magit-branch)
("c"  magit-commit)
("d"  magit-diff)
("e"  magit-ediff-dwim)

("f"  magit-fetch)
("l"  magit-log)
("m"  magit-merge)
("o"  magit-submodule)

("p"  magit-push)
("r"  magit-rebase)
("t"  magit-tag)
("w"  magit-am)

("y"  magit-show-refs)
("z"  magit-stash)
("!"  magit-run)
("%"  magit-worktree))
#+END_SRC

******* cool moves
#+BEGIN_SRC emacs-lisp
(defhydra hydra-text-motions (:color amaranth :hint nil :foreign-keys nil)
  "
    ^
        ^Motions^
        -------------------------
        _l_: line โ      _w_: word โ
        _L_: line โ      _W_: word โ
        _p_: par  โ      _c_: char โ
        _P_: par  โ      _C_: char โ
        _s_: sentence โ  _x_: sexp โ
        _S_: sentence โ  _X_: sexp โ

    "

  ("<escape>" nil)
  ("u" nil)

  ("l" cool-moves/line-forward)
  ("L" cool-moves/line-backward)

  ("p" cool-moves/paragraph-forward)
  ("P" cool-moves/paragraph-backward)

  ("w" cool-moves/word-forward)
  ("W" cool-moves/word-backwards)

  ("c" cool-moves/character-forward)
  ("C" cool-moves/character-backward)

  ("s" cool-moves/sentence-forward)
  ("S" cool-moves/sentence-backward)

  ("x" cool-moves/sexp-forward)
  ("X" cool-moves/sexp-backward))
#+END_SRC
***** Movement
****** buffer move
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
:defer nil
:ensure t)
#+END_SRC
****** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :defer nil
  :ensure t
  :config
  (setq avy-case-fold-search 't
        avy-style 'at-full
        avy-timeout-seconds 0.5
        avy-highlight-first t
        avy-single-candidate-jump t
        avy-background t
        avy-styles-alist '((avy-goto-line . at))
        avy-keys (nconc (number-sequence ?a ?z)
                        (number-sequence ?0 ?9)))

  (setq avy-all-windows nil)

  (custom-set-faces
   '(avy-background-face ((t (:foreground "SkyBlue"))))))
#+END_SRC
****** evil-easymotion
#+BEGIN_SRC emacs-lisp
(use-package evil-easymotion
:after avy
:ensure t)
#+END_SRC
****** windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
:config
(setq windmove-wrap-around t)
(general-nvmap
:keymaps 'override
"M-h" 'windmove-left
"M-l" 'windmove-right
"M-j" 'windmove-down
"M-k" 'windmove-up)

(general-define-key
:keymaps 'override
"M-h" 'windmove-left
"M-l" 'windmove-right
"M-j" 'windmove-down
"M-k" 'windmove-up)

(general-define-key
:keymaps 'override
"<M-up>" 'windmove-up
"<M-left>" 'windmove-left
"<M-down>" 'windmove-down
"<M-right>" 'windmove-right))
#+END_SRC
****** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  ;; :init
  ;; (remove-hook 'eyebrowse-pre-window-switch-hook 'save-buffer)
  :config

  (setq eyebrowse-wrap-around t)
  (setq eyebrowse-new-workspace t)
  (setq eyebrowse-mode-line-style 'smart)
  (setq eyebrowse-switch-back-and-forth t)
  (setq eyebrowse-mode-line-left-delimiter " [ ")
  (setq eyebrowse-mode-line-right-delimiter " ]  ")
  (setq eyebrowse-mode-line-separator " | ")

  (general-nvmap
    :prefix "SPC"
    :keymaps 'eyebrowse-mode-map
    "1" 'eyebrowse-switch-to-window-config-1
    "2" 'eyebrowse-switch-to-window-config-2
    "3" 'eyebrowse-switch-to-window-config-3
    "4" 'eyebrowse-switch-to-window-config-4
    "5" 'eyebrowse-switch-to-window-config-5
    "6" 'eyebrowse-switch-to-window-config-6
    "7" 'eyebrowse-switch-to-window-config-7
    "8" 'eyebrowse-switch-to-window-config-8
    "9" 'eyebrowse-switch-to-window-config-9
    "V" 'eyebrowse-create-window-config
    "x" 'eyebrowse-close-window-config)

  (general-define-key
   :keymaps 'eyebrowse-mode-map
   "M-1" 'eyebrowse-switch-to-window-config-1
   "M-2" 'eyebrowse-switch-to-window-config-2
   "M-3" 'eyebrowse-switch-to-window-config-3
   "M-4" 'eyebrowse-switch-to-window-config-4
   "M-5" 'eyebrowse-switch-to-window-config-5
   "M-q" 'eyebrowse-prev-window-config
   "M-w" 'eyebrowse-next-window-config)

  (general-unbind 'eyebrowse-mode-map
    "C-c C-w")

  (defun my/setup-eyebrowse-web ()
    (interactive)
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 2 "2. HTML")
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 3 "3. Tasks")
    (find-file "~/Studying/Prog/WebDev/webdev.org")
    (eyebrowse-switch-to-window-config-1)
    (eyebrowse-rename-window-config 1 "1. CSS")
    (eyebrowse-switch-to-window-config-3)
    (org-next-visible-heading 1))

  (defun my/setup-eyebrowse-html ()
    (interactive)
    (eyebrowse-create-window-config)
    (eyebrowse-rename-window-config 2 "2. Tasks")
    (find-file "~/Studying/Prog/WebDev/webdev.org")
    (eyebrowse-switch-to-window-config-1)
    (eyebrowse-rename-window-config 1 "1. HTML"))

  (defun eyebrowse--fixup-window-config (window-config)
    "Walk through WINDOW-CONFIG and fix it up destructively.
If a no longer existent buffer is encountered, it is replaced
with the scratch buffer."
    (shut-up
      (eyebrowse--walk-window-config
       window-config
       (lambda (item)
         (when (eq (car item) 'buffer)
           (let* ((buffer-name (cadr item))
                  (buffer (get-buffer buffer-name)))
             (when (not buffer)
               (message "Replaced deleted %s buffer with *scratch*" buffer-name)
               (setf (cadr item) "*scratch*"))))))))

  (eyebrowse-mode t))
#+END_SRC

****** Winner Mode
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer nil
  :ensure nil
  :config

  (general-define-key
   :states '(visual normal insert)
   "M--" 'winner-undo
   "M-=" 'winner-redo
)

  (winner-mode 1))
#+END_SRC

****** ivy hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra
:after hydra
:ensure t)
#+END_SRC
****** targets
#+BEGIN_SRC emacs-lisp
(use-package targets
  :load-path "~/.emacs.d/etc/custom_lisp"
  :config
  (targets-setup t))
#+END_SRC
****** i3wm Config Mode
#+BEGIN_SRC emacs-lisp
(use-package i3wm-config-mode
  :load-path "~/.emacs.d/etc/custom_lisp"
  :init
  (add-hook 'i3wm-config-mode-hook 'my/prog-mode-hooks)
  :config
  (general-nvmap
    :keymaps 'i3wm-config-mode-map
    "<backspace>" 'org-edit-src-exit))
#+END_SRC
****** cool-moves
#+BEGIN_SRC emacs-lisp
(use-package cool-moves
  :load-path "~/.emacs.d/etc/custom_lisp/cool-moves"
  :config
  (general-define-key
   :keymaps 'override
   "<C-down>" 'cool-moves/paragraph-forward
   "<C-up>" 'cool-moves/paragraph-backward
   "C-S-j" 'cool-moves/line-forward
   "C-S-k" 'cool-moves/line-backward))
#+END_SRC
****** bookmark+
#+BEGIN_SRC emacs-lisp
;; (use-package bookmark+
;;   :defer t
;;   :load-path "~/.emacs.d/etc/custom_lisp/bookmark-plus"
;;   :init
;;   (setq bmkp-bookmark-map-prefix-keys '("p")))
#+END_SRC
****** atomic-chrome
#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :defer nil
  :init
  (add-hook 'atomic-chrome-edit-mode-hook 'my/atomic-chrome-hooks)
  (add-hook 'atomic-chrome-edit-done-hook 'my/atomic-chrome-done-hooks)

  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode)
  (setq atomic-chrome-buffer-open-style 'window)


    (general-define-key
     :keymaps 'atomic-chrome-edit-mode-map
     "<escape>" 'ignore)

  (defun my/kill-buffer-and-frame ()
    (interactive)
    (my/kill-this-buffer)
    (delete-frame))

  (general-nvmap
    :keymaps 'atomic-chrome-edit-mode-map
    "q" 'atomic-chrome-close-current-buffer)

  (general-unbind 'atomic-chrome-edit-mode-map
    :with 'atomic-chrome-close-current-buffer
    [remap my/kill-this-buffer])

  (defun my/atomic-chrome-hooks ()
    (interactive)
    ;; (sp " hide i3 title and bar" nil "/home/files/dotfiles/scripts/i3_scripts/hide_border_and_title")
    (olivetti-mode +1)
    ;; (hide-mode-line-mode)
    (evil-insert-state)
    (electric-operator-mode)
    (focus-emacs)
    ;; (set-frame-parameter nil 'undecorated t)
    ;; (set-frame-parameter nil 'alpha '(98 . 98))
    (flyspell-mode +1))

  (defun my/atomic-chrome-done-hooks ()
    (interactive)
    ;; (sp " hide i3 bar" nil "/home/files/dotfiles/scripts/i3_scripts/show_border_and_title")
    (focus-chrome))

  (atomic-chrome-start-server))
#+END_SRC
****** nswbuff
#+BEGIN_SRC emacs-lisp
(use-package nswbuff
  :ensure t
  :config

  (setq nswbuff-left "  "
        nswbuff-clear-delay 2
        nswbuff-delay-switch nil
        nswbuff-this-frame-only 't
        nswbuff-recent-buffers-first t
        nswbuff-start-with-current-centered t
        nswbuff-display-intermediate-buffers t
        nswbuff-buffer-list-function 'nswbuff-projectile-buffer-list)

  (setq nswbuff-exclude-mode-regexp "Buffer-menu-mode\\|Info-mode\\|Man-mode\\|calc-mode\\|calendar-mode\\|compilation-mode\\|completion-list-mode\\|dired-mode\\|fundamental-mode\\|gnus-mode\\|help-mode\\|helpful-mode\\|ibuffer-mode\\|lisp-interaction-mode\\|magit-auto-revert-mode\\|magit-blame-mode\\|magit-blame-read-only-mode\\|magit-blob-mode\\|magit-cherry-mode\\|magit-diff-mode\\|magit-diff-mode\\|magit-file-mode\\|magit-log-mode\\|magit-log-select-mode\\|magit-merge-preview-mode\\|magit-mode\\|magit-process-mode\\|magit-reflog-mode\\|magit-refs-mode\\|magit-repolist-mode\\|magit-revision-mode\\|magit-stash-mode\\|magit-stashes-mode\\|magit-status-mode\\|magit-submodule-list-mode\\|magit-wip-after-apply-mode\\|magit-wip-after-save-local-mode\\|magit-wip-after-save-mode\\|magit-wip-before-change-mode\\|magit-wip-initial-backup-mode\\|magit-wip-mode\\|minibuffer-inactive-mode\\|occur-mode\\|org-agenda-mode\\|org-src-mode\\|pdf-view-mode\\|ranger-mode\\|shell-mode\\|special-mode\\|special-mode\\|term-mode\\|treemacs-mode\\|messages-buffer-mode")

  (setq nswbuff-exclude-buffer-regexps '(".*elc"
                                         "^#.*#$"
                                         "^\\*.*\\*"
                                         "archive.org$"
                                         "*slime-repl sbcl"
                                         "org-src-fontification"
                                         "*org-src-fontification:emacs-lisp-mode*"
                                         "*org-src-fontification\\.\\*")))
#+END_SRC
****** centered-cursor
#+BEGIN_SRC emacs-lisp
(use-package centered-cursor-mode
:defer t
:ensure t
:config
(setq ccm-recenter-at-end-of-file t))
#+END_SRC
****** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer t
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches "-lsh")
  (setq dired-hide-details-mode t))

;; (use-package dired+
;;   :quelpa (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
;;   :after dired
;;   :ensure nil
;;   :config
;;   (setq diredp-hide-details-initially-flag t)
;;   (setq diredp-hide-details-propagate-flag t)
;;   (diredp-toggle-find-file-reuse-dir t))
#+END_SRC
****** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :init
    (add-hook 'ranger-mode-hook 'my/ranger-options)
    (add-hook 'ranger-parent-dir-hook 'my/ranger-options-parent)

    (defun my/ranger-deer ()
      (interactive)
      (deer)
      (olivetti-mode +1)
      (shut-up
        (olivetti-set-width 70)))

    :bind (:map ranger-mode-map
                ("i"          . ranger-go)
                (";"          . evil-ex)
                ("tp"         . delete-file)
                ("<escape>"   . ranger-close)
                ("r"          . ranger-close)
                ("gg"         . ranger-goto-top)
                ("C-h"        . hydra-help/body)
                ("C-n"        . ranger-next-file)
                ("C-p"        . ranger-prev-file)
                ("m"          . ranger-find-file)
                ("C-l"        . ranger-find-links-dir)
                ("zi"         . ranger-toggle-details)
                ("zp"         . ranger-preview-toggle)
                ("รงcm"        . dired-create-directory)
                ("<insert>"   . dired-create-empty-file)
                ("D"          . dired-do-flagged-delete)
                ("x"          . diredp-delete-this-file)
                ("d"          . dired-flag-file-deletion)
                ("<C-return>" . dired-do-find-marked-files)
                ("<S-return>" . ranger-find-file-in-workspace))
    :config

    (general-define-key
     :keymaps 'ranger-mode-map
     :prefix "SPC"
     "f" 'hydra-find-file/body'
     "SPC" 'my/ranger-toggle-mark
     "q" 'ranger-close
     "r" 'ranger-close
     ";" 'evil-ex
     "c" 'hydra-commands/body
     "o" 'hydra-org-mode/body
     "i" 'helm-org-in-buffer-headings
     "a" 'counsel-M-x
     "b" 'my/evil-botright)

    (general-create-definer leader
      :prefix "SPC")

    (general-unbind 'ranger-mode-map
      :with 'ranger-prev-file
      [remap ranger-to-dired])

    (general-unbind 'ranger-mode-map
      :with 'ignore
      [remap windmove-left]
      [remap windmove-right])

    (leader
      :states '(normal visual)
      :keymaps 'override
      ;; "SPC" 'ranger-find-links-dir
      "r" 'my/ranger-deer)

    ;;;; SETTINGS ;;;;

    (setq ranger-max-tabs 0
          ranger-minimal nil
          ranger-footer-delay 0
          ranger-parent-depth 1
          ranger-footer-delay nil
          ranger-preview-file nil
          ranger-override-dired t
          ranger-persistent-sort t
          ranger-cleanup-eagerly t
          ranger-dont-show-binary t
          ranger-width-preview 0.65
          ranger-width-parents 0.12
          ranger-max-preview-size 0.5
          ranger-cleanup-on-disable t
          ranger-return-to-ranger nil
          ranger-max-parent-width 0.42
          ranger-deer-show-details nil
          ranger-excluded-extensions '("mkv" "iso" "mp4" "bin" "exe" "msi" "pdf" "doc" "docx"))

    ;;;; FUNCTIONS ;;;;

    (defun ranger-preview-toggle ()
      "Toggle preview of selected file."
      (interactive)
      (if (r--fget ranger-minimal)
          (message "Currently in deer mode. Previews are disabled.")
        (setq ranger-preview-file (not ranger-preview-file))
        (if ranger-preview-file
            (progn
              (ranger-hide-details)
              (ranger-setup-preview))
          (progn
            (when (and ranger-preview-window
                       (eq (selected-frame) (window-frame ranger-preview-window))
                       (window-live-p ranger-preview-window)
                       (window-at-side-p ranger-preview-window 'right))
              (ignore-errors
                (delete-window ranger-preview-window)))
            (ranger-hide-details)))))

    (defun ranger (&optional path)
      (interactive)
      (shut-up
        (let* ((file (or path (buffer-file-name)))
               (dir (if file (file-name-directory file) default-directory)))
          (when dir
            (r--fset ranger-minimal nil)
            (ranger-find-file dir)))))

    (defun my/ranger-go (path)
      (interactive
       (list
        (read-char-choice
         "
    b : bootcamp  h : home    s : scripts   w: web
    d : dotfiles  m : modules t : studying
    e : eclipe    o : org     v: emacs.d
  > "
         '(?a ?b ?c ?d ?e ?f ?g ?h ?i ?j ?l ?m ?n ?o ?p ?q ?r ?s ?t ?v ?z ?w))))
      (message nil)
      (let* ((c (char-to-string path))
             (new-path
              (cl-case (intern c)
                ('b "~/Studying/Prog/WebDev/bootcamp")
                ('d "~/dotfiles")
                ('v "~/.emacs.d")

                ('h "~")
                ('e "~/.eclipse")
                ('o "~/org")

                ('s "~/scripts")
                ('t "~/Studying")
                ('v "~/.emacs.d/modules")

                ('w "~/Studying/Prog/WebDev")
                ('q nil)))
             (alt-option
              (cl-case (intern c)
                ;; Subdir Handlng
                ('j 'ranger-next-subdir)
                ('k 'ranger-prev-subdir)
                ;; Tab Handling
                ('n 'ranger-new-tab)
                ('T 'ranger-prev-tab)
                ('t 'ranger-next-tab)
                ('c 'ranger-close-tab))))
        (when (string-equal c "q")
          (keyboard-quit))
        (when (and new-path (file-directory-p new-path))
          (ranger-find-file new-path))
        (when (eq system-type 'windows-nt)
          (when (string-equal c "D")
            (ranger-show-drives)))
        (when alt-option
          (call-interactively alt-option))))

  (advice-add 'ranger-go :override #'my/ranger-go)

  ;;;; OPTIONS ;;;

    (defun my/ranger-options ()
      (interactive)
      (shut-up
        (line-no-numbers)
        (olivetti-mode +1)
        (dired-hide-details-mode +1)
        (hide-mode-line-mode +1)))

    (defun my/ranger-options-parent ()
      (interactive)
      (shut-up
        (line-no-numbers)
        (dired-hide-details-mode +1)
        (toggle-truncate-lines +1)
        (hide-mode-line-mode +1)))

  ;;;; COMMANDS ;;;;
    (defun my/ranger-toggle-mark ()
      (interactive)
      (ranger-toggle-mark)
      (ranger-next-file 1))

    (defun my/ranger-toggle-mark ()
      (interactive)
      (ranger-toggle-mark)
      (ranger-next-file 1))

  ;;;; FIND ;;;;
    (defun my/ranger-find-bashdot ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/dotfiles/bash")))

    (defun my/ranger-find-texpander ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.texpander")))

    (defun my/ranger-find-nvim-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.config/nvim")))

    (defun my/ranger-find-config ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.config/")))

    (defun my/ranger-find-scripts-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/scripts")))

    (defun ranger-find-emacs-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/.emacs.d")))

    (defun my/ranger-find-math-dir ()
      (interactive)
      (let ((inhibit-message t))
        (ranger-find-file "~/Math")))

    (defun ranger-find-file-in-workspace ()
      (interactive)
      (ranger-find-file)
      (duplicate-workspace-buffer))

    (defun my/ranger ()
      (interactive)
      (my/copy-dir)
      (start-process-shell-command "my/show-ranger" nil "~/scripts/emacs_scripts/show-ranger")))
#+END_SRC
****** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer t)
#+END_SRC
***** Super Save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :demand t
  :config
  (setq super-save-exclude '("\\.py" "+new-snippet+"))
  (setq-default super-save-exclude '("\\.py" "+new-snippet+"))

  (setq auto-save-default nil
        super-save-idle-duration 0.5
        super-save-auto-save-when-idle t
        auto-save-file-name-transforms `((".*" "~/.emacs.d/var/temp" t)))

  (setq super-save-hook-triggers '(mouse-leave-buffer-hook focus-out-hook))

  (setq super-save-triggers
        '(
          undo
          quickrun
          last-buffer
          windmove-up
          windmove-down
          windmove-left
          windmove-right
          balance-windows
          switch-to-buffer
          eyebrowse-close-window-config
          eyebrowse-create-window-config
          eyebrowse-next-window-config
          eyebrowse-prev-window-config
          eyebrowse-switch-to-window-config-1
          eyebrowse-switch-to-window-config-2
          eyebrowse-switch-to-window-config-3
          eyebrowse-switch-to-window-config-4
          eyebrowse-switch-to-window-config-5
          eyebrowse-switch-to-window-config-6
          eyebrowse-switch-to-window-config-7
          eyebrowse-switch-to-window-config-8
          eyebrowse-switch-to-window-config-9))

  (auto-save-mode -1)
  (super-save-mode +1))
#+END_SRC
***** Builtins
****** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
****** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
****** Startup
#+BEGIN_SRC emacs-lisp
(setq startup-screen-inhibit-startup-screen t)
#+END_SRC
****** Auto Revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1))
#+END_SRC
****** Files
#+BEGIN_SRC emacs-lisp
(use-package files
  ;; :init
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
  :init
  ;; (add-to-list 'write-file-functions 'redraw-display)
  (setq write-file-functions '(recentf-track-opened-file ))
  :ensure nil
  :config
  ;; (setq write-file-functions '(recentf-track-opened-file undo-tree-save-history-hook))
  (setq save-silently t
        version-control t
        kept-new-versions 5
        kept-old-versions 2
        bookmark-save-flag 1
        delete-old-versions t
        vc-make-backup-files t
        buffer-save-without-query t
        backup-by-copying-when-linked t
        large-file-warning-threshold nil
        backup-directory-alist '(("." . "~/.emacs.d/var/backup"))
        find-file-suppress-same-file-warnings t)
  (setq auto-save-timeout 30)
  (setq auto-save-interval 150)
  ;; (auto-save-mode +1)
  (auto-save-visited-mode -1)
  )
#+END_SRC
****** Prog
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\prog\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config

  (defun my/prog-mode-hooks ()
    (interactive)
    (shut-up
      (company-mode +1)
      (tab-jump-out-mode +1)
      (hl-line-mode +1)
      ;; (my/company-idle-three-prefix-one)
      (comment-auto-fill)
      (show-paren-mode +1)
      (company-mode +1)
      (toggle-truncate-lines +1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      (smartparens-mode +1)
      (evil-smartparens-mode +1)))

  (defun my/prog-save-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (save-buffer))

  (defun my/insert-* ()
    (interactive)
    (evil-insert-state)
    (insert "*"))

  (defun my/insert-*-space ()
    (interactive)
    (evil-insert-state)
    (insert "* "))

  (defun my/insert-plus-space ()
    (interactive)
    (evil-insert-state)
    (insert "+ "))

  (defun my/insert-minus-space ()
    (interactive)
    (evil-insert-state)
    (insert "- "))

  (defun my/insert-0-space ()
    (interactive)
    (evil-insert-state)
    (insert "0 "))

  (defun my/insert-8 ()
    (interactive)
    (evil-insert-state)
    (insert "8"))

  (defun my/insert-1-space ()
    (interactive)
    (evil-insert-state)
    (insert "1 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-3-space ()
    (evil-insert-state)
    (interactive)
    (insert "3 "))

  (defun my/insert-4-space ()
    (evil-insert-state)
    (interactive)
    (insert "4 "))

  (defun my/insert-5-space ()
    (evil-insert-state)
    (interactive)
    (insert "5 "))

  (defun my/insert-6-space ()
    (evil-insert-state)
    (interactive)
    (insert "6 "))

  (defun my/insert-7-space ()
    (evil-insert-state)
    (interactive)
    (insert "7 "))

  (defun my/insert-8-space ()
    (evil-insert-state)
    (interactive)
    (insert "8 "))

  (defun my/insert-9-space ()
    (evil-insert-state)
    (interactive)
    (insert "9 "))

  (general-unbind 'prog-mode-map
    :with 'my/prog-save-buffer
    [remap save-buffer])

  ;; https://www.emacswiki.org/emacs/autofillmode
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'my/only-indent-buffer)

  (general-nmap
    :keymaps 'prog-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)

  (general-define-key
   :keymaps 'prog-mode-map
   ;; "C-c 9" 'my/comment-and-format-code-macro
   "C-c y" 'my/company-show-options
   "<C-return>" nil
   "<M-return>" 'my/only-indent-buffer)

  (general-define-key
   :keymaps 'prog-mode-map
   "<M-return>" 'my/only-indent-buffer))
#+END_SRC
****** Text Builtin
#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (add-hook 'text-mode-hook (lambda () (visual-line-mode +1)))
  :ensure nil
  :config

  (defun my/text-hooks ()
    (interactive)
    (shut-up
      (subword-mode +1)
      (auto-capitalize-mode +1)
      (tab-jump-out-mode +1)
      ;; (evil-better-visual-line-on)
      (wc-mode +1)
      (electric-pair-local-mode +1)
      (show-paren-mode +1)
      (smartparens-mode +1)
      ;; (toggle-truncate-lines -1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      ;; (evil-swap-keys-swap-double-single-quotes)
      ))

  (defun my/paragraph-backwards ()
    (interactive)
    (previous-line)
    (backward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/paragraph-forward ()
    (interactive)
    (forward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/enable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode +1)
    (aggressive-fill-paragraph-mode +1)
    (message " both fills enabled"))

  (defun my/disable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode -1)
    (aggressive-fill-paragraph-mode -1)
    (message " both fills disabled"))

  (defun my/prose-enable ()
    (interactive)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (hl-line-mode -1)
    ;; (hl-sentence-mode +1)
    ;; (typo-mode +1)
    (pabbrev-mode +1))

  (defun my/prose-disable ()
    (interactive)
    (shut-up
      (flyspell-mode -1)
      (auto-capitalize-mode 1)
      (tab-jump-out-mode 1)
      (electric-operator-mode 1)
      (wc-mode 1)
      (hl-line-mode -1)
      ;; (hl-sentence-mode -1)
      (pabbrev-mode -1)
      ;; (typo-mode -1)
      ))

  (defun my/prose-english ()
    (interactive)
    (my/prose-enable)
    (shut-up
      (flyspell-mode +1)
      (ispell-change-dictionary "english")
      (flyspell-buffer))
    (message " prose english"))

  (defun my/prose-brasileiro ()
    (interactive)
    (my/prose-enable)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    ;; (flyspell-buffer)
    (message " prosa brasileira"))

  (defun my/ispell-english ()
    (interactive)
    (ispell-change-dictionary "english")
    (flyspell-mode +1)
    (message " english"))

  (defun my/ispell-brasileiro ()
    (interactive)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    (message " portuguรชs"))

  (defun my/ispell-dict-options ()
    (interactive)
    (counsel-M-x "^my/ispell-ask-dict "))

  (defun my/ispell-ask-dict-br ()
    (interactive)
    (ispell-change-dictionary "brasileiro"))

  (defun my/ispell-ask-dict-en ()
    (interactive)
    (ispell-change-dictionary "american"))

  (general-nvmap
    :keymaps 'text-mode-map
    "RET" 'hydra-spell/body)

  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
****** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :ensure nil
  :config
  (setq eldoc-idle-delay 0.5)
  (global-eldoc-mode -1))
#+END_SRC
****** hs-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :config

  ;; (defun my/my-hs-toogle-hiding ()
  ;;   (interactive)
  ;;   (beginning-of-line)
  ;;   (hs-toggle-hiding))

  (general-nvmap
    :keymaps 'hs-minor-mode-map
    "<tab>" 'hs-toggle-hiding)

  (general-unbind 'hs-minor-mode-map
    :with 'hs-toggle-hiding
    [remap evil-toggle-fold])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-hide-all
    [remap evil-close-folds])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-show-all
    [remap outline-show-all]))
#+END_SRC

****** select
#+BEGIN_SRC emacs-lisp
;; (use-package select
;;   :ensure nil
;;   :config
;;   (setq x-select-enable-primary nil))
#+END_SRC
****** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :init
  (add-hook 'ibuffer-hook 'my/ibuffer-hooks)
  :general
  (general-nvmap
    :keymaps 'ibuffer-mode-map
    "<escape>" 'quit-window
    "C-p" 'ibuffer-backward-line
    "C-n" 'ibuffer-forward-line
    "k" 'ibuffer-backward-line
    "j" 'ibuffer-forward-line
    "C-j" 'my/ibuffer-forward-group
    "C-k" 'my/ibuffer-backward-group)
  :custom
  (ibuffer-expert t)
  (ibuffer-default-shrink-to-minimum-size t)
  (ibuffer-always-show-last-buffer t)
  (ibuffer-saved-filter-groups
   (quote (("default"
            ("org" (mode . org-mode))
            ("elisp" (mode . emacs-lisp-mode))
            ("markdown" (mode . markdown-mode))
            ("emacs" (or
                      (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")
                      (name . "^\\*Warnings\\*$") (name . "^\\*info\\*$")))
            ("help" (or
                     (name . "^\\*Help\\*$")
                     (name . "^\\*helpful.*\\*$")))))))

  (ibuffer-directory-abbrev-alist '(("\\`/home/dotfiles/emacs/em/modules/packages/misc/" . "*misc*/")
                                    ("\\`/home/Documents/Studying/Prog/WebDev/" . "*web*/")
                                    ("\\`/home/Documents/Studying/" . "*study*/")
                                    ("\\`/home/Documents/Org/Agenda/" . "*agenda*/")
                                    ("\\`/home/Documents/Org/" . "*org*/")
                                    ("\\`/home/dotfiles/emacs/em/tmp/scratches/" . "*scratches*/")
                                    ("\\`/home/dotfiles/emacs/em/modules/packages/" . "*packages*/")))

  (ibuffer-formats '((" "
                      (name 18 18 :left :elide) "   "
                      (mode 16 16 :left :elide) "   " filename)
                     (mark " " (name 16 -1) " " filename)))

  :config
  (defun my/ibuffer-forward-group ()
    (interactive)
    (ibuffer-forward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-backward-group ()
    (interactive)
    (ibuffer-backward-filter-group)
    (ibuffer-backward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-hooks ()
    (interactive)
    (hl-line-mode +1)
    (ibuffer-switch-to-saved-filter-groups "default")
    (olivetti-mode +1))

  (general-unbind 'ibuffer-mode-map
    :with 'ignore
    [remap evil-forward-char]
    [remap evil-forward-word-begin]
    [remap evil-backward-char]
    [remap evil-end-of-visual-line]))
#+END_SRC

****** info
#+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :init
  (add-hook 'Info-mode-hook 'my/info-hook-commands)
  :config

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-info-eintr ()
    (interactive)
    (info "eintr"))

  (defun my/eval-next-sexp-function ()
    (interactive)
    (my/eval-next-sexp-macro))

  (defun my/info-hook-commands ()
    (interactive)
    (line-no-numbers)
    (hl-line-mode +1)
    (centered-cursor-mode +1)
    (hl-sentence-mode)
    (message ""))

  (defun my/info-commands ()
    (interactive)
    (counsel-M-x "^Info- "))

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-exit-emacs-state])

  (general-unbind 'Info-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Info-mode-map
    :with 'last-buffer
    [remap Info]
    [remap Info-exit]
    [remap info])

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-normal-state])

  (general-nvmap
    :keymaps 'Info-mode-map
    "C-c C-c" 'eval-last-sexp
    "<C-return>" 'my/eval-next-sexp-function
    "<left>" 'evil-backward-sentence-begin
    "<right>" 'evil-forward-sentence-begin
    "<up>" 'my/paragraph-backwards
    "<down>" 'my/paragraph-forward
    "C-n" 'Info-forward-node
    "C-p" 'Info-backward-node
    "<backspace>" 'link-hint-open-link
    "M-n" 'my/paragraph-forward
    "H" 'Info-history-back
    "L" 'Info-history-forward
    "m" 'Info-menu
    "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "<left>" 'evil-backward-sentence-begin
   "<right>" 'evil-forward-sentence-begin
   "H" 'Info-history-back
   "L" 'Info-history-forward
   "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "m" 'Info-menu
   "C-q" 'my/cheat-sheet))
#+END_SRC

****** bs cycle
#+BEGIN_SRC emacs-lisp
;; (use-package bs
;;   :ensure nil
;;   :init
;;   (setq bs-configurations '(("all" nil nil nil nil nil)

;; 			    ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("files-and-scratch" "^\\*scratch\\*$" "^info_keys.org$" nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last))))
#+END_SRC
****** cc mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :defer t
  ;; :ensure cc-mode
  :init
  (setq-default c-default-style "linux")
  (add-hook 'c-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell foo))

  (defun my/execute-c-program-shell ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (insert "sp")
      (comint-send-input)
      (insert "gcc ")
      (yank)
      (insert " && ./a.out")
      (comint-send-input)
      (sit-for 0.3)
      (comint-clear-buffer)))

  (general-imap
    :keymaps 'c-mode-map
    "<M-return>" 'my/emacs-indent-buffer
    "C-;" 'my/c-semicolon-del-blank-lines)

  (general-nvmap
    :keymaps 'c-mode-map
    "zk" 'flycheck-previous-error
    "zj" 'flycheck-next-error
    "$" 'c-end-of-statement
    "0" 'c-beginning-of-statement
    "M-v" 'c-goto-vars
    "<escape>" 'my/quiet-save-buffer-c
    "<M-return>" 'my/emacs-indent-buffer))
#+END_SRC
****** shell mode
#+BEGIN_SRC emacs-lisp
(use-package shell
  :defer t
  :ensure nil
  :init
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'after-save-hook 'my/after-save-hooks)
  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)
  (add-hook 'shell-mode-hook
            (lambda ()
              (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
  :config

  (defun my/after-save-hooks ()
    (interactive)
    (executable-make-buffer-file-executable-if-script-p)
    ;; (redraw-display)
    )
  ;; (magit-stage-modified)

  (defun my/shell-mode-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1)
    (setq-local company-auto-complete nil)
    ;; (my/company-idle-one-prefix-one-quiet)
    (my/shell-source-bashrc))

  (defun my/shell-go-up ()
    (interactive)
    (insert "cd ..")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-back ()
    (interactive)
    (comint-clear-buffer)
    (insert "cd - && ls")
    (comint-send-input))

  (defun my/shell-fasd-start ()
    (interactive)
    (insert "jj "))

  (defun my/shell-fasd-complete ()
    (interactive)
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-previous ()
    (interactive)
    (comint-clear-buffer)
    (insert "my-shell-go-previous")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))
;;; shell_extras.el ends here

  (general-imap
    :keymaps 'shell-mode-map
    "C-u" 'comint-kill-input
    "C-p" 'comint-previous-input
    "C-n" 'comint-next-input
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "C-/" 'my/shell-clear-and-list
    "M-p" 'my/shell-go-previous
    "C-c j" 'my/evil-shell-bottom)

  (nvmap
    :keymaps 'shell-mode-map
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "M-p" 'my/shell-go-previous
    "C-/" 'my/shell-clear-and-list
    "C-c ;" 'kill-buffer-and-window)

  (general-define-key
   :keymaps 'shell-mode-map
   "C-u" 'comint-kill-input
   "<M-return>" nil
   "C-;" 'kill-buffer-and-window
   "C-t" 'my/shell-go-back
   "C-c 0" 'my/jump-to-register-91
   "M-e" 'counsel-shell-history
   "C-n" 'comint-next-input
   "C-l" 'comint-clear-buffer
   "C-c u" 'universal-argument
   "M-p" 'my/shell-go-previous
   "C-p" 'comint-previous-input
   "C-c j" 'my/evil-shell-bottom)

  (general-unbind 'shell-mode-map
    :with 'quit-window
    [remap my/no-highlight])

  (general-unbind 'shell-mode-map
    :with 'my/shell-go-up
    [remap ivy-yasnippet])

  (general-unbind 'shell-mode-map
    :with nil
    [remap evil-normal-state]
    [remap evil-exit-emacs-state])

  (general-unbind 'shell-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'shell-mode-map
    :with nil
    [remap hydra-text-main/body])

  (general-unbind 'shell-mode-map
    :with 'my/shell-resync
    [remap shell-resync-dirs])

  (defun my/shell-resync ()
    (interactive)
    (comint-kill-whole-line 1)
    (shell-resync-dirs)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-list ()
    (interactive)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-clear-and-list ()
    (interactive)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-source-bashrc ()
    (interactive)
    (insert "source ~/.bashrc")
    (comint-send-input)
    (comint-clear-buffer))

  (general-define-key
   :keymaps 'company-active-map
   "<return>" nil))
#+END_SRC

****** eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :ensure nil
  :init
  (setq eshell-banner-message "")
  (setq comint-terminfo-terminal "ansi"))
#+END_SRC
****** calc
#+BEGIN_SRC emacs-lisp
(use-package calc
  :defer t
  :ensure nil
  :config

  ;; (general-vmap
  ;;   :keymaps 'override
  ;;   "<XF86Calculator>" nil
  ;;   "X" 'my/calc-region)

  (general-nmap
    :keymaps 'override
    ;; "C-c p" 'quick-calc
    "<XF86Calculator>" 'quick-calc)

  (general-nvmap
    :keymaps 'calc-mode-map
    "C-l" 'calc-reset
    "<escape>" 'calc-quit))
#+END_SRC

****** compilate
#+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :config

  (setq-default compilation-window-height 30)
  (setq compilation-window-height 30)

  ;; (general-unbind 'compilation-mode-map
  ;;   :with 'ignore
  ;;   [remap my/quiet-save-buffer])

  (general-nvmap
    :keymaps 'compilation-mode-map
    "i" 'quit-window
    "<escape>" 'quit-window
    "<C-return>" 'quit-window
    "RET" 'quit-window
    "C-/" 'quit-window
    ";" 'quit-window))
#+END_SRC
****** conf-mode
#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'conf-space-mode-hook 'my/conf-hooks)
  (add-hook 'conf-unix-mode-hook 'my/conf-hooks)
  :config
  (defun my/conf-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (hl-line-mode +1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (electric-pair-local-mode 1)
    (highlight-numbers-mode 1)
    (highlight-operators-mode 1)
    (highlight-indent-guides-mode 1)
    (subword-mode 1)
    (tab-jump-out-mode 1))

  (electric-pair-local-mode 1)
  (general-define-key
   :keymaps 'conf-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC

****** with-editor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :defer t
  :ensure nil
  :init
  (add-hook 'with-editor-mode-hook #'my/with-editor-hooks)
  :config
  (defun my/with-editor-hooks ()
    (interactive)
    (my/prose-enable)
    (flyspell-mode -1)
    (evil-insert-state))

  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish)

  (general-unbind 'with-editor-mode-map
    :with 'with-editor-cancel
    [remap my/ex-noh]))
#+END_SRC
****** desktop package
#+BEGIN_SRC emacs-lisp
;; (use-package desktop
;;   :ensure nil
;;   :after eyebrowse
;;   :config
;;   (setq desktop-save t
;;         desktop-save-buffer t
;;         desktop-restore-eager t
;;         desktop-restore-frames t
;;         desktop-auto-save-timeout 15
;;         desktop-load-locked-desktop t
;;         desktop-restore-reuses-frames t
;;         desktop-base-file-name ".desktop"
;;         desktop-restore-forces-onscreen nil
;;         desktop-restore-in-current-display t
;;         desktop-base-lock-name ".desktop.lock"
;;         desktop-dirname "~/.emacs.d/var/desktop")

;;   (add-to-list 'desktop-modes-not-to-save 'special-mode)
;;   (desktop-save-mode 1))
#+END_SRC
****** custom
#+BEGIN_SRC emacs-lisp
(use-package Custom-mode
  :defer t
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'custom-mode-map
    "q" 'Custom-buffer-done)
  (general-nvmap
    :keymaps 'custom-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)
  (general-define-key
   :keymaps 'custom-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
****** hippie-exp
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :defer t
  :ensure nil
  :config
  (general-imap
    "M-/" 'hippie-expand))
#+END_SRC
****** term
#+BEGIN_SRC emacs-lisp
(use-package term
  :defer nil
  :init
  (add-hook 'term-mode-hook 'my/term-mode-hooks)
  (setq comint-terminfo-terminal "ansi")
  :ensure nil
  :config

  (defun my/term-delete-window ()
    (interactive)
    (delete-windows-on "*terminal*"))

  (defun my/term ()
    (interactive)
    (term "/bin/bash"))

  (defun my/term-below ()
    (interactive)
    (split-window-below)
    (other-window 1)
    (term "/bin/bash")
    (hide-mode-line-mode +1))

  (defun my/term-mode-hooks ()
    (interactive)
    (subword-mode 1)
    ;; (dimmer-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1))

  (general-unbind 'term-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer]
    [remap evil-normal-state])

  (general-unbind 'term-mode-map
    :with 'kill-buffer-and-window
    [remap my/no-highlight])

  (general-unbind 'term-raw-map
    :with 'term-send-raw
    [remap delete-backward-char]
    [remap evil-delete-backward-word]
    [remap delete-backward-word]
    [remap evil-paste-from-register]
    [remap backward-kill-word])

  (general-define-key
   :keymaps 'term-mode-map
   "M-]" 'evil-window-next
   "C-l" 'term-send-raw
   "C-/" 'my/term-delete-window
   "C-p" 'term-send-raw
   "C-n" 'term-send-raw
   "C-a" 'term-send-raw
   "C-e" 'term-send-raw
   "C-k" 'kill-line
   "C-u" 'term-send-raw
   "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-mode-map
    "M-]" 'evil-window-next
    "C-l" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-a" 'term-send-raw
    "C-e" 'term-send-raw
    "C-k" 'kill-line
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-nvmap
    :keymaps 'term-mode-map
    "C-l" 'term-send-raw
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-raw-map
    "M-]" 'evil-window-next
    "C-h" 'term-send-backspace
    "C-/" 'my/term-delete-window
    "M-r" nil))
#+END_SRC
****** safe-term
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("C-x t" . sane-term)
    ("C-x T" . sane-term-create)))
#+END_SRC
****** abbrev
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer t
  :ensure nil
  :config
  (defun abbrev-edit-save-close ()
    (interactive)
    (abbrev-edit-save-buffer)
    (my/kill-this-buffer))
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
  ;; (setq abbrev-file-name "~/.emacs.d/etc/abbrev_defs")
  (general-define-key
   :keymaps 'edit-abbrevs-map
   "<C-return>" 'abbrev-edit-save-close)
  (general-nvmap
    :keymaps 'edit-abbrevs-mode-map
    [escape] 'abbrev-edit-save-buffer
    "q" 'my/kill-this-buffer))
#+END_SRC
****** help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :init
  (add-hook 'help-mode-hook 'hl-line-mode)
  :config

  (add-to-list 'display-buffer-alist
               '("*Help*" display-buffer-same-window))

  (setq help-window-select t)

  ;; (general-unbind 'org-mode-map
  ;;   :with 'cool-moves/line-backward
  ;;   [remap evil-jump-forward])

  (general-nmap
    :keymaps 'help-mode-map
    "gr" 'sel-to-end
    "<escape>" 'quit-window)

  (general-nvmap
    :keymaps    'help-mode-map
    "<tab>"     'forward-button
    "<backtab>" 'backward-button
    "M-p"       'my/paragraph-backwards
    "M-n"       'my/paragraph-forward
    "gs"        'evil-ex-nohighlight)

  (general-define-key
   :keymaps 'help-mode-map
   "<escape>" 'quit-window
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward
   "gs" 'evil-ex-nohighlight))
#+END_SRC

****** man
#+BEGIN_SRC emacs-lisp
(use-package man
  :ensure nil
  :init
  (add-hook 'Man-mode-hook 'my/man-internal)

  :config
  (set-face-attribute 'Man-overstrike nil :inherit 'bold :foreground "orange ed")
  (set-face-attribute 'Man-underline nil :inherit 'underline :foreground "forest green")


  (defun my/man-internal ()
    (interactive)
    (other-window -1)
    (hl-line-mode +1))

  (defun my/man-external ()
    (interactive)
    (delete-other-windows)
    (hl-line-mode +1))

  (general-nvmap
    :keymaps 'Man-mode-map
    "C-x n" 'recursive-narrow-or-widen-dwim
    "q" 'quit-window
    "RET" 'man-follow
    "M-n" 'my/paragraph-forward
    "M-p" 'my/paragraph-backwards
    "C-p" 'Man-previous-section
    "C-n" 'Man-next-section
    "C-c RET" 'Man-follow-manual-reference)

  (general-define-key
   :keymaps 'Man-mode-map
   "q" 'quit-window)

  (general-unbind 'Man-mode-map
    :with 'sel-to-end
    [remap Man-update-manpage])

  (general-unbind 'Man-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Man-mode-map
    :with 'ignore
    [remap evil-insert]))
#+END_SRC
****** misc
******* scroll-bar
#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config
  (horizontal-scroll-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC
******* tool-bar
#+BEGIN_SRC emacs-lisp
(use-package tool-bar
  :ensure nil
  :config
  (setq tool-bar-mode nil)
  (tool-bar-mode -1))
#+END_SRC
******* show-paren-mode
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (custom-set-faces '(show-paren-match ((t(
                                           :background "#292929"
                                           :foreground "dark orange"
                                           :inverse-video nil
                                           :underline nil
                                           :slant normal
                                           :weight bold))))))
#+END_SRC

******* blink-cursor-mode
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  ;; :init
  ;; (remove-hook 'focus-out-hook 'save-buffer)
  :config
  (setq focus-follows-mouse 't)
  (blink-cursor-mode 0)

  ;; From: https://emacs.stackexchange.com/a/22668
  (defun my/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (if (eq
           (if (numberp alpha)
               alpha
             (cdr alpha)) ; may also be nil
           100)
          (set-frame-parameter nil 'alpha '(85 . 50))
        (set-frame-parameter nil 'alpha '(100 . 100))))))
#+END_SRC

******* autorevert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode 1))
#+END_SRC
******* mouse
#+BEGIN_SRC emacs-lisp
(use-package mouse
  :defer t
  :ensure nil
  :config
  (setq mouse-yank-at-point t))
#+END_SRC
******* paragraphs
#+BEGIN_SRC emacs-lisp
;; (use-package paragraphs
;;   :defer t
;;   :ensure nil
;;   :config
;;   (setq sentence-end-double-space nil)
;;   (setq sentence-end nil))
(setq sentence-end-double-space nil)
(setq sentence-end nil)
#+END_SRC
******* hl-line
#+BEGIN_SRC emacs-lisp
;; (use-package hl-line
;;   ;; :defer t
;;   :ensure nil
;;   :config
;;   (global-hl-line-mode nil))
#+END_SRC

******* warnings
#+BEGIN_SRC emacs-lisp
(use-package warnings
  :ensure nil
  :config
  (setq warning-minimum-level :emergency))
#+END_SRC

******* custom
#+BEGIN_SRC emacs-lisp
(use-package custom
  :defer t
  :ensure nil
  :init
  (add-hook 'after-load-theme-hook 'my/disable-variable-pitch)
  :config

  ;; http://bit.ly/2rrNnWr
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))

  ;; http://bit.ly/2WmnClo
  (defadvice load-theme (before disable-before-load)
    "Disable loaded themes before enabling a new theme"
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))
  (ad-activate 'load-theme)

  (setq custom-safe-themes t))
#+END_SRC
******* comint
#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer t
  :ensure nil
  :config
  (setq comint-prompt-read-only t))
#+END_SRC
******* sh-script
#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :defer t
  :ensure nil
  :init
  (add-hook 'sh-mode-hook  'my/sh-script-hooks)
  :config

  (defun my/sh-script-hooks ()
    (interactive)
    (flycheck-mode)
    (evil-swap-keys-swap-double-single-quotes))

  (general-nvmap
    :keymaps 'sh-mode-map
    "RET" 'hydra-prog-mode/body)

  (add-to-list 'auto-mode-alist '("\\.inputrc\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\.bash_aliases\\'" . sh-mode)))
#+END_SRC
******* vc-mode
#+BEGIN_SRC emacs-lisp
(use-package vc-mode
  :defer nil
  :ensure nil
  :config

  (setq vc-follow-symlinks t)

  (defun my/vc-push ()
    (interactive)
    (vc-push)
    (other-window 1))

    (general-define-key
     :keymaps 'vc-git-log-edit-mode-map
     "<C-return>" 'log-edit-done)

    (general-nmap
      :keymaps 'vc-git-log-edit-mode-map
      "<escape>" 'log-edit-kill-buffer))
#+END_SRC
******* register
#+BEGIN_SRC emacs-lisp
(use-package register
  :defer t
  :ensure nil
  :config
  (setq register-preview-delay 0)

  (defun my/window-to-reg-1 ()
    (interactive)
    (window-configuration-to-register 49 nil))

  (defun my/window-to-reg-2 ()
    (interactive)
    (window-configuration-to-register 50 nil))

  (defun my/window-to-reg-3 ()
    (interactive)
    (window-configuration-to-register 51 nil))

  (defun my/window-to-reg-4 ()
    (interactive)
    (window-configuration-to-register 52 nil))

  (defun my/window-to-reg-5 ()
    (interactive)
    (window-configuration-to-register 53 nil))

  (defun my/jump-to-reg-1 ()
    (interactive)
    (jump-to-register 49 nil))

  (defun my/jump-to-reg-2 ()
    (interactive)
    (jump-to-register 50 nil))

  (defun my/jump-to-reg-3 ()
    (interactive)
    (jump-to-register 51 nil))

  (defun my/jump-to-reg-4 ()
    (interactive)
    (jump-to-register 52 nil))

  (defun my/jump-to-reg-5 ()
    (interactive)
    (jump-to-register 53 nil))

  )
#+END_SRC

******* doc-view
#+BEGIN_SRC emacs-lisp
(use-package doc-view
  :defer t
  :ensure nil
  :config
  (setq doc-view-continuous t))
#+END_SRC
******* loaddefs
#+BEGIN_SRC emacs-lisp
(use-package loaddefs
  :defer t
  :ensure nil
  :config
  (setq browse-url-generic-program "google-chrome-stable")
  (setq browse-url-browser-function 'browse-url-generic))
#+END_SRC
****** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer nil
  :ensure nil
  :config
  (setq recentf-max-menu-items '10
        recentf-auto-cleanup 'mode
        recentf-save-file (expand-file-name "recentf" "\~/.emacs.d/var/")
        recentf-exclude   '("Dired"
                            "*.tex"
                            "*slime-repl sbcl"
                            "erc-mode" "help-mode"
                            "completion-list-mode"
                            "/home/dotfiles/emacs/em/var/*.*"
                            "custom.el"
                            "Buffer-menu-mode"
                            "gnus-.*-mode"
                            "occur-mode"
                            "*.Log.*"
                            "*.*log.*"
                            ".*help.*"
                            "^#.*#$"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*Help*"
                            "*Calc Trail*"
                            "magit-process"
                            "magit-diff"
                            "*Org-Babel Error Output*"
                            "\\`\\*helm"
                            "\\`\\*Echo Area"
                            "\\`\\*Minibuf"
                            "Ibuffer"
                            "epc con"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*cheatsheet*"
                            "*Help*"
                            "*Echo Area 0*"
                            "*Echo Area 1"
                            "*Minibuf 0*"
                            "*Minibuf-1*"
                            "info-history"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "*scratch*"
                            "*Warning*"
                            "*Messages*"
                            "^init.org$"
                            "^packs.org$"
                            "^functions.org$"
                            "^keys.org$"
                            "^misc.org$"
                            "^macros.org$"
                            "^hydras.org$"
                            "^links.org$"
                            "^custom.el$"
                            "*Flycheck error messages*"
                            "*Flymake log*"
                            "*company-documentation*"
                            "^.archive.org$"
                            ".*magit.*"
                            ".*elc"
                            "*shell*"
                            "*new*"
                            "*Flycheck error messages*"
                            "*clang-output*"
                            "*Bongo Playlist*"
                            "*eclim: problems*"
                            "*eclimd*"
                            "*compilation*"
                            "*Bongo Library*"
                            ;; ".*pdf"
                            "*Outline.*"
                            "*blacken*"
                            "*server*"
                            "*code-conversion-work*"
                            "*blacken-error*"
                            "*quickrun*"
                            "~/.emacs.d/var/*"))

  ;; (recentf-load-list)
  (recentf-mode -1))
#+END_SRC

****** time-date
#+BEGIN_SRC emacs-lisp
(use-package time-date
  :defer nil
  :ensure nil
  :config
  ;;  measure time
  ;;  https://stackoverflow.com/q/23622296

  (defmacro my/measure-time (&rest body)
    "Measure the time it takes to evaluate BODY."
    (interactive)
    `(let ((time (current-time)))
       ,@body
       (message "%.06f" (float-time (time-since time))))))
#+END_SRC

****** simple
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\fund\\'" . fundamental-mode))
  ;; (add-hook 'after-init-hook 'my/quit-warning-window)
  (add-hook 'completion-list-mode-hook 'my/completion-mode-hooks)
  :config

  (defun my/clone-buffer ()
    (interactive)
    (split-window-below)
    (clone-indirect-buffer-other-window (buffer-name) "1" nil)
    (evil-window-move-far-right))

  ;; completion-list-mode
  (defun my/other-window ()
    (interactive)
    (other-window -1))

  (defun my/completion-mode-hooks ()
    (interactive)
    (forward-paragraph)
    (switch-to-buffer-other-window "*Completions*")
    (hl-line-mode +1))

  (setq pcomplete-help 't
        pcomplete-autolist 't
        pcomplete-ignore-case 't)

  ;; (defun my/quit-warning-window ()
  ;;   (interactive)
  ;;   (quit-windows-on "*Warnings*"))

  ;; https://www.emacswiki.org/emacs/QuotedInsert
  (setq read-quoted-char-radix 10)

  (setq use-dialog-box nil)
  (setq kill-whole-line 't)
;;;; WINDOWS ;;;;
  (setq window-resize-pixelwise t)
  (setq recenter-positions '(top middle bottom))

  (defun my/kill-whole-buffer ()
    (interactive)
    (read-only-mode -1)
    (kill-region (point-min) (point-max))
    (quit-window))

  (defun my/set-fill-120 ()
    (interactive)
    (shut-up
      (set-fill-column 120)))

  (defun my/set-fill-70 ()
    (interactive)
    (shut-up
      (set-fill-column 70)))

  (defun my/set-fill-89 ()
    (interactive)
    (shut-up
      (set-fill-column 89)))

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  ;; (setq fill-column 69)
  (setq-default display-line-numbers nil)
  (line-number-mode +1)
  (setq auto-fill-mode t)
  (setq-default auto-fill-mode t)

  (defun my/eval-buffer ()
    (interactive)
    (progn
      (save-excursion
        (eval-buffer)
        (indent-buffer)
        (my/save-all)
        (message " buffer evaluated"))))

  (defun my/eval-buffer-no-save ()
    (interactive)
    (save-excursion
      (indent-buffer)
      (eval-buffer)
      (message " buffer evaluated")))

  (defun my/move-file-to-trash ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (delete-window))

  (defun my/move-file-to-trash-close-ws ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (eyebrowse-close-window-config))

  (defun delete-file-and-buffer ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))

  (defun show-fill-column ()
    (interactive)
    (describe-variable 'fill-column))

  (defun show-major-mode ()
    (interactive)
    (describe-variable 'major-mode))

  (defun my/buffer-name ()
    (interactive)
    (message (buffer-name)))

  (setq save-interprogram-paste-before-kill nil)
  (setq backward-delete-char-untabify-method 'hungry)

  (general-unbind 'special-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (general-unbind 'messages-buffer-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)

  (global-visual-line-mode -1)
  (setq global-visual-line-mode nil)
  (setq-default global-visual-line-mode nil)
  (setq truncate-lines t)
  (setq-default truncate-lines t))
#+END_SRC
****** eval
#+BEGIN_SRC emacs-lisp
(use-package eval
  :defer t
  :ensure nil
  :config
  (setq debug-on-error nil))
#+END_SRC

****** dispnew
#+BEGIN_SRC emacs-lisp
(use-package dispnew
  :defer t
  :ensure nil
  :config
  (setq visible-bell nil))
#+END_SRC

****** editfns
#+BEGIN_SRC emacs-lisp
(use-package editfns
  :defer t
  :ensure nil
  :config
  (put 'narrow-to-region 'disabled nil))
#+END_SRC
****** image
#+BEGIN_SRC emacs-lisp
(use-package image
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'image-mode-map
    "C--" 'image-decrease-size
    "C-=" 'image-increase-size
    "=" 'image-transform-fit-to-width
    "RET" 'image-transform-fit-to-width
    "q" 'image-kill-buffer))
;; "<escape>" 'my/quit-window
#+END_SRC
****** time
#+BEGIN_SRC emacs-lisp
(use-package time
  :ensure nil
  :config
  (setq-default display-time-format "| %a, %H:%M |")
  (setq-default display-time-default-load-average nil)
  (display-time)
  (display-time-mode +1))
#+END_SRC

****** minibuffer
#+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :ensure nil
  :config

  (general-define-key
   :keymaps 'minibuffer-inactive-mode-map
   "<S-insert>" 'yank
   "C-h" 'delete-backward-char)

  (general-define-key
   :keymaps 'minibuffer-local-map
   "<escape>" 'abort-recursive-edit
   "C-u" 'my/backward-kill-line
   "C-w" 'backward-kill-word
   "C-h" 'delete-backward-char))
#+END_SRC
****** debug
#+BEGIN_SRC emacs-lisp
(use-package debug
  :ensure nil
  :config
  (general-nmap
    :keymaps 'debugger-mode-map
    "<escape>" 'ignore)

  (setq debug-on-error nil))
#+END_SRC
****** fringe
#+BEGIN_SRC emacs-lisp
(use-package fringe
  :ensure nil
  :config
  (fringe-mode -1))
#+END_SRC
****** avoid
#+BEGIN_SRC emacs-lisp
;; (use-package avoid
;;   :defer nil
;;   :ensure nil
;;   :config
;;   (setq mouse-avoidance-banish-position '((frame-or-window . frame)
;;                                           (side . right)
;;                                           (side-pos . 3)
;;                                           (top-or-bottom . top)
;;                                           (top-or-bottom-pos . 10)))
;;   (mouse-avoidance-mode 'banish))
#+END_SRC
****** disable-mouse
#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :defer t
  :config
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  (global-disable-mouse-mode))
#+END_SRC
****** savehist
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (setq history-length 500)
  (setq savehist-autosave-interval (* 1 30))
  (setq savehist-file "~/.emacs.d/var/savehist.el")
  (setq savehist-additional-variables '(kill-ring search-ring filesets-data))
  :config
  (savehist-mode t))
#+END_SRC
****** subword
#+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :config
  (global-subword-mode +1))
#+END_SRC
****** gud
#+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :config
  (defun my/pdb ()
    (interactive)
    (pdb (buffer-file-name))))
#+END_SRC
****** messages-buffer-mode
****** midnight-mode
#+BEGIN_SRC emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq midnight-period 10800)
  (midnight-mode +1))
#+END_SRC

**** N2
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:49
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: N1/Builtins
:ARCHIVE_CATEGORY: init
:END:
***** term
#+BEGIN_SRC emacs-lisp
(use-package term
  :defer nil
  :init
  (add-hook 'term-mode-hook 'my/term-mode-hooks)
  (setq comint-terminfo-terminal "ansi")
  :ensure nil
  :config

  (defun my/term-delete-window ()
    (interactive)
    (delete-windows-on "*terminal*"))

  (defun my/term ()
    (interactive)
    (term "/bin/bash"))

  (defun my/term-below ()
    (interactive)
    (split-window-below)
    (other-window 1)
    (term "/bin/bash")
    (hide-mode-line-mode +1))

  (defun my/term-mode-hooks ()
    (interactive)
    (subword-mode 1)
    ;; (dimmer-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1))

  (general-unbind 'term-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer]
    [remap evil-normal-state])

  (general-unbind 'term-mode-map
    :with 'kill-buffer-and-window
    [remap my/no-highlight])

  (general-unbind 'term-raw-map
    :with 'term-send-raw
    [remap delete-backward-char]
    [remap evil-delete-backward-word]
    [remap delete-backward-word]
    [remap evil-paste-from-register]
    [remap backward-kill-word])

  (general-define-key
   :keymaps 'term-mode-map
   "M-]" 'evil-window-next
   "C-l" 'term-send-raw
   "C-/" 'my/term-delete-window
   "C-p" 'term-send-raw
   "C-n" 'term-send-raw
   "C-a" 'term-send-raw
   "C-e" 'term-send-raw
   "C-k" 'kill-line
   "C-u" 'term-send-raw
   "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-mode-map
    "M-]" 'evil-window-next
    "C-l" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-a" 'term-send-raw
    "C-e" 'term-send-raw
    "C-k" 'kill-line
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-nvmap
    :keymaps 'term-mode-map
    "C-l" 'term-send-raw
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-/" 'my/term-delete-window
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-raw-map
    "M-]" 'evil-window-next
    "C-h" 'term-send-backspace
    "C-/" 'my/term-delete-window
    "M-r" nil))
#+END_SRC
***** safe-term
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("C-x t" . sane-term)
    ("C-x T" . sane-term-create)))
#+END_SRC
***** abbrev
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer t
  :ensure nil
  :config
  (defun abbrev-edit-save-close ()
    (interactive)
    (abbrev-edit-save-buffer)
    (my/kill-this-buffer))
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
  ;; (setq abbrev-file-name "~/.emacs.d/etc/abbrev_defs")
  (general-define-key
   :keymaps 'edit-abbrevs-map
   "<C-return>" 'abbrev-edit-save-close)
  (general-nvmap
    :keymaps 'edit-abbrevs-mode-map
    [escape] 'abbrev-edit-save-buffer
    "q" 'my/kill-this-buffer))
#+END_SRC
***** help
#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :init
  (add-hook 'help-mode-hook 'hl-line-mode)
  :config

  (add-to-list 'display-buffer-alist
               '("*Help*" display-buffer-same-window))

  (setq help-window-select t)

  ;; (general-unbind 'org-mode-map
  ;;   :with 'cool-moves/line-backward
  ;;   [remap evil-jump-forward])

  (general-nmap
    :keymaps 'help-mode-map
    "gr" 'sel-to-end
    "<escape>" 'quit-window)

  (general-nvmap
    :keymaps    'help-mode-map
    "<tab>"     'forward-button
    "<backtab>" 'backward-button
    "M-p"       'my/paragraph-backwards
    "M-n"       'my/paragraph-forward
    "gs"        'evil-ex-nohighlight)

  (general-define-key
   :keymaps 'help-mode-map
   "<escape>" 'quit-window
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward
   "gs" 'evil-ex-nohighlight))
#+END_SRC

***** man
#+BEGIN_SRC emacs-lisp
(use-package man
  :ensure nil
  :init
  (add-hook 'Man-mode-hook 'my/man-internal)

  :config
  (set-face-attribute 'Man-overstrike nil :inherit 'bold :foreground "orange ed")
  (set-face-attribute 'Man-underline nil :inherit 'underline :foreground "forest green")


  (defun my/man-internal ()
    (interactive)
    (other-window -1)
    (hl-line-mode +1))

  (defun my/man-external ()
    (interactive)
    (delete-other-windows)
    (hl-line-mode +1))

  (general-nvmap
    :keymaps 'Man-mode-map
    "C-x n" 'recursive-narrow-or-widen-dwim
    "q" 'quit-window
    "RET" 'man-follow
    "M-n" 'my/paragraph-forward
    "M-p" 'my/paragraph-backwards
    "C-p" 'Man-previous-section
    "C-n" 'Man-next-section
    "C-c RET" 'Man-follow-manual-reference)

  (general-define-key
   :keymaps 'Man-mode-map
   "q" 'quit-window)

  (general-unbind 'Man-mode-map
    :with 'sel-to-end
    [remap Man-update-manpage])

  (general-unbind 'Man-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Man-mode-map
    :with 'ignore
    [remap evil-insert]))
#+END_SRC
***** misc
****** scroll-bar
#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config
  (horizontal-scroll-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC
****** tool-bar
#+BEGIN_SRC emacs-lisp
(use-package tool-bar
  :ensure nil
  :config
  (setq tool-bar-mode nil)
  (tool-bar-mode -1))
#+END_SRC
****** show-paren-mode
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :config
  (custom-set-faces '(show-paren-match ((t(
                                           :background "#292929"
                                           :foreground "dark orange"
                                           :inverse-video nil
                                           :underline nil
                                           :slant normal
                                           :weight bold))))))
#+END_SRC

****** blink-cursor-mode
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  ;; :init
  ;; (remove-hook 'focus-out-hook 'save-buffer)
  :config
  (setq focus-follows-mouse 't)
  (blink-cursor-mode 0)

  ;; From: https://emacs.stackexchange.com/a/22668
  (defun my/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (if (eq
           (if (numberp alpha)
               alpha
             (cdr alpha)) ; may also be nil
           100)
          (set-frame-parameter nil 'alpha '(85 . 50))
        (set-frame-parameter nil 'alpha '(100 . 100))))))
#+END_SRC

****** autorevert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode 1))
#+END_SRC
****** mouse
#+BEGIN_SRC emacs-lisp
(use-package mouse
  :defer t
  :ensure nil
  :config
  (setq mouse-yank-at-point t))
#+END_SRC
****** paragraphs
#+BEGIN_SRC emacs-lisp
;; (use-package paragraphs
;;   :defer t
;;   :ensure nil
;;   :config
;;   (setq sentence-end-double-space nil)
;;   (setq sentence-end nil))
(setq sentence-end-double-space nil)
(setq sentence-end nil)
#+END_SRC
****** hl-line
#+BEGIN_SRC emacs-lisp
;; (use-package hl-line
;;   ;; :defer t
;;   :ensure nil
;;   :config
;;   (global-hl-line-mode nil))
#+END_SRC

****** warnings
#+BEGIN_SRC emacs-lisp
(use-package warnings
  :ensure nil
  :config
  (setq warning-minimum-level :emergency))
#+END_SRC

****** custom
#+BEGIN_SRC emacs-lisp
(use-package custom
  :defer t
  :ensure nil
  :init
  (add-hook 'after-load-theme-hook 'my/disable-variable-pitch)
  :config

  ;; http://bit.ly/2rrNnWr
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))

  ;; http://bit.ly/2WmnClo
  (defadvice load-theme (before disable-before-load)
    "Disable loaded themes before enabling a new theme"
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))
  (ad-activate 'load-theme)

  (setq custom-safe-themes t))
#+END_SRC
****** comint
#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer t
  :ensure nil
  :config
  (setq comint-prompt-read-only t))
#+END_SRC
****** sh-script
#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :defer t
  :ensure nil
  :init
  (add-hook 'sh-mode-hook  'my/sh-script-hooks)
  :config

  (defun my/sh-script-hooks ()
    (interactive)
    (flycheck-mode)
    (evil-swap-keys-swap-double-single-quotes))

  (general-nvmap
    :keymaps 'sh-mode-map
    "RET" 'hydra-prog-mode/body)

  (add-to-list 'auto-mode-alist '("\\.inputrc\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\.bash_aliases\\'" . sh-mode)))
#+END_SRC
****** vc-mode
#+BEGIN_SRC emacs-lisp
(use-package vc-mode
  :defer nil
  :ensure nil
  :config

  (setq vc-follow-symlinks t)

  (defun my/vc-push ()
    (interactive)
    (vc-push)
    (other-window 1))

    (general-define-key
     :keymaps 'vc-git-log-edit-mode-map
     "<C-return>" 'log-edit-done)

    (general-nmap
      :keymaps 'vc-git-log-edit-mode-map
      "<escape>" 'log-edit-kill-buffer))
#+END_SRC
****** register
#+BEGIN_SRC emacs-lisp
(use-package register
  :defer t
  :ensure nil
  :config
  (setq register-preview-delay 0)

  (defun my/window-to-reg-1 ()
    (interactive)
    (window-configuration-to-register 49 nil))

  (defun my/window-to-reg-2 ()
    (interactive)
    (window-configuration-to-register 50 nil))

  (defun my/window-to-reg-3 ()
    (interactive)
    (window-configuration-to-register 51 nil))

  (defun my/window-to-reg-4 ()
    (interactive)
    (window-configuration-to-register 52 nil))

  (defun my/window-to-reg-5 ()
    (interactive)
    (window-configuration-to-register 53 nil))

  (defun my/jump-to-reg-1 ()
    (interactive)
    (jump-to-register 49 nil))

  (defun my/jump-to-reg-2 ()
    (interactive)
    (jump-to-register 50 nil))

  (defun my/jump-to-reg-3 ()
    (interactive)
    (jump-to-register 51 nil))

  (defun my/jump-to-reg-4 ()
    (interactive)
    (jump-to-register 52 nil))

  (defun my/jump-to-reg-5 ()
    (interactive)
    (jump-to-register 53 nil))

  )
#+END_SRC

****** doc-view
#+BEGIN_SRC emacs-lisp
(use-package doc-view
  :defer t
  :ensure nil
  :config
  (setq doc-view-continuous t))
#+END_SRC
****** loaddefs
#+BEGIN_SRC emacs-lisp
(use-package loaddefs
  :defer t
  :ensure nil
  :config
  (setq browse-url-generic-program "google-chrome-stable")
  (setq browse-url-browser-function 'browse-url-generic))
#+END_SRC
***** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer nil
  :ensure nil
  :config
  (setq recentf-max-menu-items '10
        recentf-auto-cleanup 'mode
        recentf-save-file (expand-file-name "recentf" "\~/.emacs.d/var/")
        recentf-exclude   '("Dired"
                            "*.tex"
                            "*slime-repl sbcl"
                            "erc-mode" "help-mode"
                            "completion-list-mode"
                            "/home/dotfiles/emacs/em/var/*.*"
                            "custom.el"
                            "Buffer-menu-mode"
                            "gnus-.*-mode"
                            "occur-mode"
                            "*.Log.*"
                            "*.*log.*"
                            ".*help.*"
                            "^#.*#$"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*Help*"
                            "*Calc Trail*"
                            "magit-process"
                            "magit-diff"
                            "*Org-Babel Error Output*"
                            "\\`\\*helm"
                            "\\`\\*Echo Area"
                            "\\`\\*Minibuf"
                            "Ibuffer"
                            "epc con"
                            "*Shell Command Output*"
                            "*Calculator*"
                            "*Calendar*"
                            "*cheatsheet*"
                            "*Help*"
                            "*Echo Area 0*"
                            "*Echo Area 1"
                            "*Minibuf 0*"
                            "*Minibuf-1*"
                            "info-history"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "bookmark-default.el"
                            "company-shell-autoloads.el"
                            "company.el"
                            "pos-tip-autoloads.el"
                            "*scratch*"
                            "*Warning*"
                            "*Messages*"
                            "^init.org$"
                            "^packs.org$"
                            "^functions.org$"
                            "^keys.org$"
                            "^misc.org$"
                            "^macros.org$"
                            "^hydras.org$"
                            "^links.org$"
                            "^custom.el$"
                            "*Flycheck error messages*"
                            "*Flymake log*"
                            "*company-documentation*"
                            "^.archive.org$"
                            ".*magit.*"
                            ".*elc"
                            "*shell*"
                            "*new*"
                            "*Flycheck error messages*"
                            "*clang-output*"
                            "*Bongo Playlist*"
                            "*eclim: problems*"
                            "*eclimd*"
                            "*compilation*"
                            "*Bongo Library*"
                            ;; ".*pdf"
                            "*Outline.*"
                            "*blacken*"
                            "*server*"
                            "*code-conversion-work*"
                            "*blacken-error*"
                            "*quickrun*"
                            "~/.emacs.d/var/*"))

  ;; (recentf-load-list)
  (recentf-mode -1))
#+END_SRC

***** time-date
#+BEGIN_SRC emacs-lisp
(use-package time-date
  :defer nil
  :ensure nil
  :config
  ;;  measure time
  ;;  https://stackoverflow.com/q/23622296

  (defmacro my/measure-time (&rest body)
    "Measure the time it takes to evaluate BODY."
    (interactive)
    `(let ((time (current-time)))
       ,@body
       (message "%.06f" (float-time (time-since time))))))
#+END_SRC

***** simple
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\fund\\'" . fundamental-mode))
  ;; (add-hook 'after-init-hook 'my/quit-warning-window)
  (add-hook 'completion-list-mode-hook 'my/completion-mode-hooks)
  :config

  (defun my/clone-buffer ()
    (interactive)
    (split-window-below)
    (clone-indirect-buffer-other-window (buffer-name) "1" nil)
    (evil-window-move-far-right))

  ;; completion-list-mode
  (defun my/other-window ()
    (interactive)
    (other-window -1))

  (defun my/completion-mode-hooks ()
    (interactive)
    (forward-paragraph)
    (switch-to-buffer-other-window "*Completions*")
    (hl-line-mode +1))

  (setq pcomplete-help 't
        pcomplete-autolist 't
        pcomplete-ignore-case 't)

  ;; (defun my/quit-warning-window ()
  ;;   (interactive)
  ;;   (quit-windows-on "*Warnings*"))

  ;; https://www.emacswiki.org/emacs/QuotedInsert
  (setq read-quoted-char-radix 10)

  (setq use-dialog-box nil)
  (setq kill-whole-line 't)
;;;; WINDOWS ;;;;
  (setq window-resize-pixelwise t)
  (setq recenter-positions '(top middle bottom))

  (defun my/kill-whole-buffer ()
    (interactive)
    (read-only-mode -1)
    (kill-region (point-min) (point-max))
    (quit-window))

  (defun my/set-fill-120 ()
    (interactive)
    (shut-up
      (set-fill-column 120)))

  (defun my/set-fill-70 ()
    (interactive)
    (shut-up
      (set-fill-column 70)))

  (defun my/set-fill-89 ()
    (interactive)
    (shut-up
      (set-fill-column 89)))

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  ;; (setq fill-column 69)
  (setq-default display-line-numbers nil)
  (line-number-mode +1)
  (setq auto-fill-mode t)
  (setq-default auto-fill-mode t)

  (defun my/eval-buffer ()
    (interactive)
    (progn
      (save-excursion
        (eval-buffer)
        (indent-buffer)
        (my/save-all)
        (message " buffer evaluated"))))

  (defun my/eval-buffer-no-save ()
    (interactive)
    (save-excursion
      (indent-buffer)
      (eval-buffer)
      (message " buffer evaluated")))

  (defun my/move-file-to-trash ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (delete-window))

  (defun my/move-file-to-trash-close-ws ()
    (interactive)
    (move-file-to-trash (buffer-name))
    (kill-buffer)
    (eyebrowse-close-window-config))

  (defun delete-file-and-buffer ()
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))

  (defun show-fill-column ()
    (interactive)
    (describe-variable 'fill-column))

  (defun show-major-mode ()
    (interactive)
    (describe-variable 'major-mode))

  (defun my/buffer-name ()
    (interactive)
    (message (buffer-name)))

  (setq save-interprogram-paste-before-kill nil)
  (setq backward-delete-char-untabify-method 'hungry)

  (general-unbind 'special-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (general-unbind 'messages-buffer-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer])

  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)

  (global-visual-line-mode -1)
  (setq global-visual-line-mode nil)
  (setq-default global-visual-line-mode nil)
  (setq truncate-lines t)
  (setq-default truncate-lines t))
#+END_SRC
***** eval
#+BEGIN_SRC emacs-lisp
(use-package eval
  :defer t
  :ensure nil
  :config
  (setq debug-on-error nil))
#+END_SRC

***** dispnew
#+BEGIN_SRC emacs-lisp
(use-package dispnew
  :defer t
  :ensure nil
  :config
  (setq visible-bell nil))
#+END_SRC

***** editfns
#+BEGIN_SRC emacs-lisp
(use-package editfns
  :defer t
  :ensure nil
  :config
  (put 'narrow-to-region 'disabled nil))
#+END_SRC
***** image
#+BEGIN_SRC emacs-lisp
(use-package image
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'image-mode-map
    "C--" 'image-decrease-size
    "C-=" 'image-increase-size
    "=" 'image-transform-fit-to-width
    "RET" 'image-transform-fit-to-width
    "q" 'image-kill-buffer))
;; "<escape>" 'my/quit-window
#+END_SRC
***** time
#+BEGIN_SRC emacs-lisp
(use-package time
  :ensure nil
  :config
  (setq-default display-time-format "| %a, %H:%M |")
  (setq-default display-time-default-load-average nil)
  (display-time)
  (display-time-mode +1))
#+END_SRC

***** minibuffer
#+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :ensure nil
  :config

  (general-define-key
   :keymaps 'minibuffer-inactive-mode-map
   "<S-insert>" 'yank
   "C-h" 'delete-backward-char)

  (general-define-key
   :keymaps 'minibuffer-local-map
   "<escape>" 'abort-recursive-edit
   "C-u" 'my/backward-kill-line
   "C-w" 'backward-kill-word
   "C-h" 'delete-backward-char))
#+END_SRC
***** debug
#+BEGIN_SRC emacs-lisp
(use-package debug
  :ensure nil
  :config
  (general-nmap
    :keymaps 'debugger-mode-map
    "<escape>" 'ignore)

  (setq debug-on-error nil))
#+END_SRC
***** fringe
#+BEGIN_SRC emacs-lisp
(use-package fringe
  :ensure nil
  :config
  (fringe-mode -1))
#+END_SRC
***** avoid
#+BEGIN_SRC emacs-lisp
;; (use-package avoid
;;   :defer nil
;;   :ensure nil
;;   :config
;;   (setq mouse-avoidance-banish-position '((frame-or-window . frame)
;;                                           (side . right)
;;                                           (side-pos . 3)
;;                                           (top-or-bottom . top)
;;                                           (top-or-bottom-pos . 10)))
;;   (mouse-avoidance-mode 'banish))
#+END_SRC
***** disable-mouse
#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :defer t
  :config
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))
  (global-disable-mouse-mode))
#+END_SRC
***** savehist
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (setq history-length 500)
  (setq savehist-autosave-interval (* 1 30))
  (setq savehist-file "~/.emacs.d/var/savehist.el")
  (setq savehist-additional-variables '(kill-ring search-ring filesets-data))
  :config
  (savehist-mode t))
#+END_SRC
***** subword
#+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :config
  (global-subword-mode +1))
#+END_SRC
***** gud
#+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :config
  (defun my/pdb ()
    (interactive)
    (pdb (buffer-file-name))))
#+END_SRC
***** messages-buffer-mode
***** midnight-mode
#+BEGIN_SRC emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq midnight-period 10800)
  (midnight-mode +1))
#+END_SRC
**** N1
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:49
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: N1/Builtins
:ARCHIVE_CATEGORY: init
:END:
***** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
***** Startup
#+BEGIN_SRC emacs-lisp
(setq startup-screen-inhibit-startup-screen t)
#+END_SRC
***** Auto Revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1))
#+END_SRC
***** Files
#+BEGIN_SRC emacs-lisp
(use-package files
  ;; :init
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
  :init
  ;; (add-to-list 'write-file-functions 'redraw-display)
  (setq write-file-functions '(recentf-track-opened-file ))
  :ensure nil
  :config
  ;; (setq write-file-functions '(recentf-track-opened-file undo-tree-save-history-hook))
  (setq save-silently t
        version-control t
        kept-new-versions 5
        kept-old-versions 2
        bookmark-save-flag 1
        delete-old-versions t
        vc-make-backup-files t
        buffer-save-without-query t
        backup-by-copying-when-linked t
        large-file-warning-threshold nil
        backup-directory-alist '(("." . "~/.emacs.d/var/backup"))
        find-file-suppress-same-file-warnings t)
  (setq auto-save-timeout 30)
  (setq auto-save-interval 150)
  ;; (auto-save-mode +1)
  (auto-save-visited-mode -1)
  )
#+END_SRC
***** Prog
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\prog\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config

  (defun my/prog-mode-hooks ()
    (interactive)
    (shut-up
      (company-mode +1)
      (tab-jump-out-mode +1)
      (hl-line-mode +1)
      ;; (my/company-idle-three-prefix-one)
      (comment-auto-fill)
      (show-paren-mode +1)
      (company-mode +1)
      (toggle-truncate-lines +1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      (smartparens-mode +1)
      (evil-smartparens-mode +1)))

  (defun my/prog-save-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (save-buffer))

  (defun my/insert-* ()
    (interactive)
    (evil-insert-state)
    (insert "*"))

  (defun my/insert-*-space ()
    (interactive)
    (evil-insert-state)
    (insert "* "))

  (defun my/insert-plus-space ()
    (interactive)
    (evil-insert-state)
    (insert "+ "))

  (defun my/insert-minus-space ()
    (interactive)
    (evil-insert-state)
    (insert "- "))

  (defun my/insert-0-space ()
    (interactive)
    (evil-insert-state)
    (insert "0 "))

  (defun my/insert-8 ()
    (interactive)
    (evil-insert-state)
    (insert "8"))

  (defun my/insert-1-space ()
    (interactive)
    (evil-insert-state)
    (insert "1 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-3-space ()
    (evil-insert-state)
    (interactive)
    (insert "3 "))

  (defun my/insert-4-space ()
    (evil-insert-state)
    (interactive)
    (insert "4 "))

  (defun my/insert-5-space ()
    (evil-insert-state)
    (interactive)
    (insert "5 "))

  (defun my/insert-6-space ()
    (evil-insert-state)
    (interactive)
    (insert "6 "))

  (defun my/insert-7-space ()
    (evil-insert-state)
    (interactive)
    (insert "7 "))

  (defun my/insert-8-space ()
    (evil-insert-state)
    (interactive)
    (insert "8 "))

  (defun my/insert-9-space ()
    (evil-insert-state)
    (interactive)
    (insert "9 "))

  (general-unbind 'prog-mode-map
    :with 'my/prog-save-buffer
    [remap save-buffer])

  ;; https://www.emacswiki.org/emacs/autofillmode
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'my/only-indent-buffer)

  (general-nmap
    :keymaps 'prog-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)

  (general-define-key
   :keymaps 'prog-mode-map
   ;; "C-c 9" 'my/comment-and-format-code-macro
   "C-c y" 'my/company-show-options
   "<C-return>" nil
   "<M-return>" 'my/only-indent-buffer)

  (general-define-key
   :keymaps 'prog-mode-map
   "<M-return>" 'my/only-indent-buffer))
#+END_SRC
***** Text Builtin
#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (add-hook 'text-mode-hook (lambda () (visual-line-mode +1)))
  :ensure nil
  :config

  (defun my/text-hooks ()
    (interactive)
    (shut-up
      (subword-mode +1)
      (auto-capitalize-mode +1)
      (tab-jump-out-mode +1)
      ;; (evil-better-visual-line-on)
      (wc-mode +1)
      (electric-pair-local-mode +1)
      (show-paren-mode +1)
      (smartparens-mode +1)
      ;; (toggle-truncate-lines -1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      ;; (evil-swap-keys-swap-double-single-quotes)
      ))

  (defun my/paragraph-backwards ()
    (interactive)
    (previous-line)
    (backward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/paragraph-forward ()
    (interactive)
    (forward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/enable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode +1)
    (aggressive-fill-paragraph-mode +1)
    (message " both fills enabled"))

  (defun my/disable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode -1)
    (aggressive-fill-paragraph-mode -1)
    (message " both fills disabled"))

  (defun my/prose-enable ()
    (interactive)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (hl-line-mode -1)
    ;; (hl-sentence-mode +1)
    ;; (typo-mode +1)
    (pabbrev-mode +1))

  (defun my/prose-disable ()
    (interactive)
    (shut-up
      (flyspell-mode -1)
      (auto-capitalize-mode 1)
      (tab-jump-out-mode 1)
      (electric-operator-mode 1)
      (wc-mode 1)
      (hl-line-mode -1)
      ;; (hl-sentence-mode -1)
      (pabbrev-mode -1)
      ;; (typo-mode -1)
      ))

  (defun my/prose-english ()
    (interactive)
    (my/prose-enable)
    (shut-up
      (flyspell-mode +1)
      (ispell-change-dictionary "english")
      (flyspell-buffer))
    (message " prose english"))

  (defun my/prose-brasileiro ()
    (interactive)
    (my/prose-enable)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    ;; (flyspell-buffer)
    (message " prosa brasileira"))

  (defun my/ispell-english ()
    (interactive)
    (ispell-change-dictionary "english")
    (flyspell-mode +1)
    (message " english"))

  (defun my/ispell-brasileiro ()
    (interactive)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    (message " portuguรชs"))

  (defun my/ispell-dict-options ()
    (interactive)
    (counsel-M-x "^my/ispell-ask-dict "))

  (defun my/ispell-ask-dict-br ()
    (interactive)
    (ispell-change-dictionary "brasileiro"))

  (defun my/ispell-ask-dict-en ()
    (interactive)
    (ispell-change-dictionary "american"))

  (general-nvmap
    :keymaps 'text-mode-map
    "RET" 'hydra-spell/body)

  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
***** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :ensure nil
  :config
  (setq eldoc-idle-delay 0.5)
  (global-eldoc-mode -1))
#+END_SRC
***** hs-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :config

  ;; (defun my/my-hs-toogle-hiding ()
  ;;   (interactive)
  ;;   (beginning-of-line)
  ;;   (hs-toggle-hiding))

  (general-nvmap
    :keymaps 'hs-minor-mode-map
    "<tab>" 'hs-toggle-hiding)

  (general-unbind 'hs-minor-mode-map
    :with 'hs-toggle-hiding
    [remap evil-toggle-fold])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-hide-all
    [remap evil-close-folds])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-show-all
    [remap outline-show-all]))
#+END_SRC

***** select
#+BEGIN_SRC emacs-lisp
;; (use-package select
;;   :ensure nil
;;   :config
;;   (setq x-select-enable-primary nil))
#+END_SRC
***** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :init
  (add-hook 'ibuffer-hook 'my/ibuffer-hooks)
  :general
  (general-nvmap
    :keymaps 'ibuffer-mode-map
    "<escape>" 'quit-window
    "C-p" 'ibuffer-backward-line
    "C-n" 'ibuffer-forward-line
    "k" 'ibuffer-backward-line
    "j" 'ibuffer-forward-line
    "C-j" 'my/ibuffer-forward-group
    "C-k" 'my/ibuffer-backward-group)
  :custom
  (ibuffer-expert t)
  (ibuffer-default-shrink-to-minimum-size t)
  (ibuffer-always-show-last-buffer t)
  (ibuffer-saved-filter-groups
   (quote (("default"
            ("org" (mode . org-mode))
            ("elisp" (mode . emacs-lisp-mode))
            ("markdown" (mode . markdown-mode))
            ("emacs" (or
                      (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")
                      (name . "^\\*Warnings\\*$") (name . "^\\*info\\*$")))
            ("help" (or
                     (name . "^\\*Help\\*$")
                     (name . "^\\*helpful.*\\*$")))))))

  (ibuffer-directory-abbrev-alist '(("\\`/home/dotfiles/emacs/em/modules/packages/misc/" . "*misc*/")
                                    ("\\`/home/Documents/Studying/Prog/WebDev/" . "*web*/")
                                    ("\\`/home/Documents/Studying/" . "*study*/")
                                    ("\\`/home/Documents/Org/Agenda/" . "*agenda*/")
                                    ("\\`/home/Documents/Org/" . "*org*/")
                                    ("\\`/home/dotfiles/emacs/em/tmp/scratches/" . "*scratches*/")
                                    ("\\`/home/dotfiles/emacs/em/modules/packages/" . "*packages*/")))

  (ibuffer-formats '((" "
                      (name 18 18 :left :elide) "   "
                      (mode 16 16 :left :elide) "   " filename)
                     (mark " " (name 16 -1) " " filename)))

  :config
  (defun my/ibuffer-forward-group ()
    (interactive)
    (ibuffer-forward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-backward-group ()
    (interactive)
    (ibuffer-backward-filter-group)
    (ibuffer-backward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-hooks ()
    (interactive)
    (hl-line-mode +1)
    (ibuffer-switch-to-saved-filter-groups "default")
    (olivetti-mode +1))

  (general-unbind 'ibuffer-mode-map
    :with 'ignore
    [remap evil-forward-char]
    [remap evil-forward-word-begin]
    [remap evil-backward-char]
    [remap evil-end-of-visual-line]))
#+END_SRC

***** info
#+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :init
  (add-hook 'Info-mode-hook 'my/info-hook-commands)
  :config

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-info-eintr ()
    (interactive)
    (info "eintr"))

  (defun my/eval-next-sexp-function ()
    (interactive)
    (my/eval-next-sexp-macro))

  (defun my/info-hook-commands ()
    (interactive)
    (line-no-numbers)
    (hl-line-mode +1)
    (centered-cursor-mode +1)
    (hl-sentence-mode)
    (message ""))

  (defun my/info-commands ()
    (interactive)
    (counsel-M-x "^Info- "))

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-exit-emacs-state])

  (general-unbind 'Info-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Info-mode-map
    :with 'last-buffer
    [remap Info]
    [remap Info-exit]
    [remap info])

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-normal-state])

  (general-nvmap
    :keymaps 'Info-mode-map
    "C-c C-c" 'eval-last-sexp
    "<C-return>" 'my/eval-next-sexp-function
    "<left>" 'evil-backward-sentence-begin
    "<right>" 'evil-forward-sentence-begin
    "<up>" 'my/paragraph-backwards
    "<down>" 'my/paragraph-forward
    "C-n" 'Info-forward-node
    "C-p" 'Info-backward-node
    "<backspace>" 'link-hint-open-link
    "M-n" 'my/paragraph-forward
    "H" 'Info-history-back
    "L" 'Info-history-forward
    "m" 'Info-menu
    "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "<left>" 'evil-backward-sentence-begin
   "<right>" 'evil-forward-sentence-begin
   "H" 'Info-history-back
   "L" 'Info-history-forward
   "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "m" 'Info-menu
   "C-q" 'my/cheat-sheet))
#+END_SRC

***** bs cycle
#+BEGIN_SRC emacs-lisp
;; (use-package bs
;;   :ensure nil
;;   :init
;;   (setq bs-configurations '(("all" nil nil nil nil nil)

;; 			    ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("files-and-scratch" "^\\*scratch\\*$" "^info_keys.org$" nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last))))
#+END_SRC
***** cc mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :defer t
  ;; :ensure cc-mode
  :init
  (setq-default c-default-style "linux")
  (add-hook 'c-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell foo))

  (defun my/execute-c-program-shell ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (insert "sp")
      (comint-send-input)
      (insert "gcc ")
      (yank)
      (insert " && ./a.out")
      (comint-send-input)
      (sit-for 0.3)
      (comint-clear-buffer)))

  (general-imap
    :keymaps 'c-mode-map
    "<M-return>" 'my/emacs-indent-buffer
    "C-;" 'my/c-semicolon-del-blank-lines)

  (general-nvmap
    :keymaps 'c-mode-map
    "zk" 'flycheck-previous-error
    "zj" 'flycheck-next-error
    "$" 'c-end-of-statement
    "0" 'c-beginning-of-statement
    "M-v" 'c-goto-vars
    "<escape>" 'my/quiet-save-buffer-c
    "<M-return>" 'my/emacs-indent-buffer))
#+END_SRC
***** shell mode
#+BEGIN_SRC emacs-lisp
(use-package shell
  :defer t
  :ensure nil
  :init
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'after-save-hook 'my/after-save-hooks)
  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)
  (add-hook 'shell-mode-hook
            (lambda ()
              (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
  :config

  (defun my/after-save-hooks ()
    (interactive)
    (executable-make-buffer-file-executable-if-script-p)
    ;; (redraw-display)
    )
  ;; (magit-stage-modified)

  (defun my/shell-mode-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1)
    (setq-local company-auto-complete nil)
    ;; (my/company-idle-one-prefix-one-quiet)
    (my/shell-source-bashrc))

  (defun my/shell-go-up ()
    (interactive)
    (insert "cd ..")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-back ()
    (interactive)
    (comint-clear-buffer)
    (insert "cd - && ls")
    (comint-send-input))

  (defun my/shell-fasd-start ()
    (interactive)
    (insert "jj "))

  (defun my/shell-fasd-complete ()
    (interactive)
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-previous ()
    (interactive)
    (comint-clear-buffer)
    (insert "my-shell-go-previous")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))
;;; shell_extras.el ends here

  (general-imap
    :keymaps 'shell-mode-map
    "C-u" 'comint-kill-input
    "C-p" 'comint-previous-input
    "C-n" 'comint-next-input
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "C-/" 'my/shell-clear-and-list
    "M-p" 'my/shell-go-previous
    "C-c j" 'my/evil-shell-bottom)

  (nvmap
    :keymaps 'shell-mode-map
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "M-p" 'my/shell-go-previous
    "C-/" 'my/shell-clear-and-list
    "C-c ;" 'kill-buffer-and-window)

  (general-define-key
   :keymaps 'shell-mode-map
   "C-u" 'comint-kill-input
   "<M-return>" nil
   "C-;" 'kill-buffer-and-window
   "C-t" 'my/shell-go-back
   "C-c 0" 'my/jump-to-register-91
   "M-e" 'counsel-shell-history
   "C-n" 'comint-next-input
   "C-l" 'comint-clear-buffer
   "C-c u" 'universal-argument
   "M-p" 'my/shell-go-previous
   "C-p" 'comint-previous-input
   "C-c j" 'my/evil-shell-bottom)

  (general-unbind 'shell-mode-map
    :with 'quit-window
    [remap my/no-highlight])

  (general-unbind 'shell-mode-map
    :with 'my/shell-go-up
    [remap ivy-yasnippet])

  (general-unbind 'shell-mode-map
    :with nil
    [remap evil-normal-state]
    [remap evil-exit-emacs-state])

  (general-unbind 'shell-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'shell-mode-map
    :with nil
    [remap hydra-text-main/body])

  (general-unbind 'shell-mode-map
    :with 'my/shell-resync
    [remap shell-resync-dirs])

  (defun my/shell-resync ()
    (interactive)
    (comint-kill-whole-line 1)
    (shell-resync-dirs)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-list ()
    (interactive)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-clear-and-list ()
    (interactive)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-source-bashrc ()
    (interactive)
    (insert "source ~/.bashrc")
    (comint-send-input)
    (comint-clear-buffer))

  (general-define-key
   :keymaps 'company-active-map
   "<return>" nil))
#+END_SRC

***** eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :ensure nil
  :init
  (setq eshell-banner-message "")
  (setq comint-terminfo-terminal "ansi"))
#+END_SRC
***** calc
#+BEGIN_SRC emacs-lisp
(use-package calc
  :defer t
  :ensure nil
  :config

  ;; (general-vmap
  ;;   :keymaps 'override
  ;;   "<XF86Calculator>" nil
  ;;   "X" 'my/calc-region)

  (general-nmap
    :keymaps 'override
    ;; "C-c p" 'quick-calc
    "<XF86Calculator>" 'quick-calc)

  (general-nvmap
    :keymaps 'calc-mode-map
    "C-l" 'calc-reset
    "<escape>" 'calc-quit))
#+END_SRC

***** compilate
#+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :config

  (setq-default compilation-window-height 30)
  (setq compilation-window-height 30)

  ;; (general-unbind 'compilation-mode-map
  ;;   :with 'ignore
  ;;   [remap my/quiet-save-buffer])

  (general-nvmap
    :keymaps 'compilation-mode-map
    "i" 'quit-window
    "<escape>" 'quit-window
    "<C-return>" 'quit-window
    "RET" 'quit-window
    "C-/" 'quit-window
    ";" 'quit-window))
#+END_SRC
***** conf-mode
#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'conf-space-mode-hook 'my/conf-hooks)
  (add-hook 'conf-unix-mode-hook 'my/conf-hooks)
  :config
  (defun my/conf-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (hl-line-mode +1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (electric-pair-local-mode 1)
    (highlight-numbers-mode 1)
    (highlight-operators-mode 1)
    (highlight-indent-guides-mode 1)
    (subword-mode 1)
    (tab-jump-out-mode 1))

  (electric-pair-local-mode 1)
  (general-define-key
   :keymaps 'conf-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC

***** with-editor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :defer t
  :ensure nil
  :init
  (add-hook 'with-editor-mode-hook #'my/with-editor-hooks)
  :config
  (defun my/with-editor-hooks ()
    (interactive)
    (my/prose-enable)
    (flyspell-mode -1)
    (evil-insert-state))

  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish)

  (general-unbind 'with-editor-mode-map
    :with 'with-editor-cancel
    [remap my/ex-noh]))
#+END_SRC
***** desktop package
#+BEGIN_SRC emacs-lisp
;; (use-package desktop
;;   :ensure nil
;;   :after eyebrowse
;;   :config
;;   (setq desktop-save t
;;         desktop-save-buffer t
;;         desktop-restore-eager t
;;         desktop-restore-frames t
;;         desktop-auto-save-timeout 15
;;         desktop-load-locked-desktop t
;;         desktop-restore-reuses-frames t
;;         desktop-base-file-name ".desktop"
;;         desktop-restore-forces-onscreen nil
;;         desktop-restore-in-current-display t
;;         desktop-base-lock-name ".desktop.lock"
;;         desktop-dirname "~/.emacs.d/var/desktop")

;;   (add-to-list 'desktop-modes-not-to-save 'special-mode)
;;   (desktop-save-mode 1))
#+END_SRC
***** custom
#+BEGIN_SRC emacs-lisp
(use-package Custom-mode
  :defer t
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'custom-mode-map
    "q" 'Custom-buffer-done)
  (general-nvmap
    :keymaps 'custom-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)
  (general-define-key
   :keymaps 'custom-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
***** hippie-exp
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :defer t
  :ensure nil
  :config
  (general-imap
    "M-/" 'hippie-expand))
#+END_SRC
**** N1
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:50
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: N1/Builtins
:ARCHIVE_CATEGORY: init
:END:
***** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
***** Startup
#+BEGIN_SRC emacs-lisp
(setq startup-screen-inhibit-startup-screen t)
#+END_SRC
***** Auto Revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1))
#+END_SRC
***** Files
#+BEGIN_SRC emacs-lisp
(use-package files
  ;; :init
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
  :init
  ;; (add-to-list 'write-file-functions 'redraw-display)
  (setq write-file-functions '(recentf-track-opened-file ))
  :ensure nil
  :config
  ;; (setq write-file-functions '(recentf-track-opened-file undo-tree-save-history-hook))
  (setq save-silently t
        version-control t
        kept-new-versions 5
        kept-old-versions 2
        bookmark-save-flag 1
        delete-old-versions t
        vc-make-backup-files t
        buffer-save-without-query t
        backup-by-copying-when-linked t
        large-file-warning-threshold nil
        backup-directory-alist '(("." . "~/.emacs.d/var/backup"))
        find-file-suppress-same-file-warnings t)
  (setq auto-save-timeout 30)
  (setq auto-save-interval 150)
  ;; (auto-save-mode +1)
  (auto-save-visited-mode -1)
  )
#+END_SRC
***** Prog
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\prog\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config

  (defun my/prog-mode-hooks ()
    (interactive)
    (shut-up
      (company-mode +1)
      (tab-jump-out-mode +1)
      (hl-line-mode +1)
      ;; (my/company-idle-three-prefix-one)
      (comment-auto-fill)
      (show-paren-mode +1)
      (company-mode +1)
      (toggle-truncate-lines +1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      (smartparens-mode +1)
      (evil-smartparens-mode +1)))

  (defun my/prog-save-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (save-buffer))

  (defun my/insert-* ()
    (interactive)
    (evil-insert-state)
    (insert "*"))

  (defun my/insert-*-space ()
    (interactive)
    (evil-insert-state)
    (insert "* "))

  (defun my/insert-plus-space ()
    (interactive)
    (evil-insert-state)
    (insert "+ "))

  (defun my/insert-minus-space ()
    (interactive)
    (evil-insert-state)
    (insert "- "))

  (defun my/insert-0-space ()
    (interactive)
    (evil-insert-state)
    (insert "0 "))

  (defun my/insert-8 ()
    (interactive)
    (evil-insert-state)
    (insert "8"))

  (defun my/insert-1-space ()
    (interactive)
    (evil-insert-state)
    (insert "1 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-3-space ()
    (evil-insert-state)
    (interactive)
    (insert "3 "))

  (defun my/insert-4-space ()
    (evil-insert-state)
    (interactive)
    (insert "4 "))

  (defun my/insert-5-space ()
    (evil-insert-state)
    (interactive)
    (insert "5 "))

  (defun my/insert-6-space ()
    (evil-insert-state)
    (interactive)
    (insert "6 "))

  (defun my/insert-7-space ()
    (evil-insert-state)
    (interactive)
    (insert "7 "))

  (defun my/insert-8-space ()
    (evil-insert-state)
    (interactive)
    (insert "8 "))

  (defun my/insert-9-space ()
    (evil-insert-state)
    (interactive)
    (insert "9 "))

  (general-unbind 'prog-mode-map
    :with 'my/prog-save-buffer
    [remap save-buffer])

  ;; https://www.emacswiki.org/emacs/autofillmode
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'my/only-indent-buffer)

  (general-nmap
    :keymaps 'prog-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)

  (general-define-key
   :keymaps 'prog-mode-map
   ;; "C-c 9" 'my/comment-and-format-code-macro
   "C-c y" 'my/company-show-options
   "<C-return>" nil
   "<M-return>" 'my/only-indent-buffer)

  (general-define-key
   :keymaps 'prog-mode-map
   "<M-return>" 'my/only-indent-buffer))
#+END_SRC
***** Text Builtin
#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (add-hook 'text-mode-hook (lambda () (visual-line-mode +1)))
  :ensure nil
  :config

  (defun my/text-hooks ()
    (interactive)
    (shut-up
      (subword-mode +1)
      (auto-capitalize-mode +1)
      (tab-jump-out-mode +1)
      ;; (evil-better-visual-line-on)
      (wc-mode +1)
      (electric-pair-local-mode +1)
      (show-paren-mode +1)
      (smartparens-mode +1)
      ;; (toggle-truncate-lines -1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      ;; (evil-swap-keys-swap-double-single-quotes)
      ))

  (defun my/paragraph-backwards ()
    (interactive)
    (previous-line)
    (backward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/paragraph-forward ()
    (interactive)
    (forward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/enable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode +1)
    (aggressive-fill-paragraph-mode +1)
    (message " both fills enabled"))

  (defun my/disable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode -1)
    (aggressive-fill-paragraph-mode -1)
    (message " both fills disabled"))

  (defun my/prose-enable ()
    (interactive)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (hl-line-mode -1)
    ;; (hl-sentence-mode +1)
    ;; (typo-mode +1)
    (pabbrev-mode +1))

  (defun my/prose-disable ()
    (interactive)
    (shut-up
      (flyspell-mode -1)
      (auto-capitalize-mode 1)
      (tab-jump-out-mode 1)
      (electric-operator-mode 1)
      (wc-mode 1)
      (hl-line-mode -1)
      ;; (hl-sentence-mode -1)
      (pabbrev-mode -1)
      ;; (typo-mode -1)
      ))

  (defun my/prose-english ()
    (interactive)
    (my/prose-enable)
    (shut-up
      (flyspell-mode +1)
      (ispell-change-dictionary "english")
      (flyspell-buffer))
    (message " prose english"))

  (defun my/prose-brasileiro ()
    (interactive)
    (my/prose-enable)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    ;; (flyspell-buffer)
    (message " prosa brasileira"))

  (defun my/ispell-english ()
    (interactive)
    (ispell-change-dictionary "english")
    (flyspell-mode +1)
    (message " english"))

  (defun my/ispell-brasileiro ()
    (interactive)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    (message " portuguรชs"))

  (defun my/ispell-dict-options ()
    (interactive)
    (counsel-M-x "^my/ispell-ask-dict "))

  (defun my/ispell-ask-dict-br ()
    (interactive)
    (ispell-change-dictionary "brasileiro"))

  (defun my/ispell-ask-dict-en ()
    (interactive)
    (ispell-change-dictionary "american"))

  (general-nvmap
    :keymaps 'text-mode-map
    "RET" 'hydra-spell/body)

  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
***** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :ensure nil
  :config
  (setq eldoc-idle-delay 0.5)
  (global-eldoc-mode -1))
#+END_SRC
***** hs-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :config

  ;; (defun my/my-hs-toogle-hiding ()
  ;;   (interactive)
  ;;   (beginning-of-line)
  ;;   (hs-toggle-hiding))

  (general-nvmap
    :keymaps 'hs-minor-mode-map
    "<tab>" 'hs-toggle-hiding)

  (general-unbind 'hs-minor-mode-map
    :with 'hs-toggle-hiding
    [remap evil-toggle-fold])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-hide-all
    [remap evil-close-folds])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-show-all
    [remap outline-show-all]))
#+END_SRC

***** select
#+BEGIN_SRC emacs-lisp
;; (use-package select
;;   :ensure nil
;;   :config
;;   (setq x-select-enable-primary nil))
#+END_SRC
***** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :init
  (add-hook 'ibuffer-hook 'my/ibuffer-hooks)
  :general
  (general-nvmap
    :keymaps 'ibuffer-mode-map
    "<escape>" 'quit-window
    "C-p" 'ibuffer-backward-line
    "C-n" 'ibuffer-forward-line
    "k" 'ibuffer-backward-line
    "j" 'ibuffer-forward-line
    "C-j" 'my/ibuffer-forward-group
    "C-k" 'my/ibuffer-backward-group)
  :custom
  (ibuffer-expert t)
  (ibuffer-default-shrink-to-minimum-size t)
  (ibuffer-always-show-last-buffer t)
  (ibuffer-saved-filter-groups
   (quote (("default"
            ("org" (mode . org-mode))
            ("elisp" (mode . emacs-lisp-mode))
            ("markdown" (mode . markdown-mode))
            ("emacs" (or
                      (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")
                      (name . "^\\*Warnings\\*$") (name . "^\\*info\\*$")))
            ("help" (or
                     (name . "^\\*Help\\*$")
                     (name . "^\\*helpful.*\\*$")))))))

  (ibuffer-directory-abbrev-alist '(("\\`/home/dotfiles/emacs/em/modules/packages/misc/" . "*misc*/")
                                    ("\\`/home/Documents/Studying/Prog/WebDev/" . "*web*/")
                                    ("\\`/home/Documents/Studying/" . "*study*/")
                                    ("\\`/home/Documents/Org/Agenda/" . "*agenda*/")
                                    ("\\`/home/Documents/Org/" . "*org*/")
                                    ("\\`/home/dotfiles/emacs/em/tmp/scratches/" . "*scratches*/")
                                    ("\\`/home/dotfiles/emacs/em/modules/packages/" . "*packages*/")))

  (ibuffer-formats '((" "
                      (name 18 18 :left :elide) "   "
                      (mode 16 16 :left :elide) "   " filename)
                     (mark " " (name 16 -1) " " filename)))

  :config
  (defun my/ibuffer-forward-group ()
    (interactive)
    (ibuffer-forward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-backward-group ()
    (interactive)
    (ibuffer-backward-filter-group)
    (ibuffer-backward-filter-group)
    (ibuffer-forward-line))

  (defun my/ibuffer-hooks ()
    (interactive)
    (hl-line-mode +1)
    (ibuffer-switch-to-saved-filter-groups "default")
    (olivetti-mode +1))

  (general-unbind 'ibuffer-mode-map
    :with 'ignore
    [remap evil-forward-char]
    [remap evil-forward-word-begin]
    [remap evil-backward-char]
    [remap evil-end-of-visual-line]))
#+END_SRC

***** info
#+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :init
  (add-hook 'Info-mode-hook 'my/info-hook-commands)
  :config

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-eintr-bookmark ()
    (interactive)
    (bookmark-jump "Eintr"))

  (defun my/goto-info-eintr ()
    (interactive)
    (info "eintr"))

  (defun my/eval-next-sexp-function ()
    (interactive)
    (my/eval-next-sexp-macro))

  (defun my/info-hook-commands ()
    (interactive)
    (line-no-numbers)
    (hl-line-mode +1)
    (centered-cursor-mode +1)
    (hl-sentence-mode)
    (message ""))

  (defun my/info-commands ()
    (interactive)
    (counsel-M-x "^Info- "))

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-exit-emacs-state])

  (general-unbind 'Info-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Info-mode-map
    :with 'last-buffer
    [remap Info]
    [remap Info-exit]
    [remap info])

  (general-unbind 'Info-mode-map
    :with 'ignore
    [remap evil-normal-state])

  (general-nvmap
    :keymaps 'Info-mode-map
    "C-c C-c" 'eval-last-sexp
    "<C-return>" 'my/eval-next-sexp-function
    "<left>" 'evil-backward-sentence-begin
    "<right>" 'evil-forward-sentence-begin
    "<up>" 'my/paragraph-backwards
    "<down>" 'my/paragraph-forward
    "C-n" 'Info-forward-node
    "C-p" 'Info-backward-node
    "<backspace>" 'link-hint-open-link
    "M-n" 'my/paragraph-forward
    "H" 'Info-history-back
    "L" 'Info-history-forward
    "m" 'Info-menu
    "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "<left>" 'evil-backward-sentence-begin
   "<right>" 'evil-forward-sentence-begin
   "H" 'Info-history-back
   "L" 'Info-history-forward
   "c" 'my/info-commands)

  (general-define-key
   :keymaps 'Info-mode-map
   "m" 'Info-menu
   "C-q" 'my/cheat-sheet))
#+END_SRC

***** bs cycle
#+BEGIN_SRC emacs-lisp
;; (use-package bs
;;   :ensure nil
;;   :init
;;   (setq bs-configurations '(("all" nil nil nil nil nil)

;; 			    ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("files-and-scratch" "^\\*scratch\\*$" "^info_keys.org$" nil bs-visits-non-file bs-sort-buffer-interns-are-last)

;; 			    ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last))))
#+END_SRC
***** cc mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :defer t
  ;; :ensure cc-mode
  :init
  (setq-default c-default-style "linux")
  (add-hook 'c-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell foo))

  (defun my/execute-c-program-shell ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (insert "sp")
      (comint-send-input)
      (insert "gcc ")
      (yank)
      (insert " && ./a.out")
      (comint-send-input)
      (sit-for 0.3)
      (comint-clear-buffer)))

  (general-imap
    :keymaps 'c-mode-map
    "<M-return>" 'my/emacs-indent-buffer
    "C-;" 'my/c-semicolon-del-blank-lines)

  (general-nvmap
    :keymaps 'c-mode-map
    "zk" 'flycheck-previous-error
    "zj" 'flycheck-next-error
    "$" 'c-end-of-statement
    "0" 'c-beginning-of-statement
    "M-v" 'c-goto-vars
    "<escape>" 'my/quiet-save-buffer-c
    "<M-return>" 'my/emacs-indent-buffer))
#+END_SRC
***** shell mode
#+BEGIN_SRC emacs-lisp
(use-package shell
  :defer t
  :ensure nil
  :init
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'after-save-hook 'my/after-save-hooks)
  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)
  (add-hook 'shell-mode-hook
            (lambda ()
              (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
  :config

  (defun my/after-save-hooks ()
    (interactive)
    (executable-make-buffer-file-executable-if-script-p)
    ;; (redraw-display)
    )
  ;; (magit-stage-modified)

  (defun my/shell-mode-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1)
    (setq-local company-auto-complete nil)
    ;; (my/company-idle-one-prefix-one-quiet)
    (my/shell-source-bashrc))

  (defun my/shell-go-up ()
    (interactive)
    (insert "cd ..")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-back ()
    (interactive)
    (comint-clear-buffer)
    (insert "cd - && ls")
    (comint-send-input))

  (defun my/shell-fasd-start ()
    (interactive)
    (insert "jj "))

  (defun my/shell-fasd-complete ()
    (interactive)
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-go-previous ()
    (interactive)
    (comint-clear-buffer)
    (insert "my-shell-go-previous")
    (comint-send-input)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))
;;; shell_extras.el ends here

  (general-imap
    :keymaps 'shell-mode-map
    "C-u" 'comint-kill-input
    "C-p" 'comint-previous-input
    "C-n" 'comint-next-input
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "C-/" 'my/shell-clear-and-list
    "M-p" 'my/shell-go-previous
    "C-c j" 'my/evil-shell-bottom)

  (nvmap
    :keymaps 'shell-mode-map
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "M-i" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "M-p" 'my/shell-go-previous
    "C-/" 'my/shell-clear-and-list
    "C-c ;" 'kill-buffer-and-window)

  (general-define-key
   :keymaps 'shell-mode-map
   "C-u" 'comint-kill-input
   "<M-return>" nil
   "C-;" 'kill-buffer-and-window
   "C-t" 'my/shell-go-back
   "C-c 0" 'my/jump-to-register-91
   "M-e" 'counsel-shell-history
   "C-n" 'comint-next-input
   "C-l" 'comint-clear-buffer
   "C-c u" 'universal-argument
   "M-p" 'my/shell-go-previous
   "C-p" 'comint-previous-input
   "C-c j" 'my/evil-shell-bottom)

  (general-unbind 'shell-mode-map
    :with 'quit-window
    [remap my/no-highlight])

  (general-unbind 'shell-mode-map
    :with 'my/shell-go-up
    [remap ivy-yasnippet])

  (general-unbind 'shell-mode-map
    :with nil
    [remap evil-normal-state]
    [remap evil-exit-emacs-state])

  (general-unbind 'shell-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'shell-mode-map
    :with nil
    [remap hydra-text-main/body])

  (general-unbind 'shell-mode-map
    :with 'my/shell-resync
    [remap shell-resync-dirs])

  (defun my/shell-resync ()
    (interactive)
    (comint-kill-whole-line 1)
    (shell-resync-dirs)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-list ()
    (interactive)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-clear-and-list ()
    (interactive)
    (comint-clear-buffer)
    (insert "ls")
    (comint-send-input))

  (defun my/shell-source-bashrc ()
    (interactive)
    (insert "source ~/.bashrc")
    (comint-send-input)
    (comint-clear-buffer))

  (general-define-key
   :keymaps 'company-active-map
   "<return>" nil))
#+END_SRC

***** eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :ensure nil
  :init
  (setq eshell-banner-message "")
  (setq comint-terminfo-terminal "ansi"))
#+END_SRC
***** calc
#+BEGIN_SRC emacs-lisp
(use-package calc
  :defer t
  :ensure nil
  :config

  ;; (general-vmap
  ;;   :keymaps 'override
  ;;   "<XF86Calculator>" nil
  ;;   "X" 'my/calc-region)

  (general-nmap
    :keymaps 'override
    ;; "C-c p" 'quick-calc
    "<XF86Calculator>" 'quick-calc)

  (general-nvmap
    :keymaps 'calc-mode-map
    "C-l" 'calc-reset
    "<escape>" 'calc-quit))
#+END_SRC

***** compilate
#+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :config

  (setq-default compilation-window-height 30)
  (setq compilation-window-height 30)

  ;; (general-unbind 'compilation-mode-map
  ;;   :with 'ignore
  ;;   [remap my/quiet-save-buffer])

  (general-nvmap
    :keymaps 'compilation-mode-map
    "i" 'quit-window
    "<escape>" 'quit-window
    "<C-return>" 'quit-window
    "RET" 'quit-window
    "C-/" 'quit-window
    ";" 'quit-window))
#+END_SRC
***** conf-mode
#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'conf-space-mode-hook 'my/conf-hooks)
  (add-hook 'conf-unix-mode-hook 'my/conf-hooks)
  :config
  (defun my/conf-hooks ()
    (interactive)
    (subword-mode 1)
    (company-mode 1)
    (flycheck-mode 1)
    (hl-line-mode +1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (electric-pair-local-mode 1)
    (highlight-numbers-mode 1)
    (highlight-operators-mode 1)
    (highlight-indent-guides-mode 1)
    (subword-mode 1)
    (tab-jump-out-mode 1))

  (electric-pair-local-mode 1)
  (general-define-key
   :keymaps 'conf-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC

***** with-editor
#+BEGIN_SRC emacs-lisp
(use-package with-editor
  :defer t
  :ensure nil
  :init
  (add-hook 'with-editor-mode-hook #'my/with-editor-hooks)
  :config
  (defun my/with-editor-hooks ()
    (interactive)
    (my/prose-enable)
    (flyspell-mode -1)
    (evil-insert-state))

  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish)

  (general-unbind 'with-editor-mode-map
    :with 'with-editor-cancel
    [remap my/ex-noh]))
#+END_SRC
***** desktop package
#+BEGIN_SRC emacs-lisp
;; (use-package desktop
;;   :ensure nil
;;   :after eyebrowse
;;   :config
;;   (setq desktop-save t
;;         desktop-save-buffer t
;;         desktop-restore-eager t
;;         desktop-restore-frames t
;;         desktop-auto-save-timeout 15
;;         desktop-load-locked-desktop t
;;         desktop-restore-reuses-frames t
;;         desktop-base-file-name ".desktop"
;;         desktop-restore-forces-onscreen nil
;;         desktop-restore-in-current-display t
;;         desktop-base-lock-name ".desktop.lock"
;;         desktop-dirname "~/.emacs.d/var/desktop")

;;   (add-to-list 'desktop-modes-not-to-save 'special-mode)
;;   (desktop-save-mode 1))
#+END_SRC
***** custom
#+BEGIN_SRC emacs-lisp
(use-package Custom-mode
  :defer t
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'custom-mode-map
    "q" 'Custom-buffer-done)
  (general-nvmap
    :keymaps 'custom-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)
  (general-define-key
   :keymaps 'custom-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
***** hippie-exp
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :defer t
  :ensure nil
  :config
  (general-imap
    "M-/" 'hippie-expand))
#+END_SRC
**** N1
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-05 Wed 18:51
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: N1/Builtins
:ARCHIVE_CATEGORY: init
:END:
***** Server
#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :config
  (defun my/show-server ()
    (interactive)
    (describe-variable 'server-name)))
#+END_SRC
***** Startup
#+BEGIN_SRC emacs-lisp
(setq startup-screen-inhibit-startup-screen t)
#+END_SRC
***** Auto Revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode 1))
#+END_SRC
***** Files
#+BEGIN_SRC emacs-lisp
(use-package files
  ;; :init
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
  :init
  ;; (add-to-list 'write-file-functions 'redraw-display)
  (setq write-file-functions '(recentf-track-opened-file ))
  :ensure nil
  :config
  ;; (setq write-file-functions '(recentf-track-opened-file undo-tree-save-history-hook))
  (setq save-silently t
        version-control t
        kept-new-versions 5
        kept-old-versions 2
        bookmark-save-flag 1
        delete-old-versions t
        vc-make-backup-files t
        buffer-save-without-query t
        backup-by-copying-when-linked t
        large-file-warning-threshold nil
        backup-directory-alist '(("." . "~/.emacs.d/var/backup"))
        find-file-suppress-same-file-warnings t)
  (setq auto-save-timeout 30)
  (setq auto-save-interval 150)
  ;; (auto-save-mode +1)
  (auto-save-visited-mode -1)
  )
#+END_SRC
***** Prog
#+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\prog\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config

  (defun my/prog-mode-hooks ()
    (interactive)
    (shut-up
      (company-mode +1)
      (tab-jump-out-mode +1)
      (hl-line-mode +1)
      ;; (my/company-idle-three-prefix-one)
      (comment-auto-fill)
      (show-paren-mode +1)
      (company-mode +1)
      (toggle-truncate-lines +1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      (smartparens-mode +1)
      (evil-smartparens-mode +1)))

  (defun my/prog-save-buffer ()
    (interactive)
    (delete-trailing-whitespace)
    (save-buffer))

  (defun my/insert-* ()
    (interactive)
    (evil-insert-state)
    (insert "*"))

  (defun my/insert-*-space ()
    (interactive)
    (evil-insert-state)
    (insert "* "))

  (defun my/insert-plus-space ()
    (interactive)
    (evil-insert-state)
    (insert "+ "))

  (defun my/insert-minus-space ()
    (interactive)
    (evil-insert-state)
    (insert "- "))

  (defun my/insert-0-space ()
    (interactive)
    (evil-insert-state)
    (insert "0 "))

  (defun my/insert-8 ()
    (interactive)
    (evil-insert-state)
    (insert "8"))

  (defun my/insert-1-space ()
    (interactive)
    (evil-insert-state)
    (insert "1 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-2-space ()
    (interactive)
    (evil-insert-state)
    (insert "2 "))

  (defun my/insert-3-space ()
    (evil-insert-state)
    (interactive)
    (insert "3 "))

  (defun my/insert-4-space ()
    (evil-insert-state)
    (interactive)
    (insert "4 "))

  (defun my/insert-5-space ()
    (evil-insert-state)
    (interactive)
    (insert "5 "))

  (defun my/insert-6-space ()
    (evil-insert-state)
    (interactive)
    (insert "6 "))

  (defun my/insert-7-space ()
    (evil-insert-state)
    (interactive)
    (insert "7 "))

  (defun my/insert-8-space ()
    (evil-insert-state)
    (interactive)
    (insert "8 "))

  (defun my/insert-9-space ()
    (evil-insert-state)
    (interactive)
    (insert "9 "))

  (general-unbind 'prog-mode-map
    :with 'my/prog-save-buffer
    [remap save-buffer])

  ;; https://www.emacswiki.org/emacs/autofillmode
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'my/only-indent-buffer)

  (general-nmap
    :keymaps 'prog-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)

  (general-define-key
   :keymaps 'prog-mode-map
   ;; "C-c 9" 'my/comment-and-format-code-macro
   "C-c y" 'my/company-show-options
   "<C-return>" nil
   "<M-return>" 'my/only-indent-buffer)

  (general-define-key
   :keymaps 'prog-mode-map
   "<M-return>" 'my/only-indent-buffer))
#+END_SRC
***** Text Builtin
#+BEGIN_SRC emacs-lisp
(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (add-hook 'text-mode-hook (lambda () (visual-line-mode +1)))
  :ensure nil
  :config

  (defun my/text-hooks ()
    (interactive)
    (shut-up
      (subword-mode +1)
      (auto-capitalize-mode +1)
      (tab-jump-out-mode +1)
      ;; (evil-better-visual-line-on)
      (wc-mode +1)
      (electric-pair-local-mode +1)
      (show-paren-mode +1)
      (smartparens-mode +1)
      ;; (toggle-truncate-lines -1)
      (pabbrev-mode +1)
      ;; (evil-swap-keys-swap-colon-semicolon)
      ;; (evil-swap-keys-swap-double-single-quotes)
      ))

  (defun my/paragraph-backwards ()
    (interactive)
    (previous-line)
    (backward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/paragraph-forward ()
    (interactive)
    (forward-paragraph)
    (forward-line)
    (back-to-indentation))

  (defun my/enable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode +1)
    (aggressive-fill-paragraph-mode +1)
    (message " both fills enabled"))

  (defun my/disable-auto-agg-fill ()
    (interactive)
    (auto-fill-mode -1)
    (aggressive-fill-paragraph-mode -1)
    (message " both fills disabled"))

  (defun my/prose-enable ()
    (interactive)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (hl-line-mode -1)
    ;; (hl-sentence-mode +1)
    ;; (typo-mode +1)
    (pabbrev-mode +1))

  (defun my/prose-disable ()
    (interactive)
    (shut-up
      (flyspell-mode -1)
      (auto-capitalize-mode 1)
      (tab-jump-out-mode 1)
      (electric-operator-mode 1)
      (wc-mode 1)
      (hl-line-mode -1)
      ;; (hl-sentence-mode -1)
      (pabbrev-mode -1)
      ;; (typo-mode -1)
      ))

  (defun my/prose-english ()
    (interactive)
    (my/prose-enable)
    (shut-up
      (flyspell-mode +1)
      (ispell-change-dictionary "english")
      (flyspell-buffer))
    (message " prose english"))

  (defun my/prose-brasileiro ()
    (interactive)
    (my/prose-enable)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    ;; (flyspell-buffer)
    (message " prosa brasileira"))

  (defun my/ispell-english ()
    (interactive)
    (ispell-change-dictionary "english")
    (flyspell-mode +1)
    (message " english"))

  (defun my/ispell-brasileiro ()
    (interactive)
    (ispell-change-dictionary "brasileiro")
    (flyspell-mode +1)
    (message " portuguรชs"))

  (defun my/ispell-dict-options ()
    (interactive)
    (counsel-M-x "^my/ispell-ask-dict "))

  (defun my/ispell-ask-dict-br ()
    (interactive)
    (ispell-change-dictionary "brasileiro"))

  (defun my/ispell-ask-dict-en ()
    (interactive)
    (ispell-change-dictionary "american"))

  (general-nvmap
    :keymaps 'text-mode-map
    "RET" 'hydra-spell/body)

  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))
#+END_SRC
***** Eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :ensure nil
  :config
  (setq eldoc-idle-delay 0.5)
  (global-eldoc-mode -1))
#+END_SRC
***** hs-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :config

  ;; (defun my/my-hs-toogle-hiding ()
  ;;   (interactive)
  ;;   (beginning-of-line)
  ;;   (hs-toggle-hiding))

  (general-nvmap
    :keymaps 'hs-minor-mode-map
    "<tab>" 'hs-toggle-hiding)

  (general-unbind 'hs-minor-mode-map
    :with 'hs-toggle-hiding
    [remap evil-toggle-fold])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-hide-all
    [remap evil-close-folds])

  (general-unbind 'hs-minor-mode-map
    :with 'hs-show-all
    [remap outline-show-all]))
#+END_SRC
*** 2020-02-06 Thursday
**** register
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-06 Thu 14:16
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Builtins/N3/misc
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package register
  :defer t
  :ensure nil
  :config
  (setq register-preview-delay 0))
#+END_SRC
*** 2020-02-12 Wednesday
**** telephone-line
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:06
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Appearance
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :defer t
  :config
  (telephone-line-mode +1))
#+END_SRC
**** removed themes
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:09
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Appearance/themes
:ARCHIVE_CATEGORY: init
:END:
***** noctilux
 #+BEGIN_SRC emacs-lisp
(use-package noctilux-theme
  :defer t
  :ensure t)
 #+END_SRC
***** dracula
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :defer t)
#+END_SRC
***** darktooth
#+BEGIN_SRC emacs-lisp
(use-package darktooth-theme
  :defer t
  :config
  (load-theme 'darktooth t))
#+END_SRC
***** cyberpunk-theme
#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :defer t)
#+END_SRC
***** badwolf-themes
 #+BEGIN_SRC emacs-lisp
(use-package badwolf-theme
  :defer t
  :config
  (load-theme 'badwolf t))
 #+END_SRC
***** monokai-theme
 #+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :defer t
  :ensure t)
 #+END_SRC
***** base16-theme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :defer t
  :config
  (load-theme 'base16-dracula t))
#+END_SRC
***** alect-themes
#+BEGIN_SRC emacs-lisp
(use-package alect-themes
  :defer t)
#+END_SRC
***** kaolin themes
#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :defer t
  :config
  (load-theme 'kaolin-galaxy t))
#+END_SRC
***** color-theme-modern
#+BEGIN_SRC emacs-lisp
(use-package color-theme-modern
  :defer t)
#+END_SRC
**** cheatsheet
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:09
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Appearance
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package cheatsheet
  :defer t
  :config
  (general-define-key
   :keymaps 'cheatsheet-mode-map
   :states '(normal visual insert)
   "q" 'kill-buffer-and-window
   "C-9" 'kill-buffer-and-window
   "<escape>" 'kill-buffer-and-window)


  (cheatsheet-add-group 'Info
                        '(:key "H" :description "history back")
                        '(:key "L" :description "history forward")
                        '(:key "m" :description "Info-forward-node")
                        '(:key "C-n" :description "Info-backward-node")
                        '(:key "C-n" :description "Info-backward-node")
                        '(:key "C-C C-c" :description "eval last")
                        '(:key "<C-return>" :description "eval next")))
         #+END_SRC
**** auto-update
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:10
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package auto-package-update
;;   :config
;;   (setq auto-package-update-interval 7
;;         auto-package-update-delete-old-versions t
;;         auto-package-update-hide-results t
;;         auto-package-update-prompt-before-update t)
;;   (auto-package-update-maybe))
#+END_SRC
**** Helm
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:13
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils
:ARCHIVE_CATEGORY: init
:END:
***** Helm Main
#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer nil
  :init
  (add-hook 'helm-occur-mode-hook 'previous-history-element)
  :config
  (setq helm-split-window-default-side 'same
        helm-full-frame t)
  ;; (helm-autoresize-mode +1)

  (general-define-key
   :keymaps   'helm-map
   "<insert>" 'yank
   "C-s"      'previous-history-element
   "C-w"      'backward-kill-word))
#+END_SRC
***** Helm Org
#+BEGIN_SRC emacs-lisp
(use-package helm-org
  :after helm org
  :config

  (defun my/helm-org-in-buffer-headings ()
    (interactive)
    (widen)
    (helm-org-in-buffer-headings)
    (org-narrow-to-subtree)))
#+END_SRC
***** Helm Org Rifle
#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :after helm org)
#+END_SRC
***** Helm Swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :after helm org)
  #+END_SRC
**** Smart Hungry Delete
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:15
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :defer t
  :ensure t
  :config
  (general-nvmap
    :keymaps 'override
    "X" 'smart-hungry-delete-forward-char)
  (smart-hungry-delete-add-default-hooks))
#+END_SRC
**** haskell-mode
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:16
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :defer t
  :init
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation))
#+END_SRC
**** JS
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:17
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Web
:ARCHIVE_CATEGORY: init
:END:
***** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :init
  (add-hook 'js2-mode-hook #'my/js2-hooks)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  :config

  (add-to-list 'company-backends 'company-tern)

  (defun my/semicolon-newline ()
    (interactive)
    (insert ";\n"))

  (general-imap
    :keymaps   'js2-mode-map
    ";" 'my/semicolon-newline)

  (general-nvmap
    :keymaps   'js2-mode-map
    "<return>" 'hydra-js2-refactor/body)

  (defun my/js2-hooks ()
    (electric-pair-local-mode +1)
    (origami-mode +1)
    (hs-minor-mode -1)
    (js2-refactor-mode)
    (electric-operator-mode +1)
    ;; (toggle-truncate-lines +1)
    (evil-swap-keys-swap-double-single-quotes)
    (setq-local company-backends '(company-tern
                                   company-semantic
                                   company-clang
                                   company-cmake
                                   company-capf
                                   company-files
                                   (company-dabbrev-code
                                    company-gtags
                                    company-etags
                                    company-keywords)
                                   company-dabbrev
                                   company-shell))

    ;; (my/company-idle-one-prefix-two-quiet)
    (tern-mode +1)
    ))

#+END_SRC
***** js2-refactor
#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
  :after js2
  :config
  (general-define-key
   :keymaps 'js2-refactor-mode-map
   :states '(normal visual insert)
   "C-k" 'js2r-kill))
#+END_SRC
***** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t
  :ensure t)
#+END_SRC
**** Web Modes
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:18
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
***** impatient mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :defer t
  :config
  (setq impatient-mode-delay 0.5)
  ;; (httpd-start)
  )
#+END_SRC
***** JS
****** js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :init
  (add-hook 'js2-mode-hook #'my/js2-hooks)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  :config

  (add-to-list 'company-backends 'company-tern)

  (defun my/semicolon-newline ()
    (interactive)
    (insert ";\n"))

  (general-imap
    :keymaps   'js2-mode-map
    ";" 'my/semicolon-newline)

  (general-nvmap
    :keymaps   'js2-mode-map
    "<return>" 'hydra-js2-refactor/body)

  (defun my/js2-hooks ()
    (electric-pair-local-mode +1)
    (origami-mode +1)
    (hs-minor-mode -1)
    (js2-refactor-mode)
    (electric-operator-mode +1)
    ;; (toggle-truncate-lines +1)
    (evil-swap-keys-swap-double-single-quotes)
    (setq-local company-backends '(company-tern
                                   company-semantic
                                   company-clang
                                   company-cmake
                                   company-capf
                                   company-files
                                   (company-dabbrev-code
                                    company-gtags
                                    company-etags
                                    company-keywords)
                                   company-dabbrev
                                   company-shell))

    ;; (my/company-idle-one-prefix-two-quiet)
    (tern-mode +1)
    ))

#+END_SRC
****** js2-refactor
#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
  :after js2
  :config
  (general-define-key
   :keymaps 'js2-refactor-mode-map
   :states '(normal visual insert)
   "C-k" 'js2r-kill))
#+END_SRC
****** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t
  :ensure t)
#+END_SRC
***** CSS Mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'css-mode-hook 'my/css-mode-hooks)

  :config

  (general-define-key
   :keymaps 'css-mode-map
   :states '(normal visual insert)
   "<C-return>" 'counsel-css)

  (general-nvmap
    :keymaps 'css-mode-map
    "<M-return>" 'indent-buffer
    "<return>" 'hydra-css-mode/body)

  (general-imap
    :keymaps 'css-mode-map
    "<M-return>" 'indent-buffer)

  (defun my/css-mode-hooks ()
    (interactive)
    (hl-line-mode -1)
    (emmet-mode +1)
    (flycheck-mode +1)
    (electric-pair-local-mode +1)
    (electric-operator-mode +1)
    (hs-minor-mode -1)
    (evil-smartparens-mode +1)
    (impatient-mode +1)
    (highlight-indentation-mode +1)
    (evil-swap-keys-swap-double-single-quotes)
    (setq web-mode-indent-style 1)
    (origami-mode +1)
    (git-auto-commit-mode +1)
    (toggle-truncate-lines +1)
    (aggressive-indent-mode +1)
    (my/company-idle-one-prefix-one-quiet)
    ;; (setq-local company-backends '((company-css
    ;;                                 company-web-html
    ;;                                 company-files)
    ;;                                (company-semantic
    ;;                                 company-capf
    ;;                                 company-dabbrev-code
    ;;                                 company-keywords
    ;;                                 company-dabbrev
    ;;                                 company-shell)))
    ))
#+END_SRC

***** Emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :defer t
  :ensure t
  :config

  (setq emmet-insert-flash-time 0.1)
  (setq emmet-move-cursor-between-quotes t)

  (general-define-key
   :keymaps 'emmet-mode-keymap
   "C-S-p" 'my/emmet-prev
   "C-S-n" 'my/emmet-next)

  (defun my/emmet-prev ()
    (interactive)
    (emmet-prev-edit-point 1)
    (evil-insert-state))

  (defun my/emmet-next ()
    (interactive)
    (emmet-next-edit-point 1)
    (evil-insert-state))

  (emmet-mode +1))
#+END_SRC
***** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :ensure t
  :init
  (add-hook 'web-mode-hook (lambda () (setq truncate-lines t)))
  (add-hook 'web-mode-hook 'my/web-mode-hooks)

  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))

  :config

  (setq web-mode-enable-current-column-highlight t
        web-mode-enable-current-element-highlight t
        web-mode-markup-indent-offset 4)

  (defun my/web-mode-hooks ()
    (interactive)
    (progn
      (emmet-mode +1)
      (flycheck-mode +1)
      (electric-pair-local-mode +1)
      (hs-minor-mode -1)
      (evil-smartparens-mode +1)
      ;; (impatient-mode +1)
      (highlight-indentation-mode +1)
      (evil-swap-keys-swap-double-single-quotes)
      (setq web-mode-indent-style 1)
      (setq truncate-lines t)
      (origami-mode +1)
      (git-auto-commit-mode +1)
      (aggressive-indent-mode +1)
      (setq-local company-backends '((company-files
                                      company-web-html
                                      company-css
                                      company-bootstrap
                                      )
                                     (company-semantic
                                      company-capf
                                      company-dabbrev-code
                                      company-keywords
                                      company-dabbrev
                                      company-shell)))
      (my/company-idle-one-prefix-one-quiet)
      (toggle-truncate-lines)))
  (general-create-definer leader
    :prefix "SPC")
  (leader
    :states '(normal)
    :keymaps 'web-mode-map
    "n" 'my/narrow-to-tag-macro)

  (general-nvmap
    :keymaps 'web-mode-map
    "zo" 'origami-recursively-toggle-node
    "g3" 'evilmi-jump-items
    "<return>" 'hydra-web-mode/body
    "<M-return>" 'indent-buffer
    "ge" 'evil-end-of-line
    "gl" 'web-mode-element-next
    "gh" 'web-mode-element-previous
    "gj" 'web-mode-element-sibling-next
    "gk" 'web-mode-element-sibling-previous)

  (general-define-key
   :keymaps 'web-mode-map
   :states '(normal visual insert)
   "C-c b" 'my/narrow-html-section-macro
   "<S-tab>" 'origami-recursively-toggle-node
   "C-k" 'web-mode-attribute-kill
   "M-e" 'web-mode-element-next
   "M-a" 'web-mode-element-previous
   "C-/" 'web-mode-tag-next
   "C-;" 'web-mode-tag-previous
   "M-t" 'web-mode-attribute-next
   "C-t" 'web-mode-attribute-previous
   "<M-return>" 'indent-buffer
   "<C-return>" 'counsel-css
   "<C-M-return>" 'browse-url-of-file)

  (defun my/set-web-theme ()
    (interactive)
    (disable-theme 'noctilux)
    (load-theme 'doom-dracula))

  (general-unbind 'web-mode-map
    :with 'my/clear-html-macro
    [remap web-mode-comment-indent-new-line])

  (general-unbind 'web-mode-map
    :with 'origami-close-all-nodes
    [remap evil-close-folds])

  (general-unbind 'web-mode-map
    :with 'origami-open-all-nodes
    [remap outline-show-all])

  (defun my/erase-buffer-yank ()
    (interactive)
    (erase-buffer)
    ;; (insert "!")
    ;; (emmet-expand-line nil)
    (yank nil)
    (evil-window-middle))

  (defun web-mode-buffer-indent ()
    "Indent all buffer."
    (interactive)
    (indent-region (point-min) (point-max))
    (delete-trailing-whitespace)))
#+END_SRC

***** Web Beautify
#+BEGIN_SRC emacs-lisp
(use-package web-beautify
  :after web-mode
  :config
  ;; (setq web-beautify-args '("-f" "-" "--indent-size 2" "--indent-inner-html" "--indent-empty-lines" "--quiet"))
  (setq web-beautify-args '("-f" "-" "--quiet"))
  (defun my/web-beautify-html ()
    (interactive)
    (let ((inhibit-message t))
      (web-beautify-html)
      (indent-buffer)
      (save-buffer)))

  )
#+END_SRC
***** company-bootstrap
#+BEGIN_SRC emacs-lisp
(use-package company-bootstrap
  :defer t
  :load-path "~/.emacs.d/etc/custom_lisp/company-bootstrap/")
#+END_SRC
**** Python Modes
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:20
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
***** elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
  (add-hook 'elpy-mode-hook 'my/elpy-hooks)
  :config
  ;; (setq elpy-rpc-python-command "python3")
  ;; (setq highlight-indentation-blank-lines 't)
  ;; (setq elpy-rpc-python-command "/home/jerry/.pyenv/shims/python3.8")
  (setq elpy-autodoc-delay 3)
  (setq elpy-rpc-virtualenv-path 'current)
  (general-unbind 'normal elpy-mode-map
    :with 'yafolding-toggle-element
    [remap elpy-folding-toggle-at-point])

  (defun my/elpy-hooks ()
    (interactive)
    (my/disable-eldoc)
    (pyenv-mode +1))

  (defun my/disable-eldoc ()
    (interactive)
    (eldoc-mode -1))

  (defun elpy-goto-definition ()
    (interactive)
    (elpy-rpc-warn-if-jedi-not-available)
    (let ((location (elpy-rpc-get-definition)))
      (if location
          (elpy-goto-location (car location) (cadr location))
        (error "No definition found")))
    (save-excursion
      (evil-scroll-line-to-center 1)))

  (general-define-key
   :keymaps 'elpy-mode-map
   "C-c d" 'elpy-doc)

  (defun my/elpy-switch-to-buffer ()
    (interactive)
    (elpy-shell-switch-to-buffer)
    (quit-windows-on "*Python*")))
#+END_SRC
***** pyenv
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode
  :defer t)
#+END_SRC
***** jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :after python)
#+END_SRC
***** python
#+BEGIN_SRC emacs-lisp
(use-package python
  :defer t
  :ensure nil
  :init
  (add-hook 'python-mode-hook 'my/python-hooks)
  ;; https://stackoverflow.com/a/6141681
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'write-contents-functions (lambda() (elpy-black-fix-code)) nil t)))

  :config
  (font-lock-add-keywords 'python-mode
                          '(("cls" . font-lock-keyword-face)))
  (setq python-shell-interpreter "python3")
  (setq python-shell-interpreter-args "-i -q")

  (setq python-shell-completion-native-enable nil)

  (defun my/python-hooks ()
    (interactive)
    (electric-operator-mode +1)
    (flycheck-mode +1)
    (origami-mode -1)
    (yafolding-mode +1)
    (rainbow-delimiters-mode +1)
    (highlight-operators-mode +1)
    (evil-swap-keys-swap-double-single-quotes)
    (evil-swap-keys-swap-colon-semicolon)
    (evil-swap-keys-swap-underscore-dash)
    (evil-swap-keys-swap-square-curly-brackets)
    (smartparens-strict-mode +1)
    (git-auto-commit-mode +1)
    (my/company-idle-one-prefix-one-quiet)
    (highlight-numbers-mode +1)
    ;; (anaconda-mode +1)
    ;; (hs-minor-mode +1)
    ;; (pyenv-mode +1)
    (importmagic-mode +1)
    (blacken-mode +1)
    (elpy-enable +1)
    (flymake-mode -1))

  ;; (setq-local company-backends '(company-jedi
  ;;                                company-dabbrev-code
  ;;                                company-files
  ;;                                (company-semantic
  ;;                                 company-capf
  ;;                                 company-keywords
  ;;                                 company-dabbrev
  ;;                                 company-shell)))

  (defun my/olivetti-narrow ()
    (interactive)
    (olivetti-mode +1)
    (setq-local olivetti-body-width 60))

  (defun my/inferior-python-mode-hooks ()
    (interactive)
    (line-numbers)
    (subword-mode 1)
    (electric-operator-mode)
    (company-mode )
    ;; (my/company-idle-one-prefix-one-quiet)
    (evil-swap-keys-swap-double-single-quotes)
    (evil-swap-keys-swap-colon-semicolon))

  ;; PYTHON KEYS ;;
  (defun my/insert-paren ()
    (interactive)
    (evil-insert-state)
    (insert "()")
    (backward-char 1))

  (general-define-key
   :keymaps 'inferior-python-mode-map
   "M-e" 'counsel-shell-history
   "C-c j" 'my/evil-shell-bottom
   "C-c u" 'universal-argument
   "C-u" 'comint-kill-input
   "C-l" 'comint-clear-buffer
   "C-;" 'my/elpy-switch-to-buffer
   "C-n" 'comint-next-input
   "C-p" 'comint-previous-input)

  (general-unbind 'inferior-python-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap save-buffer]
    [remap evil-normal-state])

  (general-unbind 'python-mode-map
    :with 'elpy-folding-toggle-at-point
    [remap hs-toggle-hiding])

  (general-define-key
   :keymaps 'python-mode-map
   "M-a" 'python-nav-backward-statement
   "M-e" 'python-nav-forward-statement
   "C-S-p" 'python-nav-backward-sexp
   "C-S-n" 'python-nav-forward-sexp
   "C-x o" 'my/olivetti-narrow
   "C-x m" 'elpy-multiedit-python-symbol-at-point
   "C-x M" 'elpy-multiedit-stop
   "C-c g" 'my/counsel-ag-python
   "M-m" 'blacken-buffer
   "C-c p" 'my/python-make-print
   "C-c f" 'my/python-make-fstring
   "C-c DEL" 'my/erase-python-file
   "C-c =" 'my/erase-python-file-and-yank
   )

  (general-unbind 'python-mode-map
    :with 'my/python-save-buffer
    [remap my/quiet-save-buffer])

  (general-unbind 'python-mode-map
    :with 'yafolding-hide-all
    [remap evil-close-folds])

  (general-nmap
    :keymaps 'python-mode-map
    "<escape>" 'save-buffer)

  (general-nvmap
    :keymaps 'python-mode-map
    "M-a" 'python-nav-backward-statement
    "M-e" 'python-nav-forward-statement
    "C-S-p" 'python-nav-backward-sexp
    "C-S-n" 'python-nav-forward-sexp
    "C-รง" 'my/python-newline-beg
    "zi" 'hs-show-all
    "<backspace>" 'org-edit-src-exit
    "<C-return>" 'my/quickrun
    "<tab>" 'elpy-folding-toggle-at-point
    "<tab>" 'elpy-folding-toggle-at-point
    "RET" 'hydra-python-mode/body
    "zm" 'evil-close-folds
    "gh" 'outline-up-heading
    "gl" 'outline-next-heading
    "zl" 'outline-show-subtree
    "<" 'python-indent-shift-left
    ">" 'python-indent-shift-right
    "gj" 'outline-forward-same-level
    "gk" 'outline-backward-same-level)

  (defun my/python-newline-beg ()
    (interactive)
    (evil-insert-state)
    (newline)
    (beginning-of-line))

  (defun my/python-colon-newline ()
    (interactive)
    (end-of-line)
    (insert ":")
    (newline-and-indent))

  (general-imap
    :keymaps 'python-mode-map
    "C-="   'my/python-colon-newline
    "C-รง" 'my/python-newline-beg
    "<C-return>" 'my/quickrun
    "C-h" 'python-indent-dedent-line-backspace
    "M-a" 'python-nav-backward-statement
    "M-e" 'python-nav-forward-statement
    "C-S-p" 'python-nav-backward-sexp
    "C-S-n" 'python-nav-forward-sexp
    )

  ;; PYTHON FUNCTIONS;;

  (defun execute-python-program ()
    (interactive)
    (my/window-to-register-91)
    (my/quiet-save-buffer)
    (defvar foo-execute-python)
    (setq foo-execute-python (concat "python3 " (buffer-file-name)))
    (other-window 1)
    (switch-to-buffer-other-window "*Async Shell Command*")
    (shell-command foo))

  (defun my/execute-python-program-shell-simple  ()
    (interactive)
    (my/window-to-register-91)
    (my/quiet-save-buffer)
    (defvar foo-execute-python-simple)
    (setq foo-execute-python-simple (concat "python3 " (prelude-copy-file-name-to-clipboard)))
    (shell-command foo))

  (defun my/ex-python-run ()
    (interactive)
    (evil-ex "w !python3"))

  (defun my/execute-python-program-shell ()
    (interactive)
    (progn
      (my/quiet-save-buffer)
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (sit-for 0.3)
      (insert "source ~/scripts/cline_scripts/smallprompt.sh")
      (comint-send-input)
      (insert "python3 ")
      (yank)
      (comint-send-input)
      (evil-insert-state)
      (sit-for 0.3)
      (comint-clear-buffer)
      (company-mode -1)))

  (general-unbind 'python-mode-map
    :with 'elpy-doc
    [remap helpful-at-point])

  (defun my/run-python-external ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (start-process-shell-command
       "call term" nil
       "~/scripts/i3_scripts/show_term_right")))

  (defun my/erase-python-file ()
    (interactive)
    (erase-buffer)
    (insert "#!/usr/bin/env python3\n\n")
    (evil-insert-state)
    (flycheck-clear))

  (defun my/erase-python-file-and-yank ()
    (interactive)
    (erase-buffer)
    (insert "#!/usr/bin/env python3\n\n")
    (yank))

  (defun my/kill-python-file ()
    (interactive)
    (kill-region (point-min) (point-max))
    (insert "#!/usr/bin/env python3\n\n")
    (evil-insert-state)
    (flycheck-clear))

  (defun my/python-save-buffer ()
    (interactive)
    (evil-ex-nohighlight)
    (let ((inhibit-message t))
      (delete-trailing-whitespace)
      (save-buffer)))

  ;; PYTHON SETTINGS

  (setq comment-auto-fill-only-comments t
        python-indent-offset 4
        python-indent-guess-indent-offset nil)

  (auto-fill-mode 1))
#+END_SRC

***** blacken
#+BEGIN_SRC emacs-lisp
(use-package blacken
  ;; :pin melpa-stable
  :defer t
  :config
  (setq blacken-fast-unsafe nil)
  (setq blacken-line-length 79))
#+END_SRC
***** importmagic
#+BEGIN_SRC emacs-lisp
(use-package importmagic
  :after python
  :config
  (setq importmagic-be-quiet t)
  (remove-hook 'python-mode-hook 'importmagic-mode))
#+END_SRC
***** anaconda-mode
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure nil
  :after python)
#+END_SRC
***** company-jedi
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :after python
  :init
  (add-to-list 'company-backends 'company-jedi)
  :ensure t)
#+END_SRC
***** py-autopep8
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :after python
  :ensure t)
#+END_SRC
***** live-py-mode
#+BEGIN_SRC emacs-lisp
(use-package live-py-mode
  :defer t
  :ensure t
  :config
  (setq live-py-update-all-delay 1))
#+END_SRC
**** Yaml
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:20
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :defer t)
#+END_SRC
**** Folding
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:20
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
***** origami
#+BEGIN_SRC emacs-lisp
(use-package origami
  :defer t
  :ensure t
  :config

  (general-nvmap
   :keymaps 'origami-mode-map
   "<tab>" 'origami-toggle-node)

  (setq origami-fold-replacement ".")

  )
  #+END_SRC
***** yafolding
#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :defer t)
  #+END_SRC
**** highlightindent guides
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:21
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Highlight
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :defer t
  :ensure t)
#+END_SRC

**** Aggresive Indent
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:21
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :defer t
  :ensure t
  :config
  (setq aggressive-indent-sit-for-time 0.05))
#+END_SRC
**** My Write Modes
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:22
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils
:ARCHIVE_CATEGORY: init
:END:
***** My Insert Mode
#+BEGIN_SRC emacs-lisp
(defun my/write-insert-mode ()
  (interactive)
  (general-unbind '(org-mode-map evil-org-mode-map)
    :with 'ignore
    ;; [remap evil-delete-backward-word]
    [remap undo-fu-only-redo]
    [remap undo-fu-only-undo]
    [remap evil-org-open-below]
    [remap evil-org-open-above]
    [remap delete-backward-char]
    [remap delete-char]
    [remap evil-change-line]
    [remap evil-change-to-initial-state]
    [remap evil-change-to-previous-state]
    [remap evil-change-whole-line]
    [remap evil-change]
    [remap evil-delete-backward-char-and-join]
    [remap evil-delete-backward-char]
    [remap evil-delete-buffer]
    [remap evil-delete-char]
    [remap evil-delete-line]
    [remap evil-delete-marks]
    [remap evil-delete-whole-line]
    [remap evil-delete]
    [remap evil-join-space]
    [remap evil-join]
    [remap evil-org-delete-backward-char]
    [remap evil-org-delete-char]
    [remap evil-org-delete]
    [remap kill-line]
    [remap kill-paragraph]
    [remap kill-rectangle]
    [remap kill-region]
    [remap kill-ring-save]
    [remap kill-sentence]
    [remap kill-visual-line]
    [remap kill-whole-line]
    [remap kill-word]
    [remap my/backward-kill-line]
    [remap org-delete-backward-char]
    [remap org-delete-char]
    [remap org-delete-indentation]
    [remap org-delete-property-globally]
    [remap org-delete-property]
    [remap undo])
  (evil-define-key 'insert org-mode-map (kbd "C-k") 'ignore)
  (evil-define-key 'insert org-mode-map (kbd "DEL") 'ignore)
  (message " insert only"))
#+END_SRC
***** My Edit Mode
#+BEGIN_SRC emacs-lisp
(defun my/write-edit-mode ()
  (interactive)
  (general-unbind '(org-mode-map evil-org-mode-map)
    :with nil
    [remap undo-fu-only-redo]
    [remap undo-fu-only-undo]
    [remap evil-delete-backward-word]
    [remap evil-org-open-below]
    [remap evil-org-open-above]
    [remap delete-backward-char]
    [remap delete-char]
    [remap evil-change-line]
    [remap evil-change-to-initial-state]
    [remap evil-change-to-previous-state]
    [remap evil-change-whole-line]
    [remap evil-change]
    [remap evil-delete-backward-char-and-join]
    [remap evil-delete-backward-char]
    [remap evil-delete-buffer]
    [remap evil-delete-char]
    [remap evil-delete-line]
    [remap evil-delete-marks]
    [remap evil-delete-whole-line]
    [remap evil-delete]
    [remap evil-join-space]
    [remap evil-join]
    [remap evil-org-delete-backward-char]
    [remap evil-org-delete-char]
    [remap evil-org-delete]
    [remap kill-line]
    [remap kill-paragraph]
    [remap kill-rectangle]
    [remap kill-region]
    [remap kill-ring-save]
    [remap kill-sentence]
    [remap kill-visual-line]
    [remap kill-whole-line]
    [remap kill-word]
    [remap my/backward-kill-line]
    [remap org-delete-backward-char]
    [remap org-delete-char]
    [remap org-delete-indentation]
    [remap org-delete-property-globally]
    [remap org-delete-property]
    [remap undo])
  (evil-define-key 'insert org-mode-map (kbd "C-k") 'kill-visual-line)
  (evil-define-key 'insert org-mode-map (kbd "DEL") 'evil-delete-backward-char-and-join)
  (message " insert and edit"))
#+END_SRC
**** bookmark+
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-12 Wed 23:26
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Movement
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package bookmark+
;;   :defer t
;;   :load-path "~/.emacs.d/etc/custom_lisp/bookmark-plus"
;;   :init
;;   (setq bmkp-bookmark-map-prefix-keys '("p")))
#+END_SRC
*** 2020-02-13 Thursday
**** writeroom-mode
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 00:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Text Utils
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :defer t
  :init
  (add-hook 'writeroom-mode-hook 'my/enable-writeroom-hooks)
  (advice-add 'writeroom-mode :before #'toggle-frame-fullscreen)
  :config
  (setq writeroom-border-width 85
        writeroom-fringes-outside-margins nil
        writeroom-bottom-divider-width 0
        writeroom-width 86
        ;; writeroom-mode-line nil
        writeroom-global-effects '(writeroom-set-fullscreen
                                   writeroom-set-alpha
                                   writeroom-set-menu-bar-lines
                                   writeroom-set-tool-bar-lines
                                   writeroom-set-vertical-scroll-bars
                                   writeroom-set-bottom-divider-width
                                   writeroom-set-internal-border-width))
  (general-define-key
   :keymaps 'writeroom-mode-map
   "C-9" #'writeroom-increase-width
   "C-0" #'writeroom-decrease-width
   "C--" #'writeroom-adjust-width)

  (defun my/enable-writeroom-hooks ()
    (interactive)
    (my/prose-brasileiro)
    (olivetti-mode -1)
    (aggressive-fill-paragraph-mode +1)
    (auto-fill-mode +1)
    (set-fill-column 83)))
#+END_SRC
**** highlight.el
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 00:40
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Text Utils
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package highlight
  :if window-system
  :defer t
  :config

  (defun my/hlt-highlight-region ()
    (interactive)
    (hlt-highlight-region)
    (evil-exit-visual-state))

  (defun my/hlt-unhighlight-region ()
    (interactive)
    (hlt-unhighlight-region)
    (evil-exit-visual-state)))
  #+END_SRC
**** Git Auto Commit
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:38
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/VC
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode
  :if window-system
  :disabled
  :config
  (setq-default gac-debounce-interval (* 60 30))
  (defun gac-commit (buffer)
    "Commit the current buffer's file to git."
    (let* ((buffer-file (buffer-file-name buffer))
           (filename (convert-standard-filename
                      (file-name-nondirectory buffer-file)))
           (commit-msg (gac--commit-msg buffer-file))
           (default-directory (file-name-directory buffer-file)))
      (shell-command
       (concat "git add " (shell-quote-argument filename)
               gac-shell-and
               "git commit -m " (shell-quote-argument commit-msg))))))
#+END_SRC
**** Evil Magit
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/VC/Magit
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :if window-system
  :after magit)
#+END_SRC
**** Magit Main
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/VC/Magit
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package magit
  :if window-system
  :disabled
  :init
  (add-hook 'magit-post-stage-hook 'my/magit-after-stage-hooks)
  :config
  (defun my/magit-stage-untracked ()
    (interactive)
    (progn
      (magit-status-setup-buffer)
      (goto-char (point-min))
      (magit-section-forward-sibling)
      (magit-stage)
      (magit-mode-bury-buffer)))

  (defun my/magit-stage-modified-and-commit ()
    (interactive)
    (progn
      (my/tangle-py-init.org-only-quiet)
      (let ((current-prefix-arg '(4))) (magit-stage-modified))
      (magit-commit-create)))

  ;; (defun my/magit-stage-this-file-and-commit ()
  ;;   (interactive)
  ;;   (progn
  ;;     (my/tangle-this-file-quiet)
  ;;     (magit-stage-modified)
  ;;     (magit-commit-create)))



  (defun my/magit-after-stage-hooks ()
    (interactive)
    (message " staging complete"))

  (add-to-list 'magit-no-confirm 'stage-all-changes)

  (global-magit-file-mode +1))
#+END_SRC
**** scheme
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:40
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Lisp
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package scheme
;;   :defer nil
;;   :init
;;   (add-hook 'scheme-mode-hook 'my/scheme-hooks)
;;   :config
;;   (setq geiser-scheme-implementation 'mit)
;;   (defun my/scheme-hooks ()
;;     (interactive)
;;     (rainbow-delimiters-mode +1)
;;     (geiser-mode +1)))
#+END_SRC
**** geiser
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:40
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Lisp
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
;; (use-package geiser
;;   :after scheme
;;   :config
;;   (setq geiser-default-implementation 'mit)
;;   (defun my/geiser-delete-window ()
;;     (interactive)
;;     (delete-window))

;;   (defun my/geiser-switch-to-repl ()
;;     (interactive)
;;     (geiser-mode-switch-to-repl nil)
;;     (evil-insert-state))

;;   (defun my/geiser-switch-to-repl-and-enter ()
;;     (interactive)
;;     (geiser-mode-switch-to-repl-and-enter)
;;     (evil-insert-state))

;;   (general-define-key
;;    :keymaps 'geiser-mode-map
;;    :states   '(normal visual insert)
;;    "<C-return>" 'my/geiser-switch-to-repl-and-enter
;;    "C-/" 'my/geiser-switch-to-repl
;;    "C-;" 'my/geiser-switch-to-repl
;;    "C-c RET" 'run-scheme
;;    "C-k" 'my/lispy-kill)

;;   (general-define-key
;;    :keymaps 'geiser-repl-mode-map
;;    :states   '(normal visual insert)
;;    "<C-return>" 'my/geiser-delete-window
;;    "C-;" 'my/geiser-delete-window
;;    "C-/" 'geiser-repl-exit
;;    "C-k" 'my/lispy-kill
;;    "C-l" 'geiser-repl-clear-buffer)

;;   (general-define-key
;;    :keymaps 'geiser-repl-mode-map
;;    :states   '(normal visual)
;;    "<escape>" 'my/geiser-delete-window))
  #+END_SRC
**** paredit
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:40
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Lisp
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :defer t)
#+END_SRC
**** paredit
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:41
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Lisp
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :defer t)
#+END_SRC
**** parinfer
:PROPERTIES:
:ARCHIVE_TIME: 2020-02-13 Thu 02:41
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils/Prog/Lisp
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :defer t
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             evil           ; If you use Evil.
             lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
             paredit        ; Introduce some paredit commands.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank))   ; Yank behavior depend on mode.
    ;; (add-hook 'clojure-mode-hook #'parinfer-mode)
    ;; (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    ;; (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    ;; (add-hook 'scheme-mode-hook #'parinfer-mode)
    ;; (add-hook 'lisp-mode-hook #'parinfer-mode)
    ))
#+END_SRC
** 2020-04 April
*** 2020-04-20 Monday
**** Undohist
:PROPERTIES:
:ARCHIVE_TIME: 2020-04-20 Mon 10:24
:ARCHIVE_FILE: ~/emacs-profiles/my-emacs/init.org
:ARCHIVE_OLPATH: Utils/Undo
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package undohist
  :defer 5
  ;; :disabled
  :init
  (setq save-place-file (concat udir "var/save-place.el"))
  :config
  (undohist-initialize))
#+END_SRC
*** 2020-04-23 Thursday
**** poet
:PROPERTIES:
:ARCHIVE_TIME: 2020-04-23 Thu 19:36
:ARCHIVE_FILE: ~/emacs-profiles/my-emacs/init.org
:ARCHIVE_OLPATH: Appearance/themes
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package poet-theme)
#+END_SRC
** 2020-05 May
*** 2020-05-09 Saturday
**** auto package update
:PROPERTIES:
:ARCHIVE_TIME: 2020-05-09 Sat 10:49
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: Utils
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :disabled
  :config
  (setq auto-package-update-interval 30
        auto-package-update-delete-old-versions t
        auto-package-update-hide-results nil
        auto-package-update-prompt-before-update t)
  (auto-package-update-maybe))
#+END_SRC
