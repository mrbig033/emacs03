(defun undo-propose ()
    (interactive)
    (if (bound-and-true-p undo-propose-mode)
        (undo)
      (let ((mode major-mode)
            (orig-buffer (current-buffer))
            (list-copy (undo-copy-list buffer-undo-list))
            (pos (point))
            (win-start (window-start))
            (tmp-buffer (generate-new-buffer
                         (concat "*Undo Propose: "
                                 (buffer-name) "*"))))
        (if undo-propose-pop-to-buffer
            (set-window-dedicated-p (get-buffer-window (pop-to-buffer tmp-buffer)) t)
          (switch-to-buffer tmp-buffer nil t))
        (funcall mode)
        (insert-buffer-substring orig-buffer 1 (1+ (buffer-size orig-buffer)))
        (goto-char pos)
        (set-window-start (selected-window) win-start)
        (setq-local buffer-undo-list list-copy)
        (setq-local buffer-read-only t)
        (setq-local undo-propose-parent orig-buffer)
        (undo-propose-mode 1)
        (undo-propose-copy-markers)
        (run-hooks 'undo-propose-entry-hook)
        (undo-propose--message "<return> to commit, 'q' or <escape> to cancel"))))